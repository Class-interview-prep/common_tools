{
    "version": 3,
    "terraform_version": "0.11.7",
    "serial": 65,
    "lineage": "d6d58aa6-ab85-c0ef-aedc-ae65511c6408",
    "modules": [
        {
            "path": [
                "root"
            ],
            "outputs": {
                "fuchicorp_vault_token": {
                    "sensitive": false,
                    "type": "string",
                    "value": "Wq32vuLCCiLCcc7x6VAtB0yxRXZMRlWPICYPZjS4"
                },
                "grafana_endpoint": {
                    "sensitive": false,
                    "type": "string",
                    "value": "grafana.fuchicorp.com"
                },
                "grafana_password": {
                    "sensitive": false,
                    "type": "string",
                    "value": "vghT7vFHDRnEHmC"
                },
                "grafana_username": {
                    "sensitive": false,
                    "type": "string",
                    "value": "grafuser"
                },
                "jenkins_endpoint": {
                    "sensitive": false,
                    "type": "string",
                    "value": "jenkins.fuchicorp.com"
                },
                "jenkins_password": {
                    "sensitive": false,
                    "type": "string",
                    "value": "B1JsVZtr4rvJfmnnafqRjTEKLsT"
                },
                "jenkins_user": {
                    "sensitive": false,
                    "type": "string",
                    "value": "admin"
                }
            },
            "resources": {
                "data.template_file.external_dns_values": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "0e3e1c40da89467d396f118e58a581fbb4f945fcadafd98e01d4ac965d59a782",
                        "attributes": {
                            "id": "0e3e1c40da89467d396f118e58a581fbb4f945fcadafd98e01d4ac965d59a782",
                            "rendered": "## Global Docker image parameters\n## Please, note that this will override the image parameters, including dependencies, configured to use the global value\n## Current available global Docker image parameters: imageRegistry and imagePullSecrets\n##\n# global:\n#   imageRegistry: myRegistryName\n#   imagePullSecrets:\n#     - myRegistryKeySecretName\n\n## Bitnami external-dns image version\n## ref: https://hub.docker.com/r/bitnami/external-dns/tags/\n##\nimage:\n  registry: docker.io\n  repository: bitnami/external-dns\n  tag: 0.5.17-r16\n  ## Specify a imagePullPolicy\n  ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'\n  ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images\n  ##\n  pullPolicy: IfNotPresent\n  ## Optionally specify an array of imagePullSecrets.\n  ## Secrets must be manually created in the namespace.\n  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/\n  ##\n  # pullSecrets:\n  #   - myRegistryKeySecretName\n\n## String to partially override external-dns.fullname template (will maintain the release name)\n# nameOverride:\n\n## String to fully override external-dns.fullname template\n# fullnameOverride:\n\n## K8s resources type to be observed for new DNS entries by ExternalDNS\n##\nsources:\n- ingress\n# - service\n# - crd\n\n## DNS provider where the DNS records will be created. Available providers are:\n## - aws, azure, cloudflare, coredns, designate, digitalocoean, google, infoblox, rfc2136\n##\nprovider: google\n\n## Whether to publish DNS records for ClusterIP services or not (optional)\n##\npublishInternalServices: true\n\n## AWS configuration to be set via arguments/env. variables\n##\naws:\n  ## AWS credentials\n  ##\n  credentials:\n    secretKey: \"\"\n    accessKey: \"\"\n    ## pre external-dns 0.5.9 home dir should be `/root/.aws`\n    ##\n    mountPath: \"/.aws\"\n  ## AWS region\n  ##\n  region: \"us-east-1\"\n  ## Zone Filter. Available values are: public, private\n  ##\n  zoneType: \"\"\n  ## AWS Role to assume\n  ##\n  assumeRoleArn: \"\"\n  ## Maximum number of changes that will be applied in each batch\n  ##\n  batchChangeSize: 1000\n  ## AWS Zone tags\n  ##\n  zoneTags: []\n\n## Azure configuration to be set via arguments/env. variables\n##\nazure:\n  ## When a secret to load azure.json is not specified,\n  ## the host's /etc/kubernetes/azure.json will be used\n  ##\n  secretName: \"\"\n  ## Azure resource group to use\n  ##\n  resourceGroup: \"\"\n\n## Cloudflare configuration to be set via arguments/env. variables\n##\ncloudflare:\n  ## `CF_API_KEY` to set in the environment\n  ##\n  apiKey: \"\"\n  ## `CF_API_EMAIL` to set in the environment\n  ##\n  email: \"\"\n  ## Enable the proxy feature of Cloudflare\n  ##\n  proxied: true\n\n## CoreDNS configuration to be set via arguments/env variables\n##\ncoredns:\n  ## Comma-separated list of the etcd endpoints\n  ## Secure (https) endpoints can be used as well, in that case `etcdTLS` section\n  ## should be filled in accordingly\n  ##\n  etcdEndpoints: \"http://etcd-extdns:2379\"\n  ## Configuration of the secure communication and client authentication to the etcd cluster\n  ## If enabled all the values under this key must hold a valid data\n  ##\n  etcdTLS:\n    ## Enable or disable secure communication and client authentication to the etcd cluster\n    ##\n    enabled: false\n    ## Name of the existing secret containing cert files for client communication\n    ## ref: https://github.com/etcd-io/etcd/blob/master/Documentation/op-guide/security.md\n    ## ref (secret creation):\n    ##  https://github.com/bitnami/charts/tree/master/bitnami/etcd#configure-certificates-for-client-communication\n    ##\n    secretName: \"etcd-client-certs\"\n    ## Location of the mounted certificates inside external-dns pod\n    ##\n    mountPath: \"/etc/coredns/tls/etcd\"\n    ## CA PEM file used to sign etcd TLS cert, should exist in the secret provided above\n    ##\n    caFilename: \"ca.crt\"\n    ## Certificate PEM file, should exist in the secret provided above\n    ## Will be used by external-dns to authenticate against etcd\n    ##\n    certFilename: \"cert.pem\"\n    ## Private key PEM file, should exist in the secret provided above\n    ## Will be used by external-dns to authenticate against etcd\n    ##\n    keyFilename: \"key.pem\"\n\n## OpenStack Designate provider configuration to be set via arguments/env. variables\n##\ndesignate:\n  ## Use a custom CA (optional)\n  ##\n  customCA:\n    enabled: false\n    ## The content of the custom CA file\n    ##\n    content: \"\"\n    ## Location to mount custom CA\n    ##\n    mountPath: \"/config/designate\"\n    ## Custom CA filename\n    ##\n    filename: \"designate-ca.pem\"\n\n## DigitalOcean configuration to be set via arguments/env. variables\n##\ndigitalocean:\n  ## `DO_TOKEN` to set in the environment\n  ##\n  apiToken: \"\"\n\n## Google configuration to be set via arguments/env. variables\n##\ngoogle:\n  ## Google Project to use\n  ##\n  project: fuchicorp-project-256020\n  ## Google Application Credentials\n  ##\n  serviceAccountSecret: \"fuchicorp-service-account\"\n\n  # serviceAccountKey: \"fuchicorp-service-account.json\"\n\n## Infoblox configuration to be set via arguments/env. variables\n##\ninfoblox:\n  ## Required keys\n  ##\n  wapiUsername: \"admin\"\n  wapiPassword: \"\"\n  gridHost: \"\"\n  ## Optional keys\n  ##\n  domainFilter: \"\"\n  noSslVerify: false\n  wapiPort: \"\"\n  wapiVersion: \"\"\n  wapiConnectionPoolSize: \"\"\n  wapiHttpTimeout: \"\"\n\n## RFC 2136 configuration to be set via arguments/env. variables\n##\nrfc2136:\n  host: \"fuchicorp.com\"\n  port: 53\n  zone: \"fuchicorp\"\n  tsigSecret: \"\"\n  tsigSecretAlg: hmac-sha256\n  tsigKeyname: externaldns-key\n  tsigAxfr: true\n\n## PowerDNS configuration to be set via arguments/env. variables\n##\npdns:\n  apiUrl: \"\"\n  apiPort: \"8081\"\n  apiKey: \"\"\n\n## Limit possible target zones by domain suffixes (optional)\n##\ndomainFilters: []\n## Limit possible target zones by zone id (optional)\n##\nzoneIdFilters: []\n## Filter sources managed by external-dns via annotation using label selector semantics (optional)\n##\nannotationFilter: \"\"\n## When enabled, prints DNS record changes rather than actually performing them\n##\ndryRun: false\n## Adjust the interval for DNS updates\n##\ninterval: \"1m\"\n## Verbosity of the ExternalDNS logs. Available values are:\n## - panic, debug, info, warn, error, fatal\n##\nlogLevel: info\n## Modify how DNS records are sychronized between sources and providers (options: sync, upsert-only)\n##\npolicy: upsert-only\n## Registry Type. Available types are: txt, noop\n## ref: https://github.com/kubernetes-incubator/external-dns/blob/master/docs/proposal/registry.md\n##\nregistry: \"txt\"\n## TXT Registry Identifier\n##\ntxtOwnerId: \"\"\n## Prefix to create a TXT record with a name following the pattern prefix.\u003cCNAME record\u003e\n##\n# txtPrefix: \"\"\n## Load balancer service to be used; ie: custom-istio-namespace/custom-istio-ingressgateway.\n## Omit to use the default (istio-system/istio-ingressgateway)\n##\nistioIngressGateways: []\n\n## Extra Arguments to passed to external-dns\n##\nextraArgs: {}\n## Extra env. variable to set on external-dns container.\n##\n## extraEnv:\n## - name: VARNAME1\n##   value: value1\n## - name: VARNAME2\n##   valueFrom:\n##     secretKeyRef:\n##       name: existing-secret\n##       key: varname2-key\nextraEnv: []\n\n## Replica count\n##\nreplicas: 1\n\n## Affinity for pod assignment (this value is evaluated as a template)\n## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity\n##\naffinity: {}\n## Node labels for pod assignment (this value is evaluated as a template)\n## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector\n##\nnodeSelector: {}\n## Tolerations for pod assignment (this value is evaluated as a template)\n## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#taints-and-tolerations-beta-feature\n##\ntolerations: []\n## Annotations for external-dns pods\n##\npodAnnotations: {}\n## Additional labels for the pod(s).\n##\npodLabels: {}\n## Pod priority class name\n##\npriorityClassName: \"\"\n\n## Options for the source type \"crd\"\n##\ncrd:\n  ## Install and use the integrated DNSEndpoint CRD\n  create: false\n  ## Change these to use an external DNSEndpoint CRD (E.g. from kubefed)\n  apiversion: \"\"\n  kind: \"\"\n\n## Kubernetes svc configutarion\n##\nservice:\n  ## Kubernetes svc type\n  ##\n  type: ClusterIP\n  port: 7979\n  ## Specify the nodePort value for the LoadBalancer and NodePort service types for the client port\n  ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport\n  ##\n  # nodePort:\n  ## Static clusterIP or None for headless services\n  ##\n  # clusterIP: \"\"\n  ## External IP list to use with ClusterIP service type\n  ##\n  externalIPs: []\n  ## Use loadBalancerIP to request a specific static IP,\n  ## otherwise leave blank\n  ##\n  # loadBalancerIP:\n  ## Address that are allowed when svc is LoadBalancer\n  ##\n  loadBalancerSourceRanges: []\n  ## Provide any additional annotations which may be required. This can be used to\n  ## set the LoadBalancer service type to internal only.\n  ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer\n  ##\n  annotations: {}\n\n## RBAC parameteres\n## https://kubernetes.io/docs/reference/access-authn-authz/rbac/\n##\nrbac:\n  create: true\n  ## Service Account for pods\n  ## https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/\n  ##\n  serviceAccountName: external-dns-service-account\n  ## Annotations for the Service Account\n  ##\n  serviceAccountAnnotations: {}\n  ## RBAC API version\n  ##\n  apiVersion: v1beta1\n  ## Podsecuritypolicy\n  ##\n  pspEnabled: false\n\n## Kubernetes Security Context\n## https://kubernetes.io/docs/tasks/configure-pod-container/security-context/\n##\nsecurityContext: {}\n  # allowPrivilegeEscalation: false\n  # readOnlyRootFilesystem: true\n  # capabilities:\n  #   drop: [\"ALL\"]\npodSecurityContext:\n  fsGroup: 1001\n  runAsUser: 1001\n  # runAsNonRoot: true\n\n## Configure resource requests and limits\n## ref: http://kubernetes.io/docs/user-guide/compute-resources/\n##\nresources: {}\n#  limits:\n#    cpu: 50m\n#    memory: 50Mi\n#  requests:\n#    memory: 50Mi\n#    cpu: 10m\n\n## Liveness Probe. The block is directly forwarded into the deployment, so you can use whatever livenessProbe configuration you want.\n## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/\n##\nlivenessProbe:\n  httpGet:\n    path: /healthz\n    port: http\n  initialDelaySeconds: 10\n  periodSeconds: 10\n  timeoutSeconds: 5\n  failureThreshold: 2\n  successThreshold: 1\n## Readiness Probe. The block is directly forwarded into the deployment, so you can use whatever readinessProbe configuration you want.\n## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/\n##\nreadinessProbe:\n  httpGet:\n    path: /healthz\n    port: http\n  initialDelaySeconds: 5\n  periodSeconds: 10\n  timeoutSeconds: 5\n  failureThreshold: 6\n  successThreshold: 1\n\n## Prometheus Exporter / Metrics\n##\nmetrics:\n  enabled: false\n  ## Metrics exporter pod Annotation and Labels\n  ##\n",
                            "template": "## Global Docker image parameters\n## Please, note that this will override the image parameters, including dependencies, configured to use the global value\n## Current available global Docker image parameters: imageRegistry and imagePullSecrets\n##\n# global:\n#   imageRegistry: myRegistryName\n#   imagePullSecrets:\n#     - myRegistryKeySecretName\n\n## Bitnami external-dns image version\n## ref: https://hub.docker.com/r/bitnami/external-dns/tags/\n##\nimage:\n  registry: docker.io\n  repository: bitnami/external-dns\n  tag: 0.5.17-r16\n  ## Specify a imagePullPolicy\n  ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'\n  ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images\n  ##\n  pullPolicy: IfNotPresent\n  ## Optionally specify an array of imagePullSecrets.\n  ## Secrets must be manually created in the namespace.\n  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/\n  ##\n  # pullSecrets:\n  #   - myRegistryKeySecretName\n\n## String to partially override external-dns.fullname template (will maintain the release name)\n# nameOverride:\n\n## String to fully override external-dns.fullname template\n# fullnameOverride:\n\n## K8s resources type to be observed for new DNS entries by ExternalDNS\n##\nsources:\n- ingress\n# - service\n# - crd\n\n## DNS provider where the DNS records will be created. Available providers are:\n## - aws, azure, cloudflare, coredns, designate, digitalocoean, google, infoblox, rfc2136\n##\nprovider: google\n\n## Whether to publish DNS records for ClusterIP services or not (optional)\n##\npublishInternalServices: true\n\n## AWS configuration to be set via arguments/env. variables\n##\naws:\n  ## AWS credentials\n  ##\n  credentials:\n    secretKey: \"\"\n    accessKey: \"\"\n    ## pre external-dns 0.5.9 home dir should be `/root/.aws`\n    ##\n    mountPath: \"/.aws\"\n  ## AWS region\n  ##\n  region: \"us-east-1\"\n  ## Zone Filter. Available values are: public, private\n  ##\n  zoneType: \"\"\n  ## AWS Role to assume\n  ##\n  assumeRoleArn: \"\"\n  ## Maximum number of changes that will be applied in each batch\n  ##\n  batchChangeSize: 1000\n  ## AWS Zone tags\n  ##\n  zoneTags: []\n\n## Azure configuration to be set via arguments/env. variables\n##\nazure:\n  ## When a secret to load azure.json is not specified,\n  ## the host's /etc/kubernetes/azure.json will be used\n  ##\n  secretName: \"\"\n  ## Azure resource group to use\n  ##\n  resourceGroup: \"\"\n\n## Cloudflare configuration to be set via arguments/env. variables\n##\ncloudflare:\n  ## `CF_API_KEY` to set in the environment\n  ##\n  apiKey: \"\"\n  ## `CF_API_EMAIL` to set in the environment\n  ##\n  email: \"\"\n  ## Enable the proxy feature of Cloudflare\n  ##\n  proxied: true\n\n## CoreDNS configuration to be set via arguments/env variables\n##\ncoredns:\n  ## Comma-separated list of the etcd endpoints\n  ## Secure (https) endpoints can be used as well, in that case `etcdTLS` section\n  ## should be filled in accordingly\n  ##\n  etcdEndpoints: \"http://etcd-extdns:2379\"\n  ## Configuration of the secure communication and client authentication to the etcd cluster\n  ## If enabled all the values under this key must hold a valid data\n  ##\n  etcdTLS:\n    ## Enable or disable secure communication and client authentication to the etcd cluster\n    ##\n    enabled: false\n    ## Name of the existing secret containing cert files for client communication\n    ## ref: https://github.com/etcd-io/etcd/blob/master/Documentation/op-guide/security.md\n    ## ref (secret creation):\n    ##  https://github.com/bitnami/charts/tree/master/bitnami/etcd#configure-certificates-for-client-communication\n    ##\n    secretName: \"etcd-client-certs\"\n    ## Location of the mounted certificates inside external-dns pod\n    ##\n    mountPath: \"/etc/coredns/tls/etcd\"\n    ## CA PEM file used to sign etcd TLS cert, should exist in the secret provided above\n    ##\n    caFilename: \"ca.crt\"\n    ## Certificate PEM file, should exist in the secret provided above\n    ## Will be used by external-dns to authenticate against etcd\n    ##\n    certFilename: \"cert.pem\"\n    ## Private key PEM file, should exist in the secret provided above\n    ## Will be used by external-dns to authenticate against etcd\n    ##\n    keyFilename: \"key.pem\"\n\n## OpenStack Designate provider configuration to be set via arguments/env. variables\n##\ndesignate:\n  ## Use a custom CA (optional)\n  ##\n  customCA:\n    enabled: false\n    ## The content of the custom CA file\n    ##\n    content: \"\"\n    ## Location to mount custom CA\n    ##\n    mountPath: \"/config/designate\"\n    ## Custom CA filename\n    ##\n    filename: \"designate-ca.pem\"\n\n## DigitalOcean configuration to be set via arguments/env. variables\n##\ndigitalocean:\n  ## `DO_TOKEN` to set in the environment\n  ##\n  apiToken: \"\"\n\n## Google configuration to be set via arguments/env. variables\n##\ngoogle:\n  ## Google Project to use\n  ##\n  project: ${google_project}\n  ## Google Application Credentials\n  ##\n  serviceAccountSecret: \"fuchicorp-service-account\"\n\n  # serviceAccountKey: \"fuchicorp-service-account.json\"\n\n## Infoblox configuration to be set via arguments/env. variables\n##\ninfoblox:\n  ## Required keys\n  ##\n  wapiUsername: \"admin\"\n  wapiPassword: \"\"\n  gridHost: \"\"\n  ## Optional keys\n  ##\n  domainFilter: \"\"\n  noSslVerify: false\n  wapiPort: \"\"\n  wapiVersion: \"\"\n  wapiConnectionPoolSize: \"\"\n  wapiHttpTimeout: \"\"\n\n## RFC 2136 configuration to be set via arguments/env. variables\n##\nrfc2136:\n  host: \"fuchicorp.com\"\n  port: 53\n  zone: \"fuchicorp\"\n  tsigSecret: \"\"\n  tsigSecretAlg: hmac-sha256\n  tsigKeyname: externaldns-key\n  tsigAxfr: true\n\n## PowerDNS configuration to be set via arguments/env. variables\n##\npdns:\n  apiUrl: \"\"\n  apiPort: \"8081\"\n  apiKey: \"\"\n\n## Limit possible target zones by domain suffixes (optional)\n##\ndomainFilters: []\n## Limit possible target zones by zone id (optional)\n##\nzoneIdFilters: []\n## Filter sources managed by external-dns via annotation using label selector semantics (optional)\n##\nannotationFilter: \"\"\n## When enabled, prints DNS record changes rather than actually performing them\n##\ndryRun: false\n## Adjust the interval for DNS updates\n##\ninterval: \"1m\"\n## Verbosity of the ExternalDNS logs. Available values are:\n## - panic, debug, info, warn, error, fatal\n##\nlogLevel: info\n## Modify how DNS records are sychronized between sources and providers (options: sync, upsert-only)\n##\npolicy: upsert-only\n## Registry Type. Available types are: txt, noop\n## ref: https://github.com/kubernetes-incubator/external-dns/blob/master/docs/proposal/registry.md\n##\nregistry: \"txt\"\n## TXT Registry Identifier\n##\ntxtOwnerId: \"\"\n## Prefix to create a TXT record with a name following the pattern prefix.\u003cCNAME record\u003e\n##\n# txtPrefix: \"\"\n## Load balancer service to be used; ie: custom-istio-namespace/custom-istio-ingressgateway.\n## Omit to use the default (istio-system/istio-ingressgateway)\n##\nistioIngressGateways: []\n\n## Extra Arguments to passed to external-dns\n##\nextraArgs: {}\n## Extra env. variable to set on external-dns container.\n##\n## extraEnv:\n## - name: VARNAME1\n##   value: value1\n## - name: VARNAME2\n##   valueFrom:\n##     secretKeyRef:\n##       name: existing-secret\n##       key: varname2-key\nextraEnv: []\n\n## Replica count\n##\nreplicas: 1\n\n## Affinity for pod assignment (this value is evaluated as a template)\n## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity\n##\naffinity: {}\n## Node labels for pod assignment (this value is evaluated as a template)\n## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector\n##\nnodeSelector: {}\n## Tolerations for pod assignment (this value is evaluated as a template)\n## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#taints-and-tolerations-beta-feature\n##\ntolerations: []\n## Annotations for external-dns pods\n##\npodAnnotations: {}\n## Additional labels for the pod(s).\n##\npodLabels: {}\n## Pod priority class name\n##\npriorityClassName: \"\"\n\n## Options for the source type \"crd\"\n##\ncrd:\n  ## Install and use the integrated DNSEndpoint CRD\n  create: false\n  ## Change these to use an external DNSEndpoint CRD (E.g. from kubefed)\n  apiversion: \"\"\n  kind: \"\"\n\n## Kubernetes svc configutarion\n##\nservice:\n  ## Kubernetes svc type\n  ##\n  type: ClusterIP\n  port: 7979\n  ## Specify the nodePort value for the LoadBalancer and NodePort service types for the client port\n  ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport\n  ##\n  # nodePort:\n  ## Static clusterIP or None for headless services\n  ##\n  # clusterIP: \"\"\n  ## External IP list to use with ClusterIP service type\n  ##\n  externalIPs: []\n  ## Use loadBalancerIP to request a specific static IP,\n  ## otherwise leave blank\n  ##\n  # loadBalancerIP:\n  ## Address that are allowed when svc is LoadBalancer\n  ##\n  loadBalancerSourceRanges: []\n  ## Provide any additional annotations which may be required. This can be used to\n  ## set the LoadBalancer service type to internal only.\n  ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer\n  ##\n  annotations: {}\n\n## RBAC parameteres\n## https://kubernetes.io/docs/reference/access-authn-authz/rbac/\n##\nrbac:\n  create: true\n  ## Service Account for pods\n  ## https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/\n  ##\n  serviceAccountName: external-dns-service-account\n  ## Annotations for the Service Account\n  ##\n  serviceAccountAnnotations: {}\n  ## RBAC API version\n  ##\n  apiVersion: v1beta1\n  ## Podsecuritypolicy\n  ##\n  pspEnabled: false\n\n## Kubernetes Security Context\n## https://kubernetes.io/docs/tasks/configure-pod-container/security-context/\n##\nsecurityContext: {}\n  # allowPrivilegeEscalation: false\n  # readOnlyRootFilesystem: true\n  # capabilities:\n  #   drop: [\"ALL\"]\npodSecurityContext:\n  fsGroup: 1001\n  runAsUser: 1001\n  # runAsNonRoot: true\n\n## Configure resource requests and limits\n## ref: http://kubernetes.io/docs/user-guide/compute-resources/\n##\nresources: {}\n#  limits:\n#    cpu: 50m\n#    memory: 50Mi\n#  requests:\n#    memory: 50Mi\n#    cpu: 10m\n\n## Liveness Probe. The block is directly forwarded into the deployment, so you can use whatever livenessProbe configuration you want.\n## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/\n##\nlivenessProbe:\n  httpGet:\n    path: /healthz\n    port: http\n  initialDelaySeconds: 10\n  periodSeconds: 10\n  timeoutSeconds: 5\n  failureThreshold: 2\n  successThreshold: 1\n## Readiness Probe. The block is directly forwarded into the deployment, so you can use whatever readinessProbe configuration you want.\n## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/\n##\nreadinessProbe:\n  httpGet:\n    path: /healthz\n    port: http\n  initialDelaySeconds: 5\n  periodSeconds: 10\n  timeoutSeconds: 5\n  failureThreshold: 6\n  successThreshold: 1\n\n## Prometheus Exporter / Metrics\n##\nmetrics:\n  enabled: false\n  ## Metrics exporter pod Annotation and Labels\n  ##\n",
                            "vars.%": "2",
                            "vars.cluster_sub_domain": "fuchicorp.com",
                            "vars.google_project": "fuchicorp-project-256020"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template"
                },
                "data.template_file.ingress_controller_values": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "b7bd464d3e10788d017c6689174db097067ec7d063f6a4961f1850662d51b01b",
                        "attributes": {
                            "id": "b7bd464d3e10788d017c6689174db097067ec7d063f6a4961f1850662d51b01b",
                            "rendered": "## nginx configuration\n## Ref: https://github.com/kubernetes/ingress/blob/master/controllers/nginx/configuration.md\n##\ncontroller:\n  name: controller\n  image:\n    repository: quay.io/kubernetes-ingress-controller/nginx-ingress-controller\n    tag: \"0.26.1\"\n    pullPolicy: IfNotPresent\n    # www-data -\u003e uid 33\n    runAsUser: 33\n    allowPrivilegeEscalation: true\n\n  # Can be changed to old api for compatibility reasons: extensions/v1beta1\n  apiVersion: apps/v1\n\n  # Configures the ports the nginx-controller listens on\n  containerPort:\n    http: 80\n    https: 443\n\n  # Will add custom configuration options to Nginx https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap/\n  config: {}\n    # use-proxy-protocol: \"true\"\n    # use-forwarded-headers: \"true\"\n    # forwarded-for-header: \"X-Forwarded-For\"\n    # compute-full-forwarded-for: \"true\"\n\n  # Will add custom headers before sending traffic to backends according to https://github.com/kubernetes/ingress-nginx/tree/master/docs/examples/customization/custom-headers\n  proxySetHeaders: {}\n\n  # Will add custom headers before sending response traffic to the client according to: https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap/#add-headers\n  addHeaders: {}\n\n  # Required for use with CNI based kubernetes installations (such as ones set up by kubeadm),\n  # since CNI and hostport don't mix yet. Can be deprecated once https://github.com/kubernetes/kubernetes/issues/23920\n  # is merged\n  hostNetwork: false\n\n  # Optionally change this to ClusterFirstWithHostNet in case you have 'hostNetwork: true'.\n  # By default, while using host network, name resolution uses the host's DNS. If you wish nginx-controller\n  # to keep resolving names inside the k8s network, use ClusterFirstWithHostNet.\n  dnsPolicy: ClusterFirst\n\n  # Bare-metal considerations via the host network https://kubernetes.github.io/ingress-nginx/deploy/baremetal/#via-the-host-network\n  # Ingress status was blank because there is no Service exposing the NGINX Ingress controller in a configuration using the host network, the default --publish-service flag used in standard cloud setups does not apply\n  reportNodeInternalIp: false\n\n  ## Use host ports 80 and 443\n  daemonset:\n    useHostPort: false\n\n    hostPorts:\n      http: 80\n      https: 443\n\n  ## Required only if defaultBackend.enabled = false\n  ## Must be \u003cnamespace\u003e/\u003cservice_name\u003e\n  ##\n  defaultBackendService: \"\"\n\n  ## Election ID to use for status update\n  ##\n  electionID: ingress-controller-leader\n\n  ## Name of the ingress class to route through this controller\n  ##\n  ingressClass: nginx\n\n  # labels to add to the pod container metadata\n  podLabels: {}\n  #  key: value\n\n  ## Security Context policies for controller pods\n  ## See https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster/ for\n  ## notes on enabling and using sysctls\n  ##\n  podSecurityContext: {}\n\n  ## Allows customization of the external service\n  ## the ingress will be bound to via DNS\n  publishService:\n    enabled: true\n    ## Allows overriding of the publish service to bind to\n    ## Must be \u003cnamespace\u003e/\u003cservice_name\u003e\n    ##\n    pathOverride: \"\"\n\n  ## Limit the scope of the controller\n  ##\n  scope:\n    enabled: false\n    namespace: \"\"   # defaults to .Release.Namespace\n\n  ## Allows customization of the configmap / nginx-configmap namespace\n  ##\n  configMapNamespace: \"\"   # defaults to .Release.Namespace\n\n  ## Allows customization of the tcp-services-configmap namespace\n  ##\n  tcp:\n    configMapNamespace: \"\"   # defaults to .Release.Namespace\n\n  ## Allows customization of the udp-services-configmap namespace\n  ##\n  udp:\n    configMapNamespace: \"\"   # defaults to .Release.Namespace\n\n  ## Additional command line arguments to pass to nginx-ingress-controller\n  ## E.g. to specify the default SSL certificate you can use\n  ## extraArgs:\n  ##   default-ssl-certificate: \"\u003cnamespace\u003e/\u003csecret_name\u003e\"\n  extraArgs: {}\n\n  ## Additional environment variables to set\n  extraEnvs: []\n  # extraEnvs:\n  #   - name: FOO\n  #     valueFrom:\n  #       secretKeyRef:\n  #         key: FOO\n  #         name: secret-resource\n\n  ## DaemonSet or Deployment\n  ##\n  kind: Deployment\n\n  # The update strategy to apply to the Deployment or DaemonSet\n  ##\n  updateStrategy: {}\n  #  rollingUpdate:\n  #    maxUnavailable: 1\n  #  type: RollingUpdate\n\n  # minReadySeconds to avoid killing pods before we are ready\n  ##\n  minReadySeconds: 0\n\n\n  ## Node tolerations for server scheduling to nodes with taints\n  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\n  ##\n  tolerations: []\n  #  - key: \"key\"\n  #    operator: \"Equal|Exists\"\n  #    value: \"value\"\n  #    effect: \"NoSchedule|PreferNoSchedule|NoExecute(1.6 only)\"\n\n  ## Affinity and anti-affinity\n  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity\n  ##\n  affinity: {}\n    # # An example of preferred pod anti-affinity, weight is in the range 1-100\n    # podAntiAffinity:\n    #   preferredDuringSchedulingIgnoredDuringExecution:\n    #   - weight: 100\n    #     podAffinityTerm:\n    #       labelSelector:\n    #         matchExpressions:\n    #         - key: app\n    #           operator: In\n    #           values:\n    #           - nginx-ingress\n    #       topologyKey: kubernetes.io/hostname\n\n    # # An example of required pod anti-affinity\n    # podAntiAffinity:\n    #   requiredDuringSchedulingIgnoredDuringExecution:\n    #   - labelSelector:\n    #       matchExpressions:\n    #       - key: app\n    #         operator: In\n    #         values:\n    #         - nginx-ingress\n    #     topologyKey: \"kubernetes.io/hostname\"\n\n  ## terminationGracePeriodSeconds\n  ##\n  terminationGracePeriodSeconds: 60\n\n  ## Node labels for controller pod assignment\n  ## Ref: https://kubernetes.io/docs/user-guide/node-selection/\n  ##\n  nodeSelector: {}\n\n  ## Liveness and readiness probe values\n  ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes\n  ##\n  livenessProbe:\n    failureThreshold: 3\n    initialDelaySeconds: 10\n    periodSeconds: 10\n    successThreshold: 1\n    timeoutSeconds: 1\n    port: 10254\n  readinessProbe:\n    failureThreshold: 3\n    initialDelaySeconds: 10\n    periodSeconds: 10\n    successThreshold: 1\n    timeoutSeconds: 1\n    port: 10254\n\n  ## Annotations to be added to controller pods\n  ##\n  podAnnotations: {}\n\n  replicaCount: 1\n\n  minAvailable: 1\n\n  resources: {}\n  #  limits:\n  #    cpu: 100m\n  #    memory: 64Mi\n  #  requests:\n  #    cpu: 100m\n  #    memory: 64Mi\n\n  autoscaling:\n    enabled: false\n    minReplicas: 1\n    maxReplicas: 11\n    targetCPUUtilizationPercentage: 50\n    targetMemoryUtilizationPercentage: 50\n\n  ## Override NGINX template\n  customTemplate:\n    configMapName: \"\"\n    configMapKey: \"\"\n\n  service:\n    enabled: true\n\n    annotations: {}\n    labels: {}\n    omitClusterIP: false\n    clusterIP: \"\"\n\n    ## List of IP addresses at which the controller services are available\n    ## Ref: https://kubernetes.io/docs/user-guide/services/#external-ips\n    ##\n    externalIPs: []\n\n    loadBalancerIP: \"\"\n    loadBalancerSourceRanges: []\n\n    enableHttp: true\n    enableHttps: true\n\n    ## Set external traffic policy to: \"Local\" to preserve source IP on\n    ## providers supporting it\n    ## Ref: https://kubernetes.io/docs/tutorials/services/source-ip/#source-ip-for-services-with-typeloadbalancer\n    externalTrafficPolicy: Local\n\n    healthCheckNodePort: 0\n\n    ports:\n      http: 80\n      https: 443\n\n    targetPorts:\n      http: http\n      https: https\n\n    type: LoadBalancer\n\n    # type: NodePort\n    # nodePorts:\n    #   http: 32080\n    #   https: 32443\n    #   tcp:\n    #     8080: 32808\n    nodePorts:\n      http: \"\"\n      https: \"\"\n      tcp: {}\n      udp: {}\n\n  extraContainers: []\n  ## Additional containers to be added to the controller pod.\n  ## See https://github.com/lemonldap-ng-controller/lemonldap-ng-controller as example.\n  #  - name: my-sidecar\n  #    image: nginx:latest\n  #  - name: lemonldap-ng-controller\n  #    image: lemonldapng/lemonldap-ng-controller:0.2.0\n  #    args:\n  #      - /lemonldap-ng-controller\n  #      - --alsologtostderr\n  #      - --configmap=$(POD_NAMESPACE)/lemonldap-ng-configuration\n  #    env:\n  #      - name: POD_NAME\n  #        valueFrom:\n  #          fieldRef:\n  #            fieldPath: metadata.name\n  #      - name: POD_NAMESPACE\n  #        valueFrom:\n  #          fieldRef:\n  #            fieldPath: metadata.namespace\n  #    volumeMounts:\n  #    - name: copy-portal-skins\n  #      mountPath: /srv/var/lib/lemonldap-ng/portal/skins\n\n  extraVolumeMounts: []\n  ## Additional volumeMounts to the controller main container.\n  #  - name: copy-portal-skins\n  #   mountPath: /var/lib/lemonldap-ng/portal/skins\n\n  extraVolumes: []\n  ## Additional volumes to the controller pod.\n  #  - name: copy-portal-skins\n  #    emptyDir: {}\n\n  extraInitContainers: []\n  ## Containers, which are run before the app containers are started.\n  # - name: init-myservice\n  #   image: busybox\n  #   command: ['sh', '-c', 'until nslookup myservice; do echo waiting for myservice; sleep 2; done;']\n\n  admissionWebhooks:\n    enabled: false\n    failurePolicy: Fail\n    port: 8443\n\n    service:\n      annotations: {}\n      omitClusterIP: false\n      clusterIP: \"\"\n      externalIPs: []\n      loadBalancerIP: \"\"\n      loadBalancerSourceRanges: []\n      servicePort: 443\n      type: ClusterIP\n\n    patch:\n      enabled: true\n      image:\n        repository: jettech/kube-webhook-certgen\n        tag: v1.0.0\n        pullPolicy: IfNotPresent\n      ## Provide a priority class name to the webhook patching job\n      ##\n      priorityClassName: \"\"\n      podAnnotations: {}\n      nodeSelector: {}\n\n  metrics:\n    enabled: false\n\n    service:\n      annotations: {}\n      # prometheus.io/scrape: \"true\"\n      # prometheus.io/port: \"10254\"\n\n      omitClusterIP: false\n      clusterIP: \"\"\n\n      ## List of IP addresses at which the stats-exporter service is available\n      ## Ref: https://kubernetes.io/docs/user-guide/services/#external-ips\n      ##\n      externalIPs: []\n\n      loadBalancerIP: \"\"\n      loadBalancerSourceRanges: []\n      servicePort: 9913\n      type: ClusterIP\n\n    serviceMonitor:\n      enabled: false\n      additionalLabels: {}\n      namespace: \"\"\n      scrapeInterval: 30s\n      # honorLabels: true\n\n    prometheusRule:\n      enabled: false\n      additionalLabels: {}\n      namespace: \"\"\n      rules: []\n        # # These are just examples rules, please adapt them to your needs\n        # - alert: TooMany500s\n        #   expr: 100 * ( sum( nginx_ingress_controller_requests{status=~\"5.+\"} ) / sum(nginx_ingress_controller_requests) ) \u003e 5\n        #   for: 1m\n        #   labels:\n        #     severity: critical\n        #   annotations:\n        #     description: Too many 5XXs\n        #     summary: More than 5% of the all requests did return 5XX, this require your attention\n        # - alert: TooMany400s\n        #   expr: 100 * ( sum( nginx_ingress_controller_requests{status=~\"4.+\"} ) / sum(nginx_ingress_controller_requests) ) \u003e 5\n        #   for: 1m\n        #   labels:\n        #     severity: critical\n        #   annotations:\n        #     description: Too many 4XXs\n        #     summary: More than 5% of the all requests did return 4XX, this require your attention\n\n\n  lifecycle: {}\n\n  priorityClassName: \"\"\n\n## Rollback limit\n##\nrevisionHistoryLimit: 10\n\n## Default 404 backend\n##\ndefaultBackend:\n\n  ## If false, controller.defaultBackendService must be provided\n  ##\n  enabled: true\n\n  # Can be changed to old api for compatibility reasons: extensions/v1beta1\n  apiVersion: apps/v1\n\n  name: default-backend\n  image:\n    repository: k8s.gcr.io/defaultbackend-amd64\n    tag: \"1.5\"\n    pullPolicy: IfNotPresent\n    # nobody user -\u003e uid 65534\n    runAsUser: 65534\n\n  extraArgs: {}\n\n  serviceAccount:\n    create: true\n    name:\n  ## Additional environment variables to set for defaultBackend pods\n  extraEnvs: []\n\n  port: 8080\n\n  ## Readiness and liveness probes for default backend\n  ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/\n  ##\n  livenessProbe:\n    failureThreshold: 3\n    initialDelaySeconds: 30\n    periodSeconds: 10\n    successThreshold: 1\n    timeoutSeconds: 5\n  readinessProbe:\n    failureThreshold: 6\n    initialDelaySeconds: 0\n    periodSeconds: 5\n    successThreshold: 1\n    timeoutSeconds: 5\n\n  ## Node tolerations for server scheduling to nodes with taints\n  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\n  ##\n  tolerations: []\n  #  - key: \"key\"\n  #    operator: \"Equal|Exists\"\n  #    value: \"value\"\n  #    effect: \"NoSchedule|PreferNoSchedule|NoExecute(1.6 only)\"\n\n  affinity: {}\n\n  ## Security Context policies for controller pods\n  ## See https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster/ for\n  ## notes on enabling and using sysctls\n  ##\n  podSecurityContext: {}\n\n  # labels to add to the pod container metadata\n  podLabels: {}\n  #  key: value\n\n  ## Node labels for default backend pod assignment\n  ## Ref: https://kubernetes.io/docs/user-guide/node-selection/\n  ##\n  nodeSelector: {}\n\n  ## Annotations to be added to default backend pods\n  ##\n  podAnnotations: {}\n\n  replicaCount: 1\n\n  minAvailable: 1\n\n  resources: {}\n  # limits:\n  #   cpu: 10m\n  #   memory: 20Mi\n  # requests:\n  #   cpu: 10m\n  #   memory: 20Mi\n\n  service:\n    annotations: {}\n    omitClusterIP: false\n    clusterIP: \"\"\n\n    ## List of IP addresses at which the default backend service is available\n    ## Ref: https://kubernetes.io/docs/user-guide/services/#external-ips\n    ##\n    externalIPs: []\n\n    loadBalancerIP: \"\"\n    loadBalancerSourceRanges: []\n    servicePort: 80\n    type: ClusterIP\n\n  priorityClassName: \"\"\n\n## Enable RBAC as per https://github.com/kubernetes/ingress/tree/master/examples/rbac/nginx and https://github.com/kubernetes/ingress/issues/266\nrbac:\n  create: true\n\n# If true, create \u0026 use Pod Security Policy resources\n# https://kubernetes.io/docs/concepts/policy/pod-security-policy/\npodSecurityPolicy:\n  enabled: false\n\nserviceAccount:\n  create: true\n  name:\n\n## Optional array of imagePullSecrets containing private registry credentials\n## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/\nimagePullSecrets: []\n# - name: secretName\n\n# TCP service key:value pairs\n# Ref: https://github.com/kubernetes/contrib/tree/master/ingress/controllers/nginx/examples/tcp\n##\ntcp: {}\n#  8080: \"default/example-tcp-svc:9000\"\n\n# UDP service key:value pairs\n# Ref: https://github.com/kubernetes/contrib/tree/master/ingress/controllers/nginx/examples/udp\n##\nudp: {}\n#  53: \"kube-system/kube-dns:53\"\n",
                            "template": "## nginx configuration\n## Ref: https://github.com/kubernetes/ingress/blob/master/controllers/nginx/configuration.md\n##\ncontroller:\n  name: controller\n  image:\n    repository: quay.io/kubernetes-ingress-controller/nginx-ingress-controller\n    tag: \"0.26.1\"\n    pullPolicy: IfNotPresent\n    # www-data -\u003e uid 33\n    runAsUser: 33\n    allowPrivilegeEscalation: true\n\n  # Can be changed to old api for compatibility reasons: extensions/v1beta1\n  apiVersion: apps/v1\n\n  # Configures the ports the nginx-controller listens on\n  containerPort:\n    http: 80\n    https: 443\n\n  # Will add custom configuration options to Nginx https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap/\n  config: {}\n    # use-proxy-protocol: \"true\"\n    # use-forwarded-headers: \"true\"\n    # forwarded-for-header: \"X-Forwarded-For\"\n    # compute-full-forwarded-for: \"true\"\n\n  # Will add custom headers before sending traffic to backends according to https://github.com/kubernetes/ingress-nginx/tree/master/docs/examples/customization/custom-headers\n  proxySetHeaders: {}\n\n  # Will add custom headers before sending response traffic to the client according to: https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap/#add-headers\n  addHeaders: {}\n\n  # Required for use with CNI based kubernetes installations (such as ones set up by kubeadm),\n  # since CNI and hostport don't mix yet. Can be deprecated once https://github.com/kubernetes/kubernetes/issues/23920\n  # is merged\n  hostNetwork: false\n\n  # Optionally change this to ClusterFirstWithHostNet in case you have 'hostNetwork: true'.\n  # By default, while using host network, name resolution uses the host's DNS. If you wish nginx-controller\n  # to keep resolving names inside the k8s network, use ClusterFirstWithHostNet.\n  dnsPolicy: ClusterFirst\n\n  # Bare-metal considerations via the host network https://kubernetes.github.io/ingress-nginx/deploy/baremetal/#via-the-host-network\n  # Ingress status was blank because there is no Service exposing the NGINX Ingress controller in a configuration using the host network, the default --publish-service flag used in standard cloud setups does not apply\n  reportNodeInternalIp: false\n\n  ## Use host ports 80 and 443\n  daemonset:\n    useHostPort: false\n\n    hostPorts:\n      http: 80\n      https: 443\n\n  ## Required only if defaultBackend.enabled = false\n  ## Must be \u003cnamespace\u003e/\u003cservice_name\u003e\n  ##\n  defaultBackendService: \"\"\n\n  ## Election ID to use for status update\n  ##\n  electionID: ingress-controller-leader\n\n  ## Name of the ingress class to route through this controller\n  ##\n  ingressClass: nginx\n\n  # labels to add to the pod container metadata\n  podLabels: {}\n  #  key: value\n\n  ## Security Context policies for controller pods\n  ## See https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster/ for\n  ## notes on enabling and using sysctls\n  ##\n  podSecurityContext: {}\n\n  ## Allows customization of the external service\n  ## the ingress will be bound to via DNS\n  publishService:\n    enabled: true\n    ## Allows overriding of the publish service to bind to\n    ## Must be \u003cnamespace\u003e/\u003cservice_name\u003e\n    ##\n    pathOverride: \"\"\n\n  ## Limit the scope of the controller\n  ##\n  scope:\n    enabled: false\n    namespace: \"\"   # defaults to .Release.Namespace\n\n  ## Allows customization of the configmap / nginx-configmap namespace\n  ##\n  configMapNamespace: \"\"   # defaults to .Release.Namespace\n\n  ## Allows customization of the tcp-services-configmap namespace\n  ##\n  tcp:\n    configMapNamespace: \"\"   # defaults to .Release.Namespace\n\n  ## Allows customization of the udp-services-configmap namespace\n  ##\n  udp:\n    configMapNamespace: \"\"   # defaults to .Release.Namespace\n\n  ## Additional command line arguments to pass to nginx-ingress-controller\n  ## E.g. to specify the default SSL certificate you can use\n  ## extraArgs:\n  ##   default-ssl-certificate: \"\u003cnamespace\u003e/\u003csecret_name\u003e\"\n  extraArgs: {}\n\n  ## Additional environment variables to set\n  extraEnvs: []\n  # extraEnvs:\n  #   - name: FOO\n  #     valueFrom:\n  #       secretKeyRef:\n  #         key: FOO\n  #         name: secret-resource\n\n  ## DaemonSet or Deployment\n  ##\n  kind: Deployment\n\n  # The update strategy to apply to the Deployment or DaemonSet\n  ##\n  updateStrategy: {}\n  #  rollingUpdate:\n  #    maxUnavailable: 1\n  #  type: RollingUpdate\n\n  # minReadySeconds to avoid killing pods before we are ready\n  ##\n  minReadySeconds: 0\n\n\n  ## Node tolerations for server scheduling to nodes with taints\n  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\n  ##\n  tolerations: []\n  #  - key: \"key\"\n  #    operator: \"Equal|Exists\"\n  #    value: \"value\"\n  #    effect: \"NoSchedule|PreferNoSchedule|NoExecute(1.6 only)\"\n\n  ## Affinity and anti-affinity\n  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity\n  ##\n  affinity: {}\n    # # An example of preferred pod anti-affinity, weight is in the range 1-100\n    # podAntiAffinity:\n    #   preferredDuringSchedulingIgnoredDuringExecution:\n    #   - weight: 100\n    #     podAffinityTerm:\n    #       labelSelector:\n    #         matchExpressions:\n    #         - key: app\n    #           operator: In\n    #           values:\n    #           - nginx-ingress\n    #       topologyKey: kubernetes.io/hostname\n\n    # # An example of required pod anti-affinity\n    # podAntiAffinity:\n    #   requiredDuringSchedulingIgnoredDuringExecution:\n    #   - labelSelector:\n    #       matchExpressions:\n    #       - key: app\n    #         operator: In\n    #         values:\n    #         - nginx-ingress\n    #     topologyKey: \"kubernetes.io/hostname\"\n\n  ## terminationGracePeriodSeconds\n  ##\n  terminationGracePeriodSeconds: 60\n\n  ## Node labels for controller pod assignment\n  ## Ref: https://kubernetes.io/docs/user-guide/node-selection/\n  ##\n  nodeSelector: {}\n\n  ## Liveness and readiness probe values\n  ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes\n  ##\n  livenessProbe:\n    failureThreshold: 3\n    initialDelaySeconds: 10\n    periodSeconds: 10\n    successThreshold: 1\n    timeoutSeconds: 1\n    port: 10254\n  readinessProbe:\n    failureThreshold: 3\n    initialDelaySeconds: 10\n    periodSeconds: 10\n    successThreshold: 1\n    timeoutSeconds: 1\n    port: 10254\n\n  ## Annotations to be added to controller pods\n  ##\n  podAnnotations: {}\n\n  replicaCount: 1\n\n  minAvailable: 1\n\n  resources: {}\n  #  limits:\n  #    cpu: 100m\n  #    memory: 64Mi\n  #  requests:\n  #    cpu: 100m\n  #    memory: 64Mi\n\n  autoscaling:\n    enabled: false\n    minReplicas: 1\n    maxReplicas: 11\n    targetCPUUtilizationPercentage: 50\n    targetMemoryUtilizationPercentage: 50\n\n  ## Override NGINX template\n  customTemplate:\n    configMapName: \"\"\n    configMapKey: \"\"\n\n  service:\n    enabled: true\n\n    annotations: {}\n    labels: {}\n    omitClusterIP: false\n    clusterIP: \"\"\n\n    ## List of IP addresses at which the controller services are available\n    ## Ref: https://kubernetes.io/docs/user-guide/services/#external-ips\n    ##\n    externalIPs: []\n\n    loadBalancerIP: \"\"\n    loadBalancerSourceRanges: []\n\n    enableHttp: true\n    enableHttps: true\n\n    ## Set external traffic policy to: \"Local\" to preserve source IP on\n    ## providers supporting it\n    ## Ref: https://kubernetes.io/docs/tutorials/services/source-ip/#source-ip-for-services-with-typeloadbalancer\n    externalTrafficPolicy: Local\n\n    healthCheckNodePort: 0\n\n    ports:\n      http: 80\n      https: 443\n\n    targetPorts:\n      http: http\n      https: https\n\n    type: LoadBalancer\n\n    # type: NodePort\n    # nodePorts:\n    #   http: 32080\n    #   https: 32443\n    #   tcp:\n    #     8080: 32808\n    nodePorts:\n      http: \"\"\n      https: \"\"\n      tcp: {}\n      udp: {}\n\n  extraContainers: []\n  ## Additional containers to be added to the controller pod.\n  ## See https://github.com/lemonldap-ng-controller/lemonldap-ng-controller as example.\n  #  - name: my-sidecar\n  #    image: nginx:latest\n  #  - name: lemonldap-ng-controller\n  #    image: lemonldapng/lemonldap-ng-controller:0.2.0\n  #    args:\n  #      - /lemonldap-ng-controller\n  #      - --alsologtostderr\n  #      - --configmap=$(POD_NAMESPACE)/lemonldap-ng-configuration\n  #    env:\n  #      - name: POD_NAME\n  #        valueFrom:\n  #          fieldRef:\n  #            fieldPath: metadata.name\n  #      - name: POD_NAMESPACE\n  #        valueFrom:\n  #          fieldRef:\n  #            fieldPath: metadata.namespace\n  #    volumeMounts:\n  #    - name: copy-portal-skins\n  #      mountPath: /srv/var/lib/lemonldap-ng/portal/skins\n\n  extraVolumeMounts: []\n  ## Additional volumeMounts to the controller main container.\n  #  - name: copy-portal-skins\n  #   mountPath: /var/lib/lemonldap-ng/portal/skins\n\n  extraVolumes: []\n  ## Additional volumes to the controller pod.\n  #  - name: copy-portal-skins\n  #    emptyDir: {}\n\n  extraInitContainers: []\n  ## Containers, which are run before the app containers are started.\n  # - name: init-myservice\n  #   image: busybox\n  #   command: ['sh', '-c', 'until nslookup myservice; do echo waiting for myservice; sleep 2; done;']\n\n  admissionWebhooks:\n    enabled: false\n    failurePolicy: Fail\n    port: 8443\n\n    service:\n      annotations: {}\n      omitClusterIP: false\n      clusterIP: \"\"\n      externalIPs: []\n      loadBalancerIP: \"\"\n      loadBalancerSourceRanges: []\n      servicePort: 443\n      type: ClusterIP\n\n    patch:\n      enabled: true\n      image:\n        repository: jettech/kube-webhook-certgen\n        tag: v1.0.0\n        pullPolicy: IfNotPresent\n      ## Provide a priority class name to the webhook patching job\n      ##\n      priorityClassName: \"\"\n      podAnnotations: {}\n      nodeSelector: {}\n\n  metrics:\n    enabled: false\n\n    service:\n      annotations: {}\n      # prometheus.io/scrape: \"true\"\n      # prometheus.io/port: \"10254\"\n\n      omitClusterIP: false\n      clusterIP: \"\"\n\n      ## List of IP addresses at which the stats-exporter service is available\n      ## Ref: https://kubernetes.io/docs/user-guide/services/#external-ips\n      ##\n      externalIPs: []\n\n      loadBalancerIP: \"\"\n      loadBalancerSourceRanges: []\n      servicePort: 9913\n      type: ClusterIP\n\n    serviceMonitor:\n      enabled: false\n      additionalLabels: {}\n      namespace: \"\"\n      scrapeInterval: 30s\n      # honorLabels: true\n\n    prometheusRule:\n      enabled: false\n      additionalLabels: {}\n      namespace: \"\"\n      rules: []\n        # # These are just examples rules, please adapt them to your needs\n        # - alert: TooMany500s\n        #   expr: 100 * ( sum( nginx_ingress_controller_requests{status=~\"5.+\"} ) / sum(nginx_ingress_controller_requests) ) \u003e 5\n        #   for: 1m\n        #   labels:\n        #     severity: critical\n        #   annotations:\n        #     description: Too many 5XXs\n        #     summary: More than 5% of the all requests did return 5XX, this require your attention\n        # - alert: TooMany400s\n        #   expr: 100 * ( sum( nginx_ingress_controller_requests{status=~\"4.+\"} ) / sum(nginx_ingress_controller_requests) ) \u003e 5\n        #   for: 1m\n        #   labels:\n        #     severity: critical\n        #   annotations:\n        #     description: Too many 4XXs\n        #     summary: More than 5% of the all requests did return 4XX, this require your attention\n\n\n  lifecycle: {}\n\n  priorityClassName: \"\"\n\n## Rollback limit\n##\nrevisionHistoryLimit: 10\n\n## Default 404 backend\n##\ndefaultBackend:\n\n  ## If false, controller.defaultBackendService must be provided\n  ##\n  enabled: true\n\n  # Can be changed to old api for compatibility reasons: extensions/v1beta1\n  apiVersion: apps/v1\n\n  name: default-backend\n  image:\n    repository: k8s.gcr.io/defaultbackend-amd64\n    tag: \"1.5\"\n    pullPolicy: IfNotPresent\n    # nobody user -\u003e uid 65534\n    runAsUser: 65534\n\n  extraArgs: {}\n\n  serviceAccount:\n    create: true\n    name:\n  ## Additional environment variables to set for defaultBackend pods\n  extraEnvs: []\n\n  port: 8080\n\n  ## Readiness and liveness probes for default backend\n  ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/\n  ##\n  livenessProbe:\n    failureThreshold: 3\n    initialDelaySeconds: 30\n    periodSeconds: 10\n    successThreshold: 1\n    timeoutSeconds: 5\n  readinessProbe:\n    failureThreshold: 6\n    initialDelaySeconds: 0\n    periodSeconds: 5\n    successThreshold: 1\n    timeoutSeconds: 5\n\n  ## Node tolerations for server scheduling to nodes with taints\n  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\n  ##\n  tolerations: []\n  #  - key: \"key\"\n  #    operator: \"Equal|Exists\"\n  #    value: \"value\"\n  #    effect: \"NoSchedule|PreferNoSchedule|NoExecute(1.6 only)\"\n\n  affinity: {}\n\n  ## Security Context policies for controller pods\n  ## See https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster/ for\n  ## notes on enabling and using sysctls\n  ##\n  podSecurityContext: {}\n\n  # labels to add to the pod container metadata\n  podLabels: {}\n  #  key: value\n\n  ## Node labels for default backend pod assignment\n  ## Ref: https://kubernetes.io/docs/user-guide/node-selection/\n  ##\n  nodeSelector: {}\n\n  ## Annotations to be added to default backend pods\n  ##\n  podAnnotations: {}\n\n  replicaCount: 1\n\n  minAvailable: 1\n\n  resources: {}\n  # limits:\n  #   cpu: 10m\n  #   memory: 20Mi\n  # requests:\n  #   cpu: 10m\n  #   memory: 20Mi\n\n  service:\n    annotations: {}\n    omitClusterIP: false\n    clusterIP: \"\"\n\n    ## List of IP addresses at which the default backend service is available\n    ## Ref: https://kubernetes.io/docs/user-guide/services/#external-ips\n    ##\n    externalIPs: []\n\n    loadBalancerIP: \"\"\n    loadBalancerSourceRanges: []\n    servicePort: 80\n    type: ClusterIP\n\n  priorityClassName: \"\"\n\n## Enable RBAC as per https://github.com/kubernetes/ingress/tree/master/examples/rbac/nginx and https://github.com/kubernetes/ingress/issues/266\nrbac:\n  create: true\n\n# If true, create \u0026 use Pod Security Policy resources\n# https://kubernetes.io/docs/concepts/policy/pod-security-policy/\npodSecurityPolicy:\n  enabled: false\n\nserviceAccount:\n  create: true\n  name:\n\n## Optional array of imagePullSecrets containing private registry credentials\n## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/\nimagePullSecrets: []\n# - name: secretName\n\n# TCP service key:value pairs\n# Ref: https://github.com/kubernetes/contrib/tree/master/ingress/controllers/nginx/examples/tcp\n##\ntcp: {}\n#  8080: \"default/example-tcp-svc:9000\"\n\n# UDP service key:value pairs\n# Ref: https://github.com/kubernetes/contrib/tree/master/ingress/controllers/nginx/examples/udp\n##\nudp: {}\n#  53: \"kube-system/kube-dns:53\"\n",
                            "vars.%": "1",
                            "vars.cluster_sub_domain": "fuchicorp.com"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template"
                },
                "data.template_file.jenkins_values": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "c334e713acb2c3e605743696aa0caa9674f5d2028ef14f583ba16f2ffb512a14",
                        "attributes": {
                            "id": "c334e713acb2c3e605743696aa0caa9674f5d2028ef14f583ba16f2ffb512a14",
                            "rendered": "# Default values for jenkins.\n# This is a YAML-formatted file.\n# Declare name/value pairs to be passed into your templates.\n# name: value\n\n## Overrides for generated resource names\n# See templates/_helpers.tpl\n# nameOverride:\n# fullnameOverride:\n\n#Common\n\nCronSchedule: \"*/30 * * * *\"\n\nMaster:\n  Name: jenkins-master\n  Image: \"jenkins/jenkins\"\n  ImageTag: \"lts\"\n  ImagePullPolicy: \"Always\"\n# ImagePullSecret: jenkins\n  Component: \"jenkins-master\"\n  UseSecurity: true\n  AdminUser: 'admin'\n  AdminPassword: 'B1JsVZtr4rvJfmnnafqRjTEKLsT'\n  Cpu: \"1\"\n  Memory: \"1G\"\n  CpuLimit: \"2\"\n  MemoryLimit: \"2G\"\n  Affinity:\n    nodeAffinity:\n      preferredDuringSchedulingIgnoredDuringExecution:\n      - weight: 1\n        preference:\n          matchExpressions:\n          - key: jenkinsPreferred\n            operator: In\n            values:\n            - \"true\"\n\n  # Environment variables that get added to the init container (useful for e.g. http_proxy)\n  # InitContainerEnv:\n  #   - name: GIT_TOKEN\n  #     value: ad9015cdfda2935a25cae144d9bf1ede5b731196\n  ContainerEnv:\n    - name: GIT_TOKEN\n      value: ad9015cdfda2935a25cae144d9bf1ede5b731196\n\n    - name: JENKINS_GITHUB_AUTH_ID\n      value: 3595c43658d4c3417c95\n\n    - name: JENKINS_GITHUB_AUTH_SECRET\n      value: 06c9eed36e89369f860d0ac39aca64d6283ad74b\n\n  # Set min/max heap here if needed with:\n  JavaOpts: \"-Xms1g -Xmx1024m\"\n  # JenkinsOpts: \"\"\n  # JenkinsUriPrefix: \"/jenkins\"\n  # Set RunAsUser to 1000 to let Jenkins run as non-root user 'jenkins' which exists in 'jenkins/jenkins' docker image.\n  # When setting RunAsUser to a different value than 0 also set FsGroup to the same value:\n  # RunAsUser: \u003cdefaults to 0\u003e\n  # FsGroup: \u003cwill be omitted in deployment if RunAsUser is 0\u003e\n  ServicePort: 443\n  # For minikube, set this to NodePort, elsewhere use LoadBalancer\n  # Use ClusterIP if your setup includes ingress controller\n  ServiceType: ClusterIP\n  # Master Service annotations\n  ServiceAnnotations:\n    # service.beta.kubernetes.io/aws-load-balancer-backend-protocol: http\n    # nginx.ingress.kubernetes.io/secure-backends: \"true\"\n    # service.beta.kubernetes.io/aws-load-balancer-additional-resource-tags:\n    # service.beta.kubernetes.io/aws-load-balancer-backend-protocol: 'http'\n    # service.beta.kubernetes.io/aws-load-balancer-ssl-cert: '\\$\\{ssl_arn\\}'\n    # service.beta.kubernetes.io/aws-load-balancer-internal: '0.0.0.0/0'\n  #   service.beta.kubernetes.io/aws-load-balancer-backend-protocol: https\n  # Used to create Ingress record (should used with ServiceType: ClusterIP)\n  HostName: jenkins.fuchicorp.com\n  HostNameAlias: builder.fuchicorp.com\n  cluster_sub_domain: fuchicorp.com\n  # NodePort: \u003cto set explicitly, choose port between 30000-32767\n  ContainerPort: 8080\n  # Enable Kubernetes Liveness and Readiness Probes\n  HealthProbes: true\n  HealthProbesTimeout: 100\n  HealthProbeLivenessFailureThreshold: 12\n  SlaveListenerPort: 50000\n  DisabledAgentProtocols:\n    - JNLP-connect\n    - JNLP2-connect\n  CSRF:\n    DefaultCrumbIssuer:\n      Enabled: true\n      ProxyCompatability: true\n  CLI: true\n  # Kubernetes service type for the JNLP slave service\n  # SETTING THIS TO \"LoadBalancer\" IS A HUGE SECURITY RISK: https://github.com/kubernetes/charts/issues/1341\n  SlaveListenerServiceType: ClusterIP\n  SlaveListenerServiceAnnotations: {}\n  LoadBalancerSourceRanges:\n  - 0.0.0.0/0\n  # Optionally assign a known public LB IP\n  # LoadBalancerIP: 1.2.3.4\n  # Optionally configure a JMX port\n  # requires additional JavaOpts, ie\n  # JavaOpts: \u003e\n  #   -Dcom.sun.management.jmxremote.port=4000\n  #   -Dcom.sun.management.jmxremote.authenticate=false\n  #   -Dcom.sun.management.jmxremote.ssl=false\n  # JMXPort: 4000\n  # Jenkins Global Environment Variables to be created during Jenkins master initial setup\n\n  # GlobalEnvVariables:\n  #   - name: GIT_TOKEN\n  #     value: ad9015cdfda2935a25cae144d9bf1ede5b731196\n  #   - name: git_server_host\n  #     value: \"coderepository.mcd.com\"\n  #   - name: sonar_host_url\n  #     value: \"https://sonarqube.sharedtools.vet-tools.digitalecp.mcd.com\"\n  #\n  CustomConfigMap: false\n  # Node labels and tolerations for pod assignment\n  # ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector\n  # ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#taints-and-tolerations-beta-feature\n  NodeSelector: {}\n  Tolerations: {}\n  Ingress:\n    ApiVersion: extensions/v1beta1\n    Annotations:\n      kubernetes.io/ingress.class: nginx\n      certmanager.k8s.io/cluster-issuer: letsencrypt-fuchicorp-prod\n    # kubernetes.io/tls-acme: \"true\"\n    TLS:\n    - hosts:\n      - jenkins.fuchicorp.com\n      secretName: \"jenkins-letsencrypt-fuchicorp-prod\"\n  # List of plugins to be install during Jenkins master start\n  InstallPlugins:\n    - kubernetes:1.18.2\n    - workflow-job:2.33\n    - workflow-aggregator:2.6\n    - credentials-binding:1.19\n    - git:3.11.0\n    - docker-build-step:2.4\n    - oki-docki:1.1\n    - slack:2.34\n    - role-strategy:2.14\n    - github-oauth:0.33\n    - authorize-project:1.3.0\n  # Used to approve a list of groovy functions in pipelines used the script-security plugin. Can be viewed under /scriptApproval\n  ScriptApproval:\n    - \"method com.michelin.cio.hudson.plugins.rolestrategy.RoleBasedAuthorizationStrategy addRole\"\n    - \"method com.michelin.cio.hudson.plugins.rolestrategy.RoleBasedAuthorizationStrategy addRole java.lang.String com.michelin.cio.hudson.plugins.rolestrategy.Role\"\n    - \"method com.michelin.cio.hudson.plugins.rolestrategy.RoleBasedAuthorizationStrategy assignRole java.lang.String com.michelin.cio.hudson.plugins.rolestrategy.Role java.lang.String\"\n    - \"method hudson.model.Saveable save\"\n    - \"method java.lang.Class getConstructors\"\n    - \"method java.net.HttpURLConnection setRequestMethod java.lang.String\"\n    - \"method java.net.URL openConnection\"\n    - \"method java.net.URLConnection getInputStream\"\n    - \"method java.net.URLConnection setRequestProperty java.lang.String java.lang.String\"\n    - \"method jenkins.model.Jenkins getAuthorizationStrategy\"\n    - \"method jenkins.model.Jenkins getSecurityRealm\"\n    - \"method jenkins.model.Jenkins isQuietingDown\"\n    - \"method jenkins.model.Jenkins setAuthorizationStrategy hudson.security.AuthorizationStrategy\"\n    - \"method jenkins.model.Jenkins setSecurityRealm hudson.security.SecurityRealm\"\n    - \"method net.sf.json.JSONObject optString java.lang.String java.lang.String\"\n    - \"new com.michelin.cio.hudson.plugins.rolestrategy.RoleBasedAuthorizationStrategy\"\n    - \"new net.sf.json.JSONObject\"\n    - \"new org.jenkinsci.plugins.GithubSecurityRealm java.lang.String java.lang.String java.lang.String java.lang.String java.lang.String\"\n    - \"staticField com.michelin.cio.hudson.plugins.rolestrategy.RoleBasedAuthorizationStrategy PROJECT\"\n    - \"staticField org.jenkinsci.plugins.GithubSecurityRealm DEFAULT_API_URI\"\n    - \"staticField org.jenkinsci.plugins.GithubSecurityRealm DEFAULT_OAUTH_SCOPES\"\n    - \"staticField org.jenkinsci.plugins.GithubSecurityRealm DEFAULT_WEB_URI\"\n    - \"staticMethod hudson.model.Hudson getInstance\"\n    - \"staticMethod java.lang.System getenv\"\n    - \"staticMethod jenkins.model.Jenkins getInstance\"\n    - \"staticMethod org.codehaus.groovy.runtime.DefaultGroovyMethods getText java.io.InputStream\"\n    - \"method java.lang.reflect.AccessibleObject setAccessible boolean\"\n    - \"staticMethod java.lang.System getenv java.lang.String\"\n    - \"method java.lang.Class getDeclaredMethod java.lang.String java.lang.Class[]\"\n\n  # List of groovy init scripts to be executed during Jenkins master start\n  InitScripts:\n   - |\n      import jenkins.model.Jenkins\n      import hudson.security.SecurityRealm\n      import org.jenkinsci.plugins.GithubSecurityRealm\n      import jenkins.plugins.git.GitSCMSource\n      import jenkins.plugins.git.traits.BranchDiscoveryTrait\n      import org.jenkinsci.plugins.workflow.libs.GlobalLibraries\n      import org.jenkinsci.plugins.workflow.libs.LibraryConfiguration\n      import org.jenkinsci.plugins.workflow.libs.SCMSourceRetriever\n      import net.sf.json.JSONObject\n      import hudson.*\n      import hudson.security.*\n      import jenkins.model.*\n      import java.util.*\n      import com.michelin.cio.hudson.plugins.rolestrategy.*\n      import com.synopsys.arc.jenkins.plugins.rolestrategy.*\n      import java.lang.reflect.*\n      import java.util.logging.*\n      import groovy.json.*\n      import groovy.json.JsonSlurper\n      import jenkins.model.Jenkins\n\n      if(!binding.hasVariable('github_realm')) {\n         github_realm = [:]\n      }\n\n      if(!(github_realm instanceof Map)) {\n         throw new Exception('github_realm must be a Map.')\n      }\n\n      String git_hub_auth_id  = \"3595c43658d4c3417c95\"\n      String git_hub_auth_secret  = \"06c9eed36e89369f860d0ac39aca64d6283ad74b\"\n      gitToken                   = \"ad9015cdfda2935a25cae144d9bf1ede5b731196\"\n\n      // gitToken = System.getenv().get(\"GIT_TOKEN\")\n\n\n\n      /**\n        Function to compare if the two global shared libraries are equal.\n       */\n      boolean isLibrariesEqual(List lib1, List lib2) {\n          //compare returns true or false\n          lib1.size() == lib2.size() \u0026\u0026\n          !(\n              false in [lib1, lib2].transpose().collect { l1, l2 -\u003e\n                  def s1 = l1.retriever.scm\n                  def s2 = l2.retriever.scm\n                  l1.retriever.class == l2.retriever.class \u0026\u0026\n                  l1.name == l2.name \u0026\u0026\n                  l1.defaultVersion == l2.defaultVersion \u0026\u0026\n                  l1.implicit == l2.implicit \u0026\u0026\n                  l1.allowVersionOverride == l2.allowVersionOverride \u0026\u0026\n                  l1.includeInChangesets == l2.includeInChangesets \u0026\u0026\n                  s1.remote == s2.remote \u0026\u0026\n                  s1.credentialsId == s2.credentialsId \u0026\u0026\n                  s1.traits.size() == s2.traits.size() \u0026\u0026\n                  !(\n                      false in [s1.traits, s2.traits].transpose().collect { t1, t2 -\u003e\n                          t1.class == t2.class\n                      }\n                  )\n              }\n          )\n      }\n\n      pipeline_shared_libraries = [\n          'CommonLib': [\n              'defaultVersion': 'master',\n              'implicit': true,\n              'allowVersionOverride': true,\n              'includeInChangesets': false,\n              'scm': [\n                  'remote': 'https://github.com/fuchicorp/jenkins-global-library.git',\n                  'credentialsId': ''\n              ]\n          ]\n      ]\n\n\n      if(!binding.hasVariable('pipeline_shared_libraries')) {\n          pipeline_shared_libraries = [:]\n      }\n\n      if(!pipeline_shared_libraries in Map) {\n          throw new Exception(\"pipeline_shared_libraries must be an instance of Map but instead is instance of: \"+ pipeline_shared_libraries.getClass())\n      }\n\n      pipeline_shared_libraries = pipeline_shared_libraries as JSONObject\n\n      List libraries = [] as ArrayList\n      pipeline_shared_libraries.each { name, config -\u003e\n          if(name \u0026\u0026 config \u0026\u0026 config in Map \u0026\u0026 'scm' in config \u0026\u0026 config['scm'] in Map \u0026\u0026 'remote' in config['scm'] \u0026\u0026 config['scm'].optString('remote')) {\n              def scm = new GitSCMSource(config['scm'].optString('remote'))\n              scm.credentialsId = config['scm'].optString('credentialsId')\n              scm.traits = [new BranchDiscoveryTrait()]\n              def retriever = new SCMSourceRetriever(scm)\n              def library = new LibraryConfiguration(name, retriever)\n              library.defaultVersion = config.optString('defaultVersion')\n              library.implicit = config.optBoolean('implicit', false)\n              library.allowVersionOverride = config.optBoolean('allowVersionOverride', true)\n              library.includeInChangesets = config.optBoolean('includeInChangesets', true)\n              libraries \u003c\u003c library\n          }\n      }\n\n      def global_settings = Jenkins.instance.getExtensionList(GlobalLibraries.class)[0]\n\n      if(libraries \u0026\u0026 !isLibrariesEqual(global_settings.libraries, libraries)) {\n          global_settings.libraries = libraries\n          global_settings.save()\n          println 'Configured Pipeline Global Shared Libraries:\\n    ' + global_settings.libraries.collect { it.name }.join('\\n    ')\n      }\n      else {\n          if(pipeline_shared_libraries) {\n              println 'Nothing changed.  Pipeline Global Shared Libraries already configured.'\n          }\n          else {\n              println 'Nothing changed.  Skipped configuring Pipeline Global Shared Libraries because settings are empty.'\n          }\n      }\n\n\n      github_realm = github_realm as JSONObject\n\n      String githubWebUri = github_realm.optString('web_uri', GithubSecurityRealm.DEFAULT_WEB_URI)\n      String githubApiUri = github_realm.optString('api_uri', GithubSecurityRealm.DEFAULT_API_URI)\n      String oauthScopes = github_realm.optString('oauth_scopes', GithubSecurityRealm.DEFAULT_OAUTH_SCOPES)\n      String clientID = github_realm.optString('client_id', git_hub_auth_id)\n      String clientSecret = github_realm.optString('client_secret', git_hub_auth_secret)\n\n      if(!Jenkins.instance.isQuietingDown()) {\n         if(clientID \u0026\u0026 clientSecret) {\n             SecurityRealm github_realm = new GithubSecurityRealm(githubWebUri, githubApiUri, clientID, clientSecret, oauthScopes)\n             //check for equality, no need to modify the runtime if no settings changed\n             if(!github_realm.equals(Jenkins.instance.getSecurityRealm())) {\n                 Jenkins.instance.setSecurityRealm(github_realm)\n                 println 'Security realm configuration has changed.  Configured GitHub security realm.'\n             } else {\n                 println 'Nothing changed.  GitHub security realm already configured.'\n             }\n         }\n      } else {\n         println 'Shutdown mode enabled.  Configure GitHub security realm SKIPPED.'\n      }\n\n\n\n\n      def env = System.getenv()\n      jsonSlurper = new JsonSlurper()\n\n\n      def getTeamId(teamName) {\n        /*\n         Function to find teams ID\n        */\n        def organization = \"fuchicorp\"\n        def teamsUrl = \"https://api.github.com/orgs/\" + organization + \"/teams\"\n        def teamId = null\n\n        def get = new URL(teamsUrl).openConnection();\n            get.setRequestMethod(\"GET\")\n            get.setRequestProperty(\"Authorization\", \"token \" + gitToken)\n            get.setRequestProperty(\"Content-Type\", \"application/json\")\n\n        def data = jsonSlurper.parseText(get.getInputStream().getText())\n\n        data.each() {\n          if (it.name.toLowerCase() == teamName.toLowerCase()) {\n            teamId = it.id\n          }\n        }\n\n        return teamId\n      }\n\n\n      def getTeamMembers(teamName) {\n\n        /*\n        Function to find team members from github\n        */\n\n        def getTeamId = getTeamId(teamName)\n        def memberUrl = \"https://api.github.com/teams/\"+ getTeamId +\"/members\"\n        def get = new URL(memberUrl).openConnection();\n            get.setRequestMethod(\"GET\")\n            get.setRequestProperty(\"Authorization\", \"token \" + gitToken)\n            get.setRequestProperty(\"Content-Type\", \"application/json\")\n\n        def object = jsonSlurper.parseText(get.getInputStream().getText())\n        return object.login\n\n      }\n\n      def devopTeam = getTeamMembers(\"devops\")\n      def orgMembers = getTeamMembers(\"members\")\n\n      /**\n       *                Roles\n       */\n\n      def globalRoleRead = \"read\"\n      def globalBuildRole = \"build\"\n      def globalRoleAdmin = \"admin\"\n\n      /**\n       *           Users and Groups\n       */\n      def access = [\n        admins: devopTeam,// Using DevOps team from FuchiCorp organization\n        builders: [],\n        readers: orgMembers\n      ]\n\n\n      if (env.AUTHZ_JSON_FILE)  {\n        println \"Get role authorizations from file \" + env.AUTHZ_JSON_FILE\n        File f = new File(env.AUTHZ_JSON_FILE)\n        def jsonSlurper = new JsonSlurper()\n        def jsonText = f.getText()\n        access = jsonSlurper.parseText( jsonText )\n      }\n      else if (env.AUTH_JSON_URL) {\n        println \"Get role authorizations from URL \" + env.AUTHZ_JSON_URL\n        URL jsonUrl = new URL(env.AUTHZ_JSON_URL);\n        access = new JsonSlurper().parse(jsonUrl);\n      }\n      else {\n        println \"Warning! Neither env.AUTHZ_JSON_FILE nor env.AUTHZ_JSON_URL specified!\"\n        println \"Granting anonymous admin access\"\n      }\n\n      /**\n       * ===================================\n       *\n       *           Permissions\n       *\n       * ===================================\n       */\n\n      // TODO: drive these from a config file\n      def adminPermissions = [\n      \"hudson.model.Hudson.Administer\",\n      \"hudson.model.Hudson.Read\"\n      ]\n\n      def readPermissions = [\n      \"hudson.model.Hudson.Read\",\n      \"hudson.model.Item.Discover\",\n      \"hudson.model.Item.Read\"\n      ]\n\n      def buildPermissions = [\n      \"hudson.model.Hudson.Read\",\n      \"hudson.model.Item.Build\",\n      \"hudson.model.Item.Cancel\",\n      \"hudson.model.Item.Read\",\n      \"hudson.model.Run.Replay\"\n      ]\n\n      def roleBasedAuthenticationStrategy = new RoleBasedAuthorizationStrategy()\n      Jenkins.instance.setAuthorizationStrategy(roleBasedAuthenticationStrategy)\n\n      Constructor[] constrs = Role.class.getConstructors();\n      for (Constructor\u003c?\u003e c : constrs) {\n        c.setAccessible(true);\n      }\n\n      // Make the method assignRole accessible\n      Method assignRoleMethod = RoleBasedAuthorizationStrategy.class.getDeclaredMethod(\"assignRole\", RoleType.class, Role.class, String.class);\n      assignRoleMethod.setAccessible(true);\n      println(\"HACK! changing visibility of RoleBasedAuthorizationStrategy.assignRole\")\n\n      /**\n       *           Permissions\n       */\n\n      Set\u003cPermission\u003e adminPermissionSet = new HashSet\u003cPermission\u003e();\n      adminPermissions.each { p -\u003e\n        def permission = Permission.fromId(p);\n        if (permission != null) {\n          adminPermissionSet.add(permission);\n        } else {\n          println(p + \" is not a valid permission ID (ignoring)\")\n        }\n      }\n\n      Set\u003cPermission\u003e buildPermissionSet = new HashSet\u003cPermission\u003e();\n      buildPermissions.each { p -\u003e\n        def permission = Permission.fromId(p);\n        if (permission != null) {\n          buildPermissionSet.add(permission);\n        } else {\n          println(p + \" is not a valid permission ID (ignoring)\")\n        }\n      }\n\n      Set\u003cPermission\u003e readPermissionSet = new HashSet\u003cPermission\u003e();\n      readPermissions.each { p -\u003e\n        def permission = Permission.fromId(p);\n        if (permission != null) {\n          readPermissionSet.add(permission);\n        } else {\n          println(p + \" is not a valid permission ID (ignoring)\")\n        }\n      }\n\n      /**\n       *      Permissions -\u003e Roles\n       */\n\n      // admins\n      Role adminRole = new Role(globalRoleAdmin, adminPermissionSet);\n      roleBasedAuthenticationStrategy.addRole(RoleType.Global, adminRole);\n\n      // builders\n      Role buildersRole = new Role(globalBuildRole, buildPermissionSet);\n      roleBasedAuthenticationStrategy.addRole(RoleType.Global, buildersRole);\n\n      // anonymous read\n      Role readRole = new Role(globalRoleRead, readPermissionSet);\n      roleBasedAuthenticationStrategy.addRole(RoleType.Global, readRole);\n\n      /**\n       *      Roles -\u003e Groups/Users\n       */\n\n      access.admins.each { l -\u003e\n        println(\"Granting admin to \" + l)\n        roleBasedAuthenticationStrategy.assignRole(RoleType.Global, adminRole, l);\n      }\n\n      access.builders.each { l -\u003e\n        println(\"Granting builder to \" + l)\n        roleBasedAuthenticationStrategy.assignRole(RoleType.Global, buildersRole, l);\n      }\n\n      access.readers.each { l -\u003e\n        println(\"Granting read to \" + l)\n        roleBasedAuthenticationStrategy.assignRole(RoleType.Global, readRole, l);\n      }\n\n      Jenkins.instance.save()\n\n\n  # Kubernetes secret that contains a 'credentials.xml' for Jenkins\n  # CredentialsXmlSecret: jenkins-credentials\n  # Kubernetes secret that contains files to be put in the Jenkins 'secrets' directory,\n  # useful to manage encryption keys used for credentials.xml for instance (such as\n  # master.key and hudson.util.Secret)\n  # SecretsFilesSecret: jenkins-secrets\n  # Jenkins XML job configs to provision\n  Jobs: |-\n    academy-fuchicorp-build:\n     |\n      \u003corg.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject plugin=\"workflow-multibranch@2.21\"\u003e\n      \u003cscript type=\"text/javascript\" charset=\"utf-8\" id=\"zm-extension\"/\u003e\n      \u003cactions/\u003e\n      \u003cdescription/\u003e\n      \u003cproperties\u003e\n      \u003corg.jenkinsci.plugins.pipeline.modeldefinition.config.FolderConfig plugin=\"pipeline-model-definition@1.3.9\"\u003e\n      \u003cdockerLabel/\u003e\n      \u003cregistry plugin=\"docker-commons@1.15\"/\u003e\n      \u003c/org.jenkinsci.plugins.pipeline.modeldefinition.config.FolderConfig\u003e\n      \u003c/properties\u003e\n      \u003cfolderViews class=\"jenkins.branch.MultiBranchProjectViewHolder\" plugin=\"branch-api@2.5.4\"\u003e\n      \u003cowner class=\"org.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject\" reference=\"../..\"/\u003e\n      \u003c/folderViews\u003e\n      \u003chealthMetrics\u003e\n      \u003ccom.cloudbees.hudson.plugins.folder.health.WorstChildHealthMetric plugin=\"cloudbees-folder@6.9\"\u003e\n      \u003cnonRecursive\u003efalse\u003c/nonRecursive\u003e\n      \u003c/com.cloudbees.hudson.plugins.folder.health.WorstChildHealthMetric\u003e\n      \u003c/healthMetrics\u003e\n      \u003cicon class=\"jenkins.branch.MetadataActionFolderIcon\" plugin=\"branch-api@2.5.4\"\u003e\n      \u003cowner class=\"org.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject\" reference=\"../..\"/\u003e\n      \u003c/icon\u003e\n      \u003corphanedItemStrategy class=\"com.cloudbees.hudson.plugins.folder.computed.DefaultOrphanedItemStrategy\" plugin=\"cloudbees-folder@6.9\"\u003e\n      \u003cpruneDeadBranches\u003etrue\u003c/pruneDeadBranches\u003e\n      \u003cdaysToKeep\u003e-1\u003c/daysToKeep\u003e\n      \u003cnumToKeep\u003e-1\u003c/numToKeep\u003e\n      \u003c/orphanedItemStrategy\u003e\n      \u003ctriggers\u003e\n      \u003ccom.cloudbees.hudson.plugins.folder.computed.PeriodicFolderTrigger plugin=\"cloudbees-folder@6.9\"\u003e\n      \u003cspec\u003e* * * * *\u003c/spec\u003e\n      \u003cinterval\u003e120000\u003c/interval\u003e\n      \u003c/com.cloudbees.hudson.plugins.folder.computed.PeriodicFolderTrigger\u003e\n      \u003c/triggers\u003e\n      \u003cdisabled\u003efalse\u003c/disabled\u003e\n      \u003csources class=\"jenkins.branch.MultiBranchProject$BranchSourceList\" plugin=\"branch-api@2.5.4\"\u003e\n      \u003cdata\u003e\n      \u003cjenkins.branch.BranchSource\u003e\n      \u003csource class=\"jenkins.plugins.git.GitSCMSource\" plugin=\"git@3.11.0\"\u003e\n      \u003cid\u003e0a162395-4438-4b2e-8d7d-5e3b8f7d247c\u003c/id\u003e\n      \u003cremote\u003ehttps://github.com/fuchicorp/webplatform.git\u003c/remote\u003e\n      \u003ccredentialsId/\u003e\n      \u003ctraits\u003e\n      \u003cjenkins.plugins.git.traits.BranchDiscoveryTrait/\u003e\n      \u003c/traits\u003e\n      \u003c/source\u003e\n      \u003cstrategy class=\"jenkins.branch.DefaultBranchPropertyStrategy\"\u003e\n      \u003cproperties class=\"empty-list\"/\u003e\n      \u003c/strategy\u003e\n      \u003c/jenkins.branch.BranchSource\u003e\n      \u003c/data\u003e\n      \u003cowner class=\"org.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject\" reference=\"../..\"/\u003e\n      \u003c/sources\u003e\n      \u003cfactory class=\"org.jenkinsci.plugins.workflow.multibranch.WorkflowBranchProjectFactory\"\u003e\n      \u003cowner class=\"org.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject\" reference=\"../..\"/\u003e\n      \u003cscriptPath\u003eJenkinsBuilder.groovy\u003c/scriptPath\u003e\n      \u003c/factory\u003e\n      \u003c/org.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject\u003e\n\n    academy-fuchicorp-deploy:\n     |\n      \u003corg.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject plugin=\"workflow-multibranch@2.21\"\u003e\n      \u003cscript type=\"text/javascript\" charset=\"utf-8\" id=\"zm-extension\"/\u003e\n      \u003cactions/\u003e\n      \u003cdescription/\u003e\n      \u003cproperties\u003e\n      \u003corg.csanchez.jenkins.plugins.kubernetes.KubernetesFolderProperty plugin=\"kubernetes@1.18.2\"\u003e\n      \u003cpermittedClouds/\u003e\n      \u003c/org.csanchez.jenkins.plugins.kubernetes.KubernetesFolderProperty\u003e\n      \u003corg.jenkinsci.plugins.pipeline.modeldefinition.config.FolderConfig plugin=\"pipeline-model-definition@1.3.9\"\u003e\n      \u003cdockerLabel/\u003e\n      \u003cregistry plugin=\"docker-commons@1.15\"/\u003e\n      \u003c/org.jenkinsci.plugins.pipeline.modeldefinition.config.FolderConfig\u003e\n      \u003c/properties\u003e\n      \u003cfolderViews class=\"jenkins.branch.MultiBranchProjectViewHolder\" plugin=\"branch-api@2.5.4\"\u003e\n      \u003cowner class=\"org.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject\" reference=\"../..\"/\u003e\n      \u003c/folderViews\u003e\n      \u003chealthMetrics\u003e\n      \u003ccom.cloudbees.hudson.plugins.folder.health.WorstChildHealthMetric plugin=\"cloudbees-folder@6.9\"\u003e\n      \u003cnonRecursive\u003efalse\u003c/nonRecursive\u003e\n      \u003c/com.cloudbees.hudson.plugins.folder.health.WorstChildHealthMetric\u003e\n      \u003c/healthMetrics\u003e\n      \u003cicon class=\"jenkins.branch.MetadataActionFolderIcon\" plugin=\"branch-api@2.5.4\"\u003e\n      \u003cowner class=\"org.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject\" reference=\"../..\"/\u003e\n      \u003c/icon\u003e\n      \u003corphanedItemStrategy class=\"com.cloudbees.hudson.plugins.folder.computed.DefaultOrphanedItemStrategy\" plugin=\"cloudbees-folder@6.9\"\u003e\n      \u003cpruneDeadBranches\u003etrue\u003c/pruneDeadBranches\u003e\n      \u003cdaysToKeep\u003e-1\u003c/daysToKeep\u003e\n      \u003cnumToKeep\u003e-1\u003c/numToKeep\u003e\n      \u003c/orphanedItemStrategy\u003e\n      \u003ctriggers\u003e\n      \u003ccom.cloudbees.hudson.plugins.folder.computed.PeriodicFolderTrigger plugin=\"cloudbees-folder@6.9\"\u003e\n      \u003cspec\u003e* * * * *\u003c/spec\u003e\n      \u003cinterval\u003e120000\u003c/interval\u003e\n      \u003c/com.cloudbees.hudson.plugins.folder.computed.PeriodicFolderTrigger\u003e\n      \u003c/triggers\u003e\n      \u003cdisabled\u003efalse\u003c/disabled\u003e\n      \u003csources class=\"jenkins.branch.MultiBranchProject$BranchSourceList\" plugin=\"branch-api@2.5.4\"\u003e\n      \u003cdata\u003e\n      \u003cjenkins.branch.BranchSource\u003e\n      \u003csource class=\"jenkins.plugins.git.GitSCMSource\" plugin=\"git@3.11.0\"\u003e\n      \u003cid\u003e0a162395-4438-4b2e-8d7d-5e3b8f7d247c\u003c/id\u003e\n      \u003cremote\u003ehttps://github.com/fuchicorp/webplatform.git\u003c/remote\u003e\n      \u003ccredentialsId/\u003e\n      \u003ctraits\u003e\n      \u003cjenkins.plugins.git.traits.BranchDiscoveryTrait/\u003e\n      \u003c/traits\u003e\n      \u003c/source\u003e\n      \u003cstrategy class=\"jenkins.branch.DefaultBranchPropertyStrategy\"\u003e\n      \u003cproperties class=\"empty-list\"/\u003e\n      \u003c/strategy\u003e\n      \u003c/jenkins.branch.BranchSource\u003e\n      \u003c/data\u003e\n      \u003cowner class=\"org.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject\" reference=\"../..\"/\u003e\n      \u003c/sources\u003e\n      \u003cfactory class=\"org.jenkinsci.plugins.workflow.multibranch.WorkflowBranchProjectFactory\"\u003e\n      \u003cowner class=\"org.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject\" reference=\"../..\"/\u003e\n      \u003cscriptPath\u003eJenkinsDeployer.groovy\u003c/scriptPath\u003e\n      \u003c/factory\u003e\n      \u003c/org.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject\u003e\n\nAgent:\n  Enabled: true\n  Image: jenkins/jnlp-slave\n  ImageTag: 3.27-1\n# ImagePullSecret: jenkins\n  Component: \"jenkins-slave\"\n  Privileged: false\n  Cpu: \"200m\"\n  Memory: \"512Mi\"\n  # You may want to change this to true while testing a new image\n  AlwaysPullImage: false\n  # You can define the volumes that you want to mount for this container\n  # Allowed types are: ConfigMap, EmptyDir, HostPath, Nfs, Pod, Secret\n  # Configure the attributes as they appear in the corresponding Java class for that type\n  # https://github.com/jenkinsci/kubernetes-plugin/tree/master/src/main/java/org/csanchez/jenkins/plugins/kubernetes/volumes\n  volumes:\n  # - type: Secret\n  #   secretName: mysecret\n  #   mountPath: /var/myapp/mysecret\n  NodeSelector: {}\n  # Key Value selectors. Ex:\n  # jenkins-agent: v1\n\nPersistence:\n  Enabled: true\n  ## A manually managed Persistent Volume and Claim\n  ## Requires Persistence.Enabled: true\n  ## If defined, PVC must be created manually before volume will be bound\n  # ExistingClaim: jenkins2\n\n  ## jenkins data Persistent Volume Storage Class\n  ## If defined, storageClassName: \u003cstorageClass\u003e\n  ## If set to \"-\", storageClassName: \"\", which disables dynamic provisioning\n  ## If undefined (the default) or set to null, no storageClassName spec is\n  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on\n  ##   GKE, AWS \u0026 OpenStack)\n  ##\n  # StorageClass: \"-\"\n\n  # No inode limits with btrfs\n  StorageClass: \"standard\"\n  Annotations: {}\n  AccessMode: ReadWriteOnce\n  Size: 10Gi\n  volumes:\n  #  - name: nothing\n  #    emptyDir: {}\n  mounts:\n  #  - mountPath: /var/nothing\n  #    name: nothing\n  #    readOnly: true\n\nNetworkPolicy:\n  # Enable creation of NetworkPolicy resources.\n  Enabled: false\n  # For Kubernetes v1.4, v1.5 and v1.6, use 'extensions/v1beta1'\n  # For Kubernetes v1.7, use 'networking.k8s.io/v1'\n  ApiVersion: extensions/v1beta1\n\n## Install Default RBAC roles and bindings\nrbac:\n  install: true\n  serviceAccountName: jenkins\n  # RBAC api version (currently either v1beta1 or v1alpha1)\n  apiVersion: v1beta1\n  # Cluster role reference\n  roleRef: cluster-admin\nNewRelic:\n  LicenseKey: \"\"\n",
                            "template": "# Default values for jenkins.\n# This is a YAML-formatted file.\n# Declare name/value pairs to be passed into your templates.\n# name: value\n\n## Overrides for generated resource names\n# See templates/_helpers.tpl\n# nameOverride:\n# fullnameOverride:\n\n#Common\n\nCronSchedule: \"*/30 * * * *\"\n\nMaster:\n  Name: jenkins-master\n  Image: \"jenkins/jenkins\"\n  ImageTag: \"lts\"\n  ImagePullPolicy: \"Always\"\n# ImagePullSecret: jenkins\n  Component: \"jenkins-master\"\n  UseSecurity: true\n  AdminUser: '${jenkins_user}'\n  AdminPassword: '${jenkins_pass}'\n  Cpu: \"1\"\n  Memory: \"1G\"\n  CpuLimit: \"2\"\n  MemoryLimit: \"2G\"\n  Affinity:\n    nodeAffinity:\n      preferredDuringSchedulingIgnoredDuringExecution:\n      - weight: 1\n        preference:\n          matchExpressions:\n          - key: jenkinsPreferred\n            operator: In\n            values:\n            - \"true\"\n\n  # Environment variables that get added to the init container (useful for e.g. http_proxy)\n  # InitContainerEnv:\n  #   - name: GIT_TOKEN\n  #     value: ${git_token}\n  ContainerEnv:\n    - name: GIT_TOKEN\n      value: ${git_token}\n\n    - name: JENKINS_GITHUB_AUTH_ID\n      value: ${jenkins_auth_client_id}\n\n    - name: JENKINS_GITHUB_AUTH_SECRET\n      value: ${jenkins_auth_secret}\n\n  # Set min/max heap here if needed with:\n  JavaOpts: \"-Xms1g -Xmx1024m\"\n  # JenkinsOpts: \"\"\n  # JenkinsUriPrefix: \"/jenkins\"\n  # Set RunAsUser to 1000 to let Jenkins run as non-root user 'jenkins' which exists in 'jenkins/jenkins' docker image.\n  # When setting RunAsUser to a different value than 0 also set FsGroup to the same value:\n  # RunAsUser: \u003cdefaults to 0\u003e\n  # FsGroup: \u003cwill be omitted in deployment if RunAsUser is 0\u003e\n  ServicePort: 443\n  # For minikube, set this to NodePort, elsewhere use LoadBalancer\n  # Use ClusterIP if your setup includes ingress controller\n  ServiceType: ClusterIP\n  # Master Service annotations\n  ServiceAnnotations:\n    # service.beta.kubernetes.io/aws-load-balancer-backend-protocol: http\n    # nginx.ingress.kubernetes.io/secure-backends: \"true\"\n    # service.beta.kubernetes.io/aws-load-balancer-additional-resource-tags:\n    # service.beta.kubernetes.io/aws-load-balancer-backend-protocol: 'http'\n    # service.beta.kubernetes.io/aws-load-balancer-ssl-cert: '\\$\\{ssl_arn\\}'\n    # service.beta.kubernetes.io/aws-load-balancer-internal: '0.0.0.0/0'\n  #   service.beta.kubernetes.io/aws-load-balancer-backend-protocol: https\n  # Used to create Ingress record (should used with ServiceType: ClusterIP)\n  HostName: jenkins.${cluster_sub_domain}\n  HostNameAlias: builder.${cluster_sub_domain}\n  cluster_sub_domain: ${cluster_sub_domain}\n  # NodePort: \u003cto set explicitly, choose port between 30000-32767\n  ContainerPort: 8080\n  # Enable Kubernetes Liveness and Readiness Probes\n  HealthProbes: true\n  HealthProbesTimeout: 100\n  HealthProbeLivenessFailureThreshold: 12\n  SlaveListenerPort: 50000\n  DisabledAgentProtocols:\n    - JNLP-connect\n    - JNLP2-connect\n  CSRF:\n    DefaultCrumbIssuer:\n      Enabled: true\n      ProxyCompatability: true\n  CLI: true\n  # Kubernetes service type for the JNLP slave service\n  # SETTING THIS TO \"LoadBalancer\" IS A HUGE SECURITY RISK: https://github.com/kubernetes/charts/issues/1341\n  SlaveListenerServiceType: ClusterIP\n  SlaveListenerServiceAnnotations: {}\n  LoadBalancerSourceRanges:\n  - 0.0.0.0/0\n  # Optionally assign a known public LB IP\n  # LoadBalancerIP: 1.2.3.4\n  # Optionally configure a JMX port\n  # requires additional JavaOpts, ie\n  # JavaOpts: \u003e\n  #   -Dcom.sun.management.jmxremote.port=4000\n  #   -Dcom.sun.management.jmxremote.authenticate=false\n  #   -Dcom.sun.management.jmxremote.ssl=false\n  # JMXPort: 4000\n  # Jenkins Global Environment Variables to be created during Jenkins master initial setup\n\n  # GlobalEnvVariables:\n  #   - name: GIT_TOKEN\n  #     value: ${git_token}\n  #   - name: git_server_host\n  #     value: \"coderepository.mcd.com\"\n  #   - name: sonar_host_url\n  #     value: \"https://sonarqube.sharedtools.vet-tools.digitalecp.mcd.com\"\n  #\n  CustomConfigMap: false\n  # Node labels and tolerations for pod assignment\n  # ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector\n  # ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#taints-and-tolerations-beta-feature\n  NodeSelector: {}\n  Tolerations: {}\n  Ingress:\n    ApiVersion: extensions/v1beta1\n    Annotations:\n      kubernetes.io/ingress.class: nginx\n      certmanager.k8s.io/cluster-issuer: letsencrypt-fuchicorp-prod\n    # kubernetes.io/tls-acme: \"true\"\n    TLS:\n    - hosts:\n      - jenkins.${cluster_sub_domain}\n      secretName: \"jenkins-letsencrypt-fuchicorp-prod\"\n  # List of plugins to be install during Jenkins master start\n  InstallPlugins:\n    - kubernetes:1.18.2\n    - workflow-job:2.33\n    - workflow-aggregator:2.6\n    - credentials-binding:1.19\n    - git:3.11.0\n    - docker-build-step:2.4\n    - oki-docki:1.1\n    - slack:2.34\n    - role-strategy:2.14\n    - github-oauth:0.33\n    - authorize-project:1.3.0\n  # Used to approve a list of groovy functions in pipelines used the script-security plugin. Can be viewed under /scriptApproval\n  ScriptApproval:\n    - \"method com.michelin.cio.hudson.plugins.rolestrategy.RoleBasedAuthorizationStrategy addRole\"\n    - \"method com.michelin.cio.hudson.plugins.rolestrategy.RoleBasedAuthorizationStrategy addRole java.lang.String com.michelin.cio.hudson.plugins.rolestrategy.Role\"\n    - \"method com.michelin.cio.hudson.plugins.rolestrategy.RoleBasedAuthorizationStrategy assignRole java.lang.String com.michelin.cio.hudson.plugins.rolestrategy.Role java.lang.String\"\n    - \"method hudson.model.Saveable save\"\n    - \"method java.lang.Class getConstructors\"\n    - \"method java.net.HttpURLConnection setRequestMethod java.lang.String\"\n    - \"method java.net.URL openConnection\"\n    - \"method java.net.URLConnection getInputStream\"\n    - \"method java.net.URLConnection setRequestProperty java.lang.String java.lang.String\"\n    - \"method jenkins.model.Jenkins getAuthorizationStrategy\"\n    - \"method jenkins.model.Jenkins getSecurityRealm\"\n    - \"method jenkins.model.Jenkins isQuietingDown\"\n    - \"method jenkins.model.Jenkins setAuthorizationStrategy hudson.security.AuthorizationStrategy\"\n    - \"method jenkins.model.Jenkins setSecurityRealm hudson.security.SecurityRealm\"\n    - \"method net.sf.json.JSONObject optString java.lang.String java.lang.String\"\n    - \"new com.michelin.cio.hudson.plugins.rolestrategy.RoleBasedAuthorizationStrategy\"\n    - \"new net.sf.json.JSONObject\"\n    - \"new org.jenkinsci.plugins.GithubSecurityRealm java.lang.String java.lang.String java.lang.String java.lang.String java.lang.String\"\n    - \"staticField com.michelin.cio.hudson.plugins.rolestrategy.RoleBasedAuthorizationStrategy PROJECT\"\n    - \"staticField org.jenkinsci.plugins.GithubSecurityRealm DEFAULT_API_URI\"\n    - \"staticField org.jenkinsci.plugins.GithubSecurityRealm DEFAULT_OAUTH_SCOPES\"\n    - \"staticField org.jenkinsci.plugins.GithubSecurityRealm DEFAULT_WEB_URI\"\n    - \"staticMethod hudson.model.Hudson getInstance\"\n    - \"staticMethod java.lang.System getenv\"\n    - \"staticMethod jenkins.model.Jenkins getInstance\"\n    - \"staticMethod org.codehaus.groovy.runtime.DefaultGroovyMethods getText java.io.InputStream\"\n    - \"method java.lang.reflect.AccessibleObject setAccessible boolean\"\n    - \"staticMethod java.lang.System getenv java.lang.String\"\n    - \"method java.lang.Class getDeclaredMethod java.lang.String java.lang.Class[]\"\n\n  # List of groovy init scripts to be executed during Jenkins master start\n  InitScripts:\n   - |\n      import jenkins.model.Jenkins\n      import hudson.security.SecurityRealm\n      import org.jenkinsci.plugins.GithubSecurityRealm\n      import jenkins.plugins.git.GitSCMSource\n      import jenkins.plugins.git.traits.BranchDiscoveryTrait\n      import org.jenkinsci.plugins.workflow.libs.GlobalLibraries\n      import org.jenkinsci.plugins.workflow.libs.LibraryConfiguration\n      import org.jenkinsci.plugins.workflow.libs.SCMSourceRetriever\n      import net.sf.json.JSONObject\n      import hudson.*\n      import hudson.security.*\n      import jenkins.model.*\n      import java.util.*\n      import com.michelin.cio.hudson.plugins.rolestrategy.*\n      import com.synopsys.arc.jenkins.plugins.rolestrategy.*\n      import java.lang.reflect.*\n      import java.util.logging.*\n      import groovy.json.*\n      import groovy.json.JsonSlurper\n      import jenkins.model.Jenkins\n\n      if(!binding.hasVariable('github_realm')) {\n         github_realm = [:]\n      }\n\n      if(!(github_realm instanceof Map)) {\n         throw new Exception('github_realm must be a Map.')\n      }\n\n      String git_hub_auth_id  = \"${jenkins_auth_client_id}\"\n      String git_hub_auth_secret  = \"${jenkins_auth_secret}\"\n      gitToken                   = \"${git_token}\"\n\n      // gitToken = System.getenv().get(\"GIT_TOKEN\")\n\n\n\n      /**\n        Function to compare if the two global shared libraries are equal.\n       */\n      boolean isLibrariesEqual(List lib1, List lib2) {\n          //compare returns true or false\n          lib1.size() == lib2.size() \u0026\u0026\n          !(\n              false in [lib1, lib2].transpose().collect { l1, l2 -\u003e\n                  def s1 = l1.retriever.scm\n                  def s2 = l2.retriever.scm\n                  l1.retriever.class == l2.retriever.class \u0026\u0026\n                  l1.name == l2.name \u0026\u0026\n                  l1.defaultVersion == l2.defaultVersion \u0026\u0026\n                  l1.implicit == l2.implicit \u0026\u0026\n                  l1.allowVersionOverride == l2.allowVersionOverride \u0026\u0026\n                  l1.includeInChangesets == l2.includeInChangesets \u0026\u0026\n                  s1.remote == s2.remote \u0026\u0026\n                  s1.credentialsId == s2.credentialsId \u0026\u0026\n                  s1.traits.size() == s2.traits.size() \u0026\u0026\n                  !(\n                      false in [s1.traits, s2.traits].transpose().collect { t1, t2 -\u003e\n                          t1.class == t2.class\n                      }\n                  )\n              }\n          )\n      }\n\n      pipeline_shared_libraries = [\n          'CommonLib': [\n              'defaultVersion': 'master',\n              'implicit': true,\n              'allowVersionOverride': true,\n              'includeInChangesets': false,\n              'scm': [\n                  'remote': 'https://github.com/fuchicorp/jenkins-global-library.git',\n                  'credentialsId': ''\n              ]\n          ]\n      ]\n\n\n      if(!binding.hasVariable('pipeline_shared_libraries')) {\n          pipeline_shared_libraries = [:]\n      }\n\n      if(!pipeline_shared_libraries in Map) {\n          throw new Exception(\"pipeline_shared_libraries must be an instance of Map but instead is instance of: \"+ pipeline_shared_libraries.getClass())\n      }\n\n      pipeline_shared_libraries = pipeline_shared_libraries as JSONObject\n\n      List libraries = [] as ArrayList\n      pipeline_shared_libraries.each { name, config -\u003e\n          if(name \u0026\u0026 config \u0026\u0026 config in Map \u0026\u0026 'scm' in config \u0026\u0026 config['scm'] in Map \u0026\u0026 'remote' in config['scm'] \u0026\u0026 config['scm'].optString('remote')) {\n              def scm = new GitSCMSource(config['scm'].optString('remote'))\n              scm.credentialsId = config['scm'].optString('credentialsId')\n              scm.traits = [new BranchDiscoveryTrait()]\n              def retriever = new SCMSourceRetriever(scm)\n              def library = new LibraryConfiguration(name, retriever)\n              library.defaultVersion = config.optString('defaultVersion')\n              library.implicit = config.optBoolean('implicit', false)\n              library.allowVersionOverride = config.optBoolean('allowVersionOverride', true)\n              library.includeInChangesets = config.optBoolean('includeInChangesets', true)\n              libraries \u003c\u003c library\n          }\n      }\n\n      def global_settings = Jenkins.instance.getExtensionList(GlobalLibraries.class)[0]\n\n      if(libraries \u0026\u0026 !isLibrariesEqual(global_settings.libraries, libraries)) {\n          global_settings.libraries = libraries\n          global_settings.save()\n          println 'Configured Pipeline Global Shared Libraries:\\n    ' + global_settings.libraries.collect { it.name }.join('\\n    ')\n      }\n      else {\n          if(pipeline_shared_libraries) {\n              println 'Nothing changed.  Pipeline Global Shared Libraries already configured.'\n          }\n          else {\n              println 'Nothing changed.  Skipped configuring Pipeline Global Shared Libraries because settings are empty.'\n          }\n      }\n\n\n      github_realm = github_realm as JSONObject\n\n      String githubWebUri = github_realm.optString('web_uri', GithubSecurityRealm.DEFAULT_WEB_URI)\n      String githubApiUri = github_realm.optString('api_uri', GithubSecurityRealm.DEFAULT_API_URI)\n      String oauthScopes = github_realm.optString('oauth_scopes', GithubSecurityRealm.DEFAULT_OAUTH_SCOPES)\n      String clientID = github_realm.optString('client_id', git_hub_auth_id)\n      String clientSecret = github_realm.optString('client_secret', git_hub_auth_secret)\n\n      if(!Jenkins.instance.isQuietingDown()) {\n         if(clientID \u0026\u0026 clientSecret) {\n             SecurityRealm github_realm = new GithubSecurityRealm(githubWebUri, githubApiUri, clientID, clientSecret, oauthScopes)\n             //check for equality, no need to modify the runtime if no settings changed\n             if(!github_realm.equals(Jenkins.instance.getSecurityRealm())) {\n                 Jenkins.instance.setSecurityRealm(github_realm)\n                 println 'Security realm configuration has changed.  Configured GitHub security realm.'\n             } else {\n                 println 'Nothing changed.  GitHub security realm already configured.'\n             }\n         }\n      } else {\n         println 'Shutdown mode enabled.  Configure GitHub security realm SKIPPED.'\n      }\n\n\n\n\n      def env = System.getenv()\n      jsonSlurper = new JsonSlurper()\n\n\n      def getTeamId(teamName) {\n        /*\n         Function to find teams ID\n        */\n        def organization = \"fuchicorp\"\n        def teamsUrl = \"https://api.github.com/orgs/\" + organization + \"/teams\"\n        def teamId = null\n\n        def get = new URL(teamsUrl).openConnection();\n            get.setRequestMethod(\"GET\")\n            get.setRequestProperty(\"Authorization\", \"token \" + gitToken)\n            get.setRequestProperty(\"Content-Type\", \"application/json\")\n\n        def data = jsonSlurper.parseText(get.getInputStream().getText())\n\n        data.each() {\n          if (it.name.toLowerCase() == teamName.toLowerCase()) {\n            teamId = it.id\n          }\n        }\n\n        return teamId\n      }\n\n\n      def getTeamMembers(teamName) {\n\n        /*\n        Function to find team members from github\n        */\n\n        def getTeamId = getTeamId(teamName)\n        def memberUrl = \"https://api.github.com/teams/\"+ getTeamId +\"/members\"\n        def get = new URL(memberUrl).openConnection();\n            get.setRequestMethod(\"GET\")\n            get.setRequestProperty(\"Authorization\", \"token \" + gitToken)\n            get.setRequestProperty(\"Content-Type\", \"application/json\")\n\n        def object = jsonSlurper.parseText(get.getInputStream().getText())\n        return object.login\n\n      }\n\n      def devopTeam = getTeamMembers(\"devops\")\n      def orgMembers = getTeamMembers(\"members\")\n\n      /**\n       *                Roles\n       */\n\n      def globalRoleRead = \"read\"\n      def globalBuildRole = \"build\"\n      def globalRoleAdmin = \"admin\"\n\n      /**\n       *           Users and Groups\n       */\n      def access = [\n        admins: devopTeam,// Using DevOps team from FuchiCorp organization\n        builders: [],\n        readers: orgMembers\n      ]\n\n\n      if (env.AUTHZ_JSON_FILE)  {\n        println \"Get role authorizations from file \" + env.AUTHZ_JSON_FILE\n        File f = new File(env.AUTHZ_JSON_FILE)\n        def jsonSlurper = new JsonSlurper()\n        def jsonText = f.getText()\n        access = jsonSlurper.parseText( jsonText )\n      }\n      else if (env.AUTH_JSON_URL) {\n        println \"Get role authorizations from URL \" + env.AUTHZ_JSON_URL\n        URL jsonUrl = new URL(env.AUTHZ_JSON_URL);\n        access = new JsonSlurper().parse(jsonUrl);\n      }\n      else {\n        println \"Warning! Neither env.AUTHZ_JSON_FILE nor env.AUTHZ_JSON_URL specified!\"\n        println \"Granting anonymous admin access\"\n      }\n\n      /**\n       * ===================================\n       *\n       *           Permissions\n       *\n       * ===================================\n       */\n\n      // TODO: drive these from a config file\n      def adminPermissions = [\n      \"hudson.model.Hudson.Administer\",\n      \"hudson.model.Hudson.Read\"\n      ]\n\n      def readPermissions = [\n      \"hudson.model.Hudson.Read\",\n      \"hudson.model.Item.Discover\",\n      \"hudson.model.Item.Read\"\n      ]\n\n      def buildPermissions = [\n      \"hudson.model.Hudson.Read\",\n      \"hudson.model.Item.Build\",\n      \"hudson.model.Item.Cancel\",\n      \"hudson.model.Item.Read\",\n      \"hudson.model.Run.Replay\"\n      ]\n\n      def roleBasedAuthenticationStrategy = new RoleBasedAuthorizationStrategy()\n      Jenkins.instance.setAuthorizationStrategy(roleBasedAuthenticationStrategy)\n\n      Constructor[] constrs = Role.class.getConstructors();\n      for (Constructor\u003c?\u003e c : constrs) {\n        c.setAccessible(true);\n      }\n\n      // Make the method assignRole accessible\n      Method assignRoleMethod = RoleBasedAuthorizationStrategy.class.getDeclaredMethod(\"assignRole\", RoleType.class, Role.class, String.class);\n      assignRoleMethod.setAccessible(true);\n      println(\"HACK! changing visibility of RoleBasedAuthorizationStrategy.assignRole\")\n\n      /**\n       *           Permissions\n       */\n\n      Set\u003cPermission\u003e adminPermissionSet = new HashSet\u003cPermission\u003e();\n      adminPermissions.each { p -\u003e\n        def permission = Permission.fromId(p);\n        if (permission != null) {\n          adminPermissionSet.add(permission);\n        } else {\n          println(p + \" is not a valid permission ID (ignoring)\")\n        }\n      }\n\n      Set\u003cPermission\u003e buildPermissionSet = new HashSet\u003cPermission\u003e();\n      buildPermissions.each { p -\u003e\n        def permission = Permission.fromId(p);\n        if (permission != null) {\n          buildPermissionSet.add(permission);\n        } else {\n          println(p + \" is not a valid permission ID (ignoring)\")\n        }\n      }\n\n      Set\u003cPermission\u003e readPermissionSet = new HashSet\u003cPermission\u003e();\n      readPermissions.each { p -\u003e\n        def permission = Permission.fromId(p);\n        if (permission != null) {\n          readPermissionSet.add(permission);\n        } else {\n          println(p + \" is not a valid permission ID (ignoring)\")\n        }\n      }\n\n      /**\n       *      Permissions -\u003e Roles\n       */\n\n      // admins\n      Role adminRole = new Role(globalRoleAdmin, adminPermissionSet);\n      roleBasedAuthenticationStrategy.addRole(RoleType.Global, adminRole);\n\n      // builders\n      Role buildersRole = new Role(globalBuildRole, buildPermissionSet);\n      roleBasedAuthenticationStrategy.addRole(RoleType.Global, buildersRole);\n\n      // anonymous read\n      Role readRole = new Role(globalRoleRead, readPermissionSet);\n      roleBasedAuthenticationStrategy.addRole(RoleType.Global, readRole);\n\n      /**\n       *      Roles -\u003e Groups/Users\n       */\n\n      access.admins.each { l -\u003e\n        println(\"Granting admin to \" + l)\n        roleBasedAuthenticationStrategy.assignRole(RoleType.Global, adminRole, l);\n      }\n\n      access.builders.each { l -\u003e\n        println(\"Granting builder to \" + l)\n        roleBasedAuthenticationStrategy.assignRole(RoleType.Global, buildersRole, l);\n      }\n\n      access.readers.each { l -\u003e\n        println(\"Granting read to \" + l)\n        roleBasedAuthenticationStrategy.assignRole(RoleType.Global, readRole, l);\n      }\n\n      Jenkins.instance.save()\n\n\n  # Kubernetes secret that contains a 'credentials.xml' for Jenkins\n  # CredentialsXmlSecret: jenkins-credentials\n  # Kubernetes secret that contains files to be put in the Jenkins 'secrets' directory,\n  # useful to manage encryption keys used for credentials.xml for instance (such as\n  # master.key and hudson.util.Secret)\n  # SecretsFilesSecret: jenkins-secrets\n  # Jenkins XML job configs to provision\n  Jobs: |-\n    academy-fuchicorp-build:\n     |\n      \u003corg.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject plugin=\"workflow-multibranch@2.21\"\u003e\n      \u003cscript type=\"text/javascript\" charset=\"utf-8\" id=\"zm-extension\"/\u003e\n      \u003cactions/\u003e\n      \u003cdescription/\u003e\n      \u003cproperties\u003e\n      \u003corg.jenkinsci.plugins.pipeline.modeldefinition.config.FolderConfig plugin=\"pipeline-model-definition@1.3.9\"\u003e\n      \u003cdockerLabel/\u003e\n      \u003cregistry plugin=\"docker-commons@1.15\"/\u003e\n      \u003c/org.jenkinsci.plugins.pipeline.modeldefinition.config.FolderConfig\u003e\n      \u003c/properties\u003e\n      \u003cfolderViews class=\"jenkins.branch.MultiBranchProjectViewHolder\" plugin=\"branch-api@2.5.4\"\u003e\n      \u003cowner class=\"org.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject\" reference=\"../..\"/\u003e\n      \u003c/folderViews\u003e\n      \u003chealthMetrics\u003e\n      \u003ccom.cloudbees.hudson.plugins.folder.health.WorstChildHealthMetric plugin=\"cloudbees-folder@6.9\"\u003e\n      \u003cnonRecursive\u003efalse\u003c/nonRecursive\u003e\n      \u003c/com.cloudbees.hudson.plugins.folder.health.WorstChildHealthMetric\u003e\n      \u003c/healthMetrics\u003e\n      \u003cicon class=\"jenkins.branch.MetadataActionFolderIcon\" plugin=\"branch-api@2.5.4\"\u003e\n      \u003cowner class=\"org.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject\" reference=\"../..\"/\u003e\n      \u003c/icon\u003e\n      \u003corphanedItemStrategy class=\"com.cloudbees.hudson.plugins.folder.computed.DefaultOrphanedItemStrategy\" plugin=\"cloudbees-folder@6.9\"\u003e\n      \u003cpruneDeadBranches\u003etrue\u003c/pruneDeadBranches\u003e\n      \u003cdaysToKeep\u003e-1\u003c/daysToKeep\u003e\n      \u003cnumToKeep\u003e-1\u003c/numToKeep\u003e\n      \u003c/orphanedItemStrategy\u003e\n      \u003ctriggers\u003e\n      \u003ccom.cloudbees.hudson.plugins.folder.computed.PeriodicFolderTrigger plugin=\"cloudbees-folder@6.9\"\u003e\n      \u003cspec\u003e* * * * *\u003c/spec\u003e\n      \u003cinterval\u003e120000\u003c/interval\u003e\n      \u003c/com.cloudbees.hudson.plugins.folder.computed.PeriodicFolderTrigger\u003e\n      \u003c/triggers\u003e\n      \u003cdisabled\u003efalse\u003c/disabled\u003e\n      \u003csources class=\"jenkins.branch.MultiBranchProject$BranchSourceList\" plugin=\"branch-api@2.5.4\"\u003e\n      \u003cdata\u003e\n      \u003cjenkins.branch.BranchSource\u003e\n      \u003csource class=\"jenkins.plugins.git.GitSCMSource\" plugin=\"git@3.11.0\"\u003e\n      \u003cid\u003e0a162395-4438-4b2e-8d7d-5e3b8f7d247c\u003c/id\u003e\n      \u003cremote\u003ehttps://github.com/fuchicorp/webplatform.git\u003c/remote\u003e\n      \u003ccredentialsId/\u003e\n      \u003ctraits\u003e\n      \u003cjenkins.plugins.git.traits.BranchDiscoveryTrait/\u003e\n      \u003c/traits\u003e\n      \u003c/source\u003e\n      \u003cstrategy class=\"jenkins.branch.DefaultBranchPropertyStrategy\"\u003e\n      \u003cproperties class=\"empty-list\"/\u003e\n      \u003c/strategy\u003e\n      \u003c/jenkins.branch.BranchSource\u003e\n      \u003c/data\u003e\n      \u003cowner class=\"org.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject\" reference=\"../..\"/\u003e\n      \u003c/sources\u003e\n      \u003cfactory class=\"org.jenkinsci.plugins.workflow.multibranch.WorkflowBranchProjectFactory\"\u003e\n      \u003cowner class=\"org.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject\" reference=\"../..\"/\u003e\n      \u003cscriptPath\u003eJenkinsBuilder.groovy\u003c/scriptPath\u003e\n      \u003c/factory\u003e\n      \u003c/org.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject\u003e\n\n    academy-fuchicorp-deploy:\n     |\n      \u003corg.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject plugin=\"workflow-multibranch@2.21\"\u003e\n      \u003cscript type=\"text/javascript\" charset=\"utf-8\" id=\"zm-extension\"/\u003e\n      \u003cactions/\u003e\n      \u003cdescription/\u003e\n      \u003cproperties\u003e\n      \u003corg.csanchez.jenkins.plugins.kubernetes.KubernetesFolderProperty plugin=\"kubernetes@1.18.2\"\u003e\n      \u003cpermittedClouds/\u003e\n      \u003c/org.csanchez.jenkins.plugins.kubernetes.KubernetesFolderProperty\u003e\n      \u003corg.jenkinsci.plugins.pipeline.modeldefinition.config.FolderConfig plugin=\"pipeline-model-definition@1.3.9\"\u003e\n      \u003cdockerLabel/\u003e\n      \u003cregistry plugin=\"docker-commons@1.15\"/\u003e\n      \u003c/org.jenkinsci.plugins.pipeline.modeldefinition.config.FolderConfig\u003e\n      \u003c/properties\u003e\n      \u003cfolderViews class=\"jenkins.branch.MultiBranchProjectViewHolder\" plugin=\"branch-api@2.5.4\"\u003e\n      \u003cowner class=\"org.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject\" reference=\"../..\"/\u003e\n      \u003c/folderViews\u003e\n      \u003chealthMetrics\u003e\n      \u003ccom.cloudbees.hudson.plugins.folder.health.WorstChildHealthMetric plugin=\"cloudbees-folder@6.9\"\u003e\n      \u003cnonRecursive\u003efalse\u003c/nonRecursive\u003e\n      \u003c/com.cloudbees.hudson.plugins.folder.health.WorstChildHealthMetric\u003e\n      \u003c/healthMetrics\u003e\n      \u003cicon class=\"jenkins.branch.MetadataActionFolderIcon\" plugin=\"branch-api@2.5.4\"\u003e\n      \u003cowner class=\"org.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject\" reference=\"../..\"/\u003e\n      \u003c/icon\u003e\n      \u003corphanedItemStrategy class=\"com.cloudbees.hudson.plugins.folder.computed.DefaultOrphanedItemStrategy\" plugin=\"cloudbees-folder@6.9\"\u003e\n      \u003cpruneDeadBranches\u003etrue\u003c/pruneDeadBranches\u003e\n      \u003cdaysToKeep\u003e-1\u003c/daysToKeep\u003e\n      \u003cnumToKeep\u003e-1\u003c/numToKeep\u003e\n      \u003c/orphanedItemStrategy\u003e\n      \u003ctriggers\u003e\n      \u003ccom.cloudbees.hudson.plugins.folder.computed.PeriodicFolderTrigger plugin=\"cloudbees-folder@6.9\"\u003e\n      \u003cspec\u003e* * * * *\u003c/spec\u003e\n      \u003cinterval\u003e120000\u003c/interval\u003e\n      \u003c/com.cloudbees.hudson.plugins.folder.computed.PeriodicFolderTrigger\u003e\n      \u003c/triggers\u003e\n      \u003cdisabled\u003efalse\u003c/disabled\u003e\n      \u003csources class=\"jenkins.branch.MultiBranchProject$BranchSourceList\" plugin=\"branch-api@2.5.4\"\u003e\n      \u003cdata\u003e\n      \u003cjenkins.branch.BranchSource\u003e\n      \u003csource class=\"jenkins.plugins.git.GitSCMSource\" plugin=\"git@3.11.0\"\u003e\n      \u003cid\u003e0a162395-4438-4b2e-8d7d-5e3b8f7d247c\u003c/id\u003e\n      \u003cremote\u003ehttps://github.com/fuchicorp/webplatform.git\u003c/remote\u003e\n      \u003ccredentialsId/\u003e\n      \u003ctraits\u003e\n      \u003cjenkins.plugins.git.traits.BranchDiscoveryTrait/\u003e\n      \u003c/traits\u003e\n      \u003c/source\u003e\n      \u003cstrategy class=\"jenkins.branch.DefaultBranchPropertyStrategy\"\u003e\n      \u003cproperties class=\"empty-list\"/\u003e\n      \u003c/strategy\u003e\n      \u003c/jenkins.branch.BranchSource\u003e\n      \u003c/data\u003e\n      \u003cowner class=\"org.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject\" reference=\"../..\"/\u003e\n      \u003c/sources\u003e\n      \u003cfactory class=\"org.jenkinsci.plugins.workflow.multibranch.WorkflowBranchProjectFactory\"\u003e\n      \u003cowner class=\"org.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject\" reference=\"../..\"/\u003e\n      \u003cscriptPath\u003eJenkinsDeployer.groovy\u003c/scriptPath\u003e\n      \u003c/factory\u003e\n      \u003c/org.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject\u003e\n\nAgent:\n  Enabled: true\n  Image: jenkins/jnlp-slave\n  ImageTag: 3.27-1\n# ImagePullSecret: jenkins\n  Component: \"jenkins-slave\"\n  Privileged: false\n  Cpu: \"200m\"\n  Memory: \"512Mi\"\n  # You may want to change this to true while testing a new image\n  AlwaysPullImage: false\n  # You can define the volumes that you want to mount for this container\n  # Allowed types are: ConfigMap, EmptyDir, HostPath, Nfs, Pod, Secret\n  # Configure the attributes as they appear in the corresponding Java class for that type\n  # https://github.com/jenkinsci/kubernetes-plugin/tree/master/src/main/java/org/csanchez/jenkins/plugins/kubernetes/volumes\n  volumes:\n  # - type: Secret\n  #   secretName: mysecret\n  #   mountPath: /var/myapp/mysecret\n  NodeSelector: {}\n  # Key Value selectors. Ex:\n  # jenkins-agent: v1\n\nPersistence:\n  Enabled: true\n  ## A manually managed Persistent Volume and Claim\n  ## Requires Persistence.Enabled: true\n  ## If defined, PVC must be created manually before volume will be bound\n  # ExistingClaim: jenkins2\n\n  ## jenkins data Persistent Volume Storage Class\n  ## If defined, storageClassName: \u003cstorageClass\u003e\n  ## If set to \"-\", storageClassName: \"\", which disables dynamic provisioning\n  ## If undefined (the default) or set to null, no storageClassName spec is\n  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on\n  ##   GKE, AWS \u0026 OpenStack)\n  ##\n  # StorageClass: \"-\"\n\n  # No inode limits with btrfs\n  StorageClass: \"standard\"\n  Annotations: {}\n  AccessMode: ReadWriteOnce\n  Size: 10Gi\n  volumes:\n  #  - name: nothing\n  #    emptyDir: {}\n  mounts:\n  #  - mountPath: /var/nothing\n  #    name: nothing\n  #    readOnly: true\n\nNetworkPolicy:\n  # Enable creation of NetworkPolicy resources.\n  Enabled: false\n  # For Kubernetes v1.4, v1.5 and v1.6, use 'extensions/v1beta1'\n  # For Kubernetes v1.7, use 'networking.k8s.io/v1'\n  ApiVersion: extensions/v1beta1\n\n## Install Default RBAC roles and bindings\nrbac:\n  install: true\n  serviceAccountName: jenkins\n  # RBAC api version (currently either v1beta1 or v1alpha1)\n  apiVersion: v1beta1\n  # Cluster role reference\n  roleRef: cluster-admin\nNewRelic:\n  LicenseKey: \"\"\n",
                            "vars.%": "6",
                            "vars.cluster_sub_domain": "fuchicorp.com",
                            "vars.git_token": "ad9015cdfda2935a25cae144d9bf1ede5b731196",
                            "vars.jenkins_auth_client_id": "3595c43658d4c3417c95",
                            "vars.jenkins_auth_secret": "06c9eed36e89369f860d0ac39aca64d6283ad74b",
                            "vars.jenkins_pass": "B1JsVZtr4rvJfmnnafqRjTEKLsT",
                            "vars.jenkins_user": "admin"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template"
                },
                "helm_release.cert_manager": {
                    "type": "helm_release",
                    "depends_on": [
                        "helm_release.ingress_controller",
                        "kubernetes_cluster_role_binding.tiller_cluster_rule",
                        "kubernetes_deployment.grafana_fuchicorp_deployment",
                        "kubernetes_deployment.jenkins_fuchicorp_deployment",
                        "kubernetes_deployment.nexus_fuchicorp_deployment",
                        "kubernetes_deployment.vault_fuchicorp_deployment",
                        "kubernetes_namespace.service_tools",
                        "kubernetes_secret.tiller",
                        "kubernetes_service.grafana_fuchicorp_service",
                        "kubernetes_service.jenkins_fuchicorp_service",
                        "kubernetes_service.nexus_fuchicorp_service",
                        "kubernetes_service.vault_fuchicorp_service",
                        "kubernetes_service_account.tiller"
                    ],
                    "primary": {
                        "id": "fuchicorp-cert-manager",
                        "attributes": {
                            "chart": "stable/cert-manager",
                            "disable_webhooks": "false",
                            "force_update": "false",
                            "id": "fuchicorp-cert-manager",
                            "metadata.#": "1",
                            "metadata.0.chart": "cert-manager",
                            "metadata.0.name": "fuchicorp-cert-manager",
                            "metadata.0.namespace": "tools",
                            "metadata.0.revision": "1",
                            "metadata.0.values": "ingressShim:\n  defaultIssuerKind: ClusterIssuer\n  defaultIssuerName: letsencrypt-fuchicorp-prod\n",
                            "metadata.0.version": "v0.3.0",
                            "name": "fuchicorp-cert-manager",
                            "namespace": "tools",
                            "recreate_pods": "false",
                            "reuse": "false",
                            "reuse_values": "false",
                            "set.#": "2",
                            "set.3990060909.name": "ingressShim.defaultIssuerName",
                            "set.3990060909.value": "letsencrypt-fuchicorp-prod",
                            "set.618768427.name": "ingressShim.defaultIssuerKind",
                            "set.618768427.value": "ClusterIssuer",
                            "status": "DEPLOYED",
                            "timeout": "300",
                            "verify": "false",
                            "version": "v0.3.0",
                            "wait": "true"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.helm"
                },
                "helm_release.external_dns_controller": {
                    "type": "helm_release",
                    "depends_on": [
                        "data.template_file.external_dns_values",
                        "kubernetes_cluster_role_binding.tiller_cluster_rule",
                        "kubernetes_namespace.service_tools",
                        "kubernetes_secret.tiller",
                        "kubernetes_service_account.tiller"
                    ],
                    "primary": {
                        "id": "fuchicorp-external-dns",
                        "attributes": {
                            "chart": "./helm-external-dns/external-dns",
                            "disable_webhooks": "false",
                            "force_update": "false",
                            "id": "fuchicorp-external-dns",
                            "metadata.#": "1",
                            "metadata.0.chart": "external-dns",
                            "metadata.0.name": "fuchicorp-external-dns",
                            "metadata.0.namespace": "tools",
                            "metadata.0.revision": "2",
                            "metadata.0.values": "affinity: {}\nannotationFilter: \"\"\naws:\n  assumeRoleArn: \"\"\n  batchChangeSize: 1000\n  credentials:\n    accessKey: \"\"\n    mountPath: /.aws\n    secretKey: \"\"\n  region: us-east-1\n  zoneTags: []\n  zoneType: \"\"\nazure:\n  resourceGroup: \"\"\n  secretName: \"\"\ncloudflare:\n  apiKey: \"\"\n  email: \"\"\n  proxied: true\ncoredns:\n  etcdEndpoints: http://etcd-extdns:2379\n  etcdTLS:\n    caFilename: ca.crt\n    certFilename: cert.pem\n    enabled: false\n    keyFilename: key.pem\n    mountPath: /etc/coredns/tls/etcd\n    secretName: etcd-client-certs\ncrd:\n  apiversion: \"\"\n  create: false\n  kind: \"\"\ndesignate:\n  customCA:\n    content: \"\"\n    enabled: false\n    filename: designate-ca.pem\n    mountPath: /config/designate\ndigitalocean:\n  apiToken: \"\"\ndomainFilters: []\ndryRun: false\nextraArgs: {}\nextraEnv: []\ngoogle:\n  project: fuchicorp-project-256020\n  serviceAccountSecret: fuchicorp-service-account\nimage:\n  pullPolicy: IfNotPresent\n  registry: docker.io\n  repository: bitnami/external-dns\n  tag: 0.5.17-r16\ninfoblox:\n  domainFilter: \"\"\n  gridHost: \"\"\n  noSslVerify: false\n  wapiConnectionPoolSize: \"\"\n  wapiHttpTimeout: \"\"\n  wapiPassword: \"\"\n  wapiPort: \"\"\n  wapiUsername: admin\n  wapiVersion: \"\"\ninterval: 1m\nistioIngressGateways: []\nlivenessProbe:\n  failureThreshold: 2\n  httpGet:\n    path: /healthz\n    port: http\n  initialDelaySeconds: 10\n  periodSeconds: 10\n  successThreshold: 1\n  timeoutSeconds: 5\nlogLevel: info\nmetrics:\n  enabled: false\nnodeSelector: {}\npdns:\n  apiKey: \"\"\n  apiPort: \"8081\"\n  apiUrl: \"\"\npodAnnotations: {}\npodLabels: {}\npodSecurityContext:\n  fsGroup: 1001\n  runAsUser: 1001\npolicy: upsert-only\npriorityClassName: \"\"\nprovider: google\npublishInternalServices: true\nrbac:\n  apiVersion: v1beta1\n  create: true\n  pspEnabled: false\n  serviceAccountAnnotations: {}\n  serviceAccountName: external-dns-service-account\nreadinessProbe:\n  failureThreshold: 6\n  httpGet:\n    path: /healthz\n    port: http\n  initialDelaySeconds: 5\n  periodSeconds: 10\n  successThreshold: 1\n  timeoutSeconds: 5\nregistry: txt\nreplicas: 1\nresources: {}\nrfc2136:\n  host: fuchicorp.com\n  port: 53\n  tsigAxfr: true\n  tsigKeyname: externaldns-key\n  tsigSecret: \"\"\n  tsigSecretAlg: hmac-sha256\n  zone: fuchicorp\nsecurityContext: {}\nservice:\n  annotations: {}\n  externalIPs: []\n  loadBalancerSourceRanges: []\n  port: 7979\n  type: ClusterIP\nsources:\n- ingress\ntolerations: []\ntxtOwnerId: \"\"\nzoneIdFilters: []\n",
                            "metadata.0.version": "2.6.5",
                            "name": "fuchicorp-external-dns",
                            "namespace": "tools",
                            "recreate_pods": "false",
                            "reuse": "false",
                            "reuse_values": "false",
                            "status": "DEPLOYED",
                            "timeout": "300",
                            "values.#": "1",
                            "values.0": "## Global Docker image parameters\n## Please, note that this will override the image parameters, including dependencies, configured to use the global value\n## Current available global Docker image parameters: imageRegistry and imagePullSecrets\n##\n# global:\n#   imageRegistry: myRegistryName\n#   imagePullSecrets:\n#     - myRegistryKeySecretName\n\n## Bitnami external-dns image version\n## ref: https://hub.docker.com/r/bitnami/external-dns/tags/\n##\nimage:\n  registry: docker.io\n  repository: bitnami/external-dns\n  tag: 0.5.17-r16\n  ## Specify a imagePullPolicy\n  ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'\n  ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images\n  ##\n  pullPolicy: IfNotPresent\n  ## Optionally specify an array of imagePullSecrets.\n  ## Secrets must be manually created in the namespace.\n  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/\n  ##\n  # pullSecrets:\n  #   - myRegistryKeySecretName\n\n## String to partially override external-dns.fullname template (will maintain the release name)\n# nameOverride:\n\n## String to fully override external-dns.fullname template\n# fullnameOverride:\n\n## K8s resources type to be observed for new DNS entries by ExternalDNS\n##\nsources:\n- ingress\n# - service\n# - crd\n\n## DNS provider where the DNS records will be created. Available providers are:\n## - aws, azure, cloudflare, coredns, designate, digitalocoean, google, infoblox, rfc2136\n##\nprovider: google\n\n## Whether to publish DNS records for ClusterIP services or not (optional)\n##\npublishInternalServices: true\n\n## AWS configuration to be set via arguments/env. variables\n##\naws:\n  ## AWS credentials\n  ##\n  credentials:\n    secretKey: \"\"\n    accessKey: \"\"\n    ## pre external-dns 0.5.9 home dir should be `/root/.aws`\n    ##\n    mountPath: \"/.aws\"\n  ## AWS region\n  ##\n  region: \"us-east-1\"\n  ## Zone Filter. Available values are: public, private\n  ##\n  zoneType: \"\"\n  ## AWS Role to assume\n  ##\n  assumeRoleArn: \"\"\n  ## Maximum number of changes that will be applied in each batch\n  ##\n  batchChangeSize: 1000\n  ## AWS Zone tags\n  ##\n  zoneTags: []\n\n## Azure configuration to be set via arguments/env. variables\n##\nazure:\n  ## When a secret to load azure.json is not specified,\n  ## the host's /etc/kubernetes/azure.json will be used\n  ##\n  secretName: \"\"\n  ## Azure resource group to use\n  ##\n  resourceGroup: \"\"\n\n## Cloudflare configuration to be set via arguments/env. variables\n##\ncloudflare:\n  ## `CF_API_KEY` to set in the environment\n  ##\n  apiKey: \"\"\n  ## `CF_API_EMAIL` to set in the environment\n  ##\n  email: \"\"\n  ## Enable the proxy feature of Cloudflare\n  ##\n  proxied: true\n\n## CoreDNS configuration to be set via arguments/env variables\n##\ncoredns:\n  ## Comma-separated list of the etcd endpoints\n  ## Secure (https) endpoints can be used as well, in that case `etcdTLS` section\n  ## should be filled in accordingly\n  ##\n  etcdEndpoints: \"http://etcd-extdns:2379\"\n  ## Configuration of the secure communication and client authentication to the etcd cluster\n  ## If enabled all the values under this key must hold a valid data\n  ##\n  etcdTLS:\n    ## Enable or disable secure communication and client authentication to the etcd cluster\n    ##\n    enabled: false\n    ## Name of the existing secret containing cert files for client communication\n    ## ref: https://github.com/etcd-io/etcd/blob/master/Documentation/op-guide/security.md\n    ## ref (secret creation):\n    ##  https://github.com/bitnami/charts/tree/master/bitnami/etcd#configure-certificates-for-client-communication\n    ##\n    secretName: \"etcd-client-certs\"\n    ## Location of the mounted certificates inside external-dns pod\n    ##\n    mountPath: \"/etc/coredns/tls/etcd\"\n    ## CA PEM file used to sign etcd TLS cert, should exist in the secret provided above\n    ##\n    caFilename: \"ca.crt\"\n    ## Certificate PEM file, should exist in the secret provided above\n    ## Will be used by external-dns to authenticate against etcd\n    ##\n    certFilename: \"cert.pem\"\n    ## Private key PEM file, should exist in the secret provided above\n    ## Will be used by external-dns to authenticate against etcd\n    ##\n    keyFilename: \"key.pem\"\n\n## OpenStack Designate provider configuration to be set via arguments/env. variables\n##\ndesignate:\n  ## Use a custom CA (optional)\n  ##\n  customCA:\n    enabled: false\n    ## The content of the custom CA file\n    ##\n    content: \"\"\n    ## Location to mount custom CA\n    ##\n    mountPath: \"/config/designate\"\n    ## Custom CA filename\n    ##\n    filename: \"designate-ca.pem\"\n\n## DigitalOcean configuration to be set via arguments/env. variables\n##\ndigitalocean:\n  ## `DO_TOKEN` to set in the environment\n  ##\n  apiToken: \"\"\n\n## Google configuration to be set via arguments/env. variables\n##\ngoogle:\n  ## Google Project to use\n  ##\n  project: fuchicorp-project-256020\n  ## Google Application Credentials\n  ##\n  serviceAccountSecret: \"fuchicorp-service-account\"\n\n  # serviceAccountKey: \"fuchicorp-service-account.json\"\n\n## Infoblox configuration to be set via arguments/env. variables\n##\ninfoblox:\n  ## Required keys\n  ##\n  wapiUsername: \"admin\"\n  wapiPassword: \"\"\n  gridHost: \"\"\n  ## Optional keys\n  ##\n  domainFilter: \"\"\n  noSslVerify: false\n  wapiPort: \"\"\n  wapiVersion: \"\"\n  wapiConnectionPoolSize: \"\"\n  wapiHttpTimeout: \"\"\n\n## RFC 2136 configuration to be set via arguments/env. variables\n##\nrfc2136:\n  host: \"fuchicorp.com\"\n  port: 53\n  zone: \"fuchicorp\"\n  tsigSecret: \"\"\n  tsigSecretAlg: hmac-sha256\n  tsigKeyname: externaldns-key\n  tsigAxfr: true\n\n## PowerDNS configuration to be set via arguments/env. variables\n##\npdns:\n  apiUrl: \"\"\n  apiPort: \"8081\"\n  apiKey: \"\"\n\n## Limit possible target zones by domain suffixes (optional)\n##\ndomainFilters: []\n## Limit possible target zones by zone id (optional)\n##\nzoneIdFilters: []\n## Filter sources managed by external-dns via annotation using label selector semantics (optional)\n##\nannotationFilter: \"\"\n## When enabled, prints DNS record changes rather than actually performing them\n##\ndryRun: false\n## Adjust the interval for DNS updates\n##\ninterval: \"1m\"\n## Verbosity of the ExternalDNS logs. Available values are:\n## - panic, debug, info, warn, error, fatal\n##\nlogLevel: info\n## Modify how DNS records are sychronized between sources and providers (options: sync, upsert-only)\n##\npolicy: upsert-only\n## Registry Type. Available types are: txt, noop\n## ref: https://github.com/kubernetes-incubator/external-dns/blob/master/docs/proposal/registry.md\n##\nregistry: \"txt\"\n## TXT Registry Identifier\n##\ntxtOwnerId: \"\"\n## Prefix to create a TXT record with a name following the pattern prefix.\u003cCNAME record\u003e\n##\n# txtPrefix: \"\"\n## Load balancer service to be used; ie: custom-istio-namespace/custom-istio-ingressgateway.\n## Omit to use the default (istio-system/istio-ingressgateway)\n##\nistioIngressGateways: []\n\n## Extra Arguments to passed to external-dns\n##\nextraArgs: {}\n## Extra env. variable to set on external-dns container.\n##\n## extraEnv:\n## - name: VARNAME1\n##   value: value1\n## - name: VARNAME2\n##   valueFrom:\n##     secretKeyRef:\n##       name: existing-secret\n##       key: varname2-key\nextraEnv: []\n\n## Replica count\n##\nreplicas: 1\n\n## Affinity for pod assignment (this value is evaluated as a template)\n## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity\n##\naffinity: {}\n## Node labels for pod assignment (this value is evaluated as a template)\n## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector\n##\nnodeSelector: {}\n## Tolerations for pod assignment (this value is evaluated as a template)\n## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#taints-and-tolerations-beta-feature\n##\ntolerations: []\n## Annotations for external-dns pods\n##\npodAnnotations: {}\n## Additional labels for the pod(s).\n##\npodLabels: {}\n## Pod priority class name\n##\npriorityClassName: \"\"\n\n## Options for the source type \"crd\"\n##\ncrd:\n  ## Install and use the integrated DNSEndpoint CRD\n  create: false\n  ## Change these to use an external DNSEndpoint CRD (E.g. from kubefed)\n  apiversion: \"\"\n  kind: \"\"\n\n## Kubernetes svc configutarion\n##\nservice:\n  ## Kubernetes svc type\n  ##\n  type: ClusterIP\n  port: 7979\n  ## Specify the nodePort value for the LoadBalancer and NodePort service types for the client port\n  ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport\n  ##\n  # nodePort:\n  ## Static clusterIP or None for headless services\n  ##\n  # clusterIP: \"\"\n  ## External IP list to use with ClusterIP service type\n  ##\n  externalIPs: []\n  ## Use loadBalancerIP to request a specific static IP,\n  ## otherwise leave blank\n  ##\n  # loadBalancerIP:\n  ## Address that are allowed when svc is LoadBalancer\n  ##\n  loadBalancerSourceRanges: []\n  ## Provide any additional annotations which may be required. This can be used to\n  ## set the LoadBalancer service type to internal only.\n  ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer\n  ##\n  annotations: {}\n\n## RBAC parameteres\n## https://kubernetes.io/docs/reference/access-authn-authz/rbac/\n##\nrbac:\n  create: true\n  ## Service Account for pods\n  ## https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/\n  ##\n  serviceAccountName: external-dns-service-account\n  ## Annotations for the Service Account\n  ##\n  serviceAccountAnnotations: {}\n  ## RBAC API version\n  ##\n  apiVersion: v1beta1\n  ## Podsecuritypolicy\n  ##\n  pspEnabled: false\n\n## Kubernetes Security Context\n## https://kubernetes.io/docs/tasks/configure-pod-container/security-context/\n##\nsecurityContext: {}\n  # allowPrivilegeEscalation: false\n  # readOnlyRootFilesystem: true\n  # capabilities:\n  #   drop: [\"ALL\"]\npodSecurityContext:\n  fsGroup: 1001\n  runAsUser: 1001\n  # runAsNonRoot: true\n\n## Configure resource requests and limits\n## ref: http://kubernetes.io/docs/user-guide/compute-resources/\n##\nresources: {}\n#  limits:\n#    cpu: 50m\n#    memory: 50Mi\n#  requests:\n#    memory: 50Mi\n#    cpu: 10m\n\n## Liveness Probe. The block is directly forwarded into the deployment, so you can use whatever livenessProbe configuration you want.\n## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/\n##\nlivenessProbe:\n  httpGet:\n    path: /healthz\n    port: http\n  initialDelaySeconds: 10\n  periodSeconds: 10\n  timeoutSeconds: 5\n  failureThreshold: 2\n  successThreshold: 1\n## Readiness Probe. The block is directly forwarded into the deployment, so you can use whatever readinessProbe configuration you want.\n## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/\n##\nreadinessProbe:\n  httpGet:\n    path: /healthz\n    port: http\n  initialDelaySeconds: 5\n  periodSeconds: 10\n  timeoutSeconds: 5\n  failureThreshold: 6\n  successThreshold: 1\n\n## Prometheus Exporter / Metrics\n##\nmetrics:\n  enabled: false\n  ## Metrics exporter pod Annotation and Labels\n  ##\n",
                            "verify": "false",
                            "version": "2.6.5",
                            "wait": "true"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.helm"
                },
                "helm_release.fuchicorp_services_ingress": {
                    "type": "helm_release",
                    "depends_on": [
                        "helm_release.ingress_controller",
                        "kubernetes_deployment.grafana_fuchicorp_deployment",
                        "kubernetes_deployment.nexus_fuchicorp_deployment",
                        "kubernetes_deployment.vault_fuchicorp_deployment",
                        "kubernetes_service.grafana_fuchicorp_service",
                        "kubernetes_service.nexus_fuchicorp_service",
                        "kubernetes_service.vault_fuchicorp_service"
                    ],
                    "primary": {
                        "id": "fuchicorp-services-ingress-tools",
                        "attributes": {
                            "chart": "./helm-fuchicorp",
                            "disable_webhooks": "false",
                            "force_update": "false",
                            "id": "fuchicorp-services-ingress-tools",
                            "metadata.#": "1",
                            "metadata.0.chart": "Common Tools Ingress",
                            "metadata.0.name": "fuchicorp-services-ingress-tools",
                            "metadata.0.namespace": "tools",
                            "metadata.0.revision": "2",
                            "metadata.0.values": "email: fuchicorpsolutions@gmail.com\ngrafanaport: 8080\nnexusport: 8083\nrepo_port: 8085\nvaultport: 8082\n",
                            "metadata.0.version": "0.0.1",
                            "name": "fuchicorp-services-ingress-tools",
                            "namespace": "tools",
                            "recreate_pods": "false",
                            "reuse": "false",
                            "reuse_values": "false",
                            "set.#": "5",
                            "set.1250828402.name": "repo_port",
                            "set.1250828402.value": "8085",
                            "set.148486625.name": "grafanaport",
                            "set.148486625.value": "8080",
                            "set.385757039.name": "vaultport",
                            "set.385757039.value": "8082",
                            "set.3993454188.name": "nexusport",
                            "set.3993454188.value": "8083",
                            "set.595139642.name": "email",
                            "set.595139642.value": "fuchicorpsolutions@gmail.com",
                            "status": "DEPLOYED",
                            "timeout": "300",
                            "verify": "false",
                            "version": "0.0.1",
                            "wait": "true"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.helm"
                },
                "helm_release.helm_jenkins_fuchicorp": {
                    "type": "helm_release",
                    "depends_on": [
                        "data.template_file.jenkins_values",
                        "helm_release.ingress_controller",
                        "kubernetes_deployment.grafana_fuchicorp_deployment",
                        "kubernetes_deployment.nexus_fuchicorp_deployment",
                        "kubernetes_deployment.vault_fuchicorp_deployment",
                        "kubernetes_service.grafana_fuchicorp_service",
                        "kubernetes_service.nexus_fuchicorp_service",
                        "kubernetes_service.vault_fuchicorp_service"
                    ],
                    "primary": {
                        "id": "jenkins-fuchicorp",
                        "attributes": {
                            "chart": "./helm-jenkins/jenkins",
                            "disable_webhooks": "false",
                            "force_update": "false",
                            "id": "jenkins-fuchicorp",
                            "metadata.#": "1",
                            "metadata.0.chart": "jenkins",
                            "metadata.0.name": "jenkins-fuchicorp",
                            "metadata.0.namespace": "tools",
                            "metadata.0.revision": "2",
                            "metadata.0.values": "Agent:\n  AlwaysPullImage: false\n  Component: jenkins-slave\n  Cpu: 200m\n  Enabled: true\n  Image: jenkins/jnlp-slave\n  ImageTag: 3.27-1\n  Memory: 512Mi\n  NodeSelector: {}\n  Privileged: false\n  volumes: null\nCronSchedule: '*/30 * * * *'\nMaster:\n  AdminPassword: B1JsVZtr4rvJfmnnafqRjTEKLsT\n  AdminUser: admin\n  Affinity:\n    nodeAffinity:\n      preferredDuringSchedulingIgnoredDuringExecution:\n      - preference:\n          matchExpressions:\n          - key: jenkinsPreferred\n            operator: In\n            values:\n            - \"true\"\n        weight: 1\n  CLI: true\n  CSRF:\n    DefaultCrumbIssuer:\n      Enabled: true\n      ProxyCompatability: true\n  Component: jenkins-master\n  ContainerEnv:\n  - name: GIT_TOKEN\n    value: ad9015cdfda2935a25cae144d9bf1ede5b731196\n  - name: JENKINS_GITHUB_AUTH_ID\n    value: 3595c43658d4c3417c95\n  - name: JENKINS_GITHUB_AUTH_SECRET\n    value: 06c9eed36e89369f860d0ac39aca64d6283ad74b\n  ContainerPort: 8080\n  Cpu: \"1\"\n  CpuLimit: \"2\"\n  CustomConfigMap: false\n  DisabledAgentProtocols:\n  - JNLP-connect\n  - JNLP2-connect\n  HealthProbeLivenessFailureThreshold: 12\n  HealthProbes: true\n  HealthProbesTimeout: 100\n  HostName: jenkins.fuchicorp.com\n  HostNameAlias: builder.fuchicorp.com\n  Image: jenkins/jenkins\n  ImagePullPolicy: Always\n  ImageTag: lts\n  Ingress:\n    Annotations:\n      certmanager.k8s.io/cluster-issuer: letsencrypt-fuchicorp-prod\n      kubernetes.io/ingress.class: nginx\n    ApiVersion: extensions/v1beta1\n    TLS:\n    - hosts:\n      - jenkins.fuchicorp.com\n      secretName: jenkins-letsencrypt-fuchicorp-prod\n  InitScripts:\n  - |\n    import jenkins.model.Jenkins\n    import hudson.security.SecurityRealm\n    import org.jenkinsci.plugins.GithubSecurityRealm\n    import jenkins.plugins.git.GitSCMSource\n    import jenkins.plugins.git.traits.BranchDiscoveryTrait\n    import org.jenkinsci.plugins.workflow.libs.GlobalLibraries\n    import org.jenkinsci.plugins.workflow.libs.LibraryConfiguration\n    import org.jenkinsci.plugins.workflow.libs.SCMSourceRetriever\n    import net.sf.json.JSONObject\n    import hudson.*\n    import hudson.security.*\n    import jenkins.model.*\n    import java.util.*\n    import com.michelin.cio.hudson.plugins.rolestrategy.*\n    import com.synopsys.arc.jenkins.plugins.rolestrategy.*\n    import java.lang.reflect.*\n    import java.util.logging.*\n    import groovy.json.*\n    import groovy.json.JsonSlurper\n    import jenkins.model.Jenkins\n\n    if(!binding.hasVariable('github_realm')) {\n       github_realm = [:]\n    }\n\n    if(!(github_realm instanceof Map)) {\n       throw new Exception('github_realm must be a Map.')\n    }\n\n    String git_hub_auth_id  = \"3595c43658d4c3417c95\"\n    String git_hub_auth_secret  = \"06c9eed36e89369f860d0ac39aca64d6283ad74b\"\n    gitToken                   = \"ad9015cdfda2935a25cae144d9bf1ede5b731196\"\n\n    // gitToken = System.getenv().get(\"GIT_TOKEN\")\n\n\n\n    /**\n      Function to compare if the two global shared libraries are equal.\n     */\n    boolean isLibrariesEqual(List lib1, List lib2) {\n        //compare returns true or false\n        lib1.size() == lib2.size() \u0026\u0026\n        !(\n            false in [lib1, lib2].transpose().collect { l1, l2 -\u003e\n                def s1 = l1.retriever.scm\n                def s2 = l2.retriever.scm\n                l1.retriever.class == l2.retriever.class \u0026\u0026\n                l1.name == l2.name \u0026\u0026\n                l1.defaultVersion == l2.defaultVersion \u0026\u0026\n                l1.implicit == l2.implicit \u0026\u0026\n                l1.allowVersionOverride == l2.allowVersionOverride \u0026\u0026\n                l1.includeInChangesets == l2.includeInChangesets \u0026\u0026\n                s1.remote == s2.remote \u0026\u0026\n                s1.credentialsId == s2.credentialsId \u0026\u0026\n                s1.traits.size() == s2.traits.size() \u0026\u0026\n                !(\n                    false in [s1.traits, s2.traits].transpose().collect { t1, t2 -\u003e\n                        t1.class == t2.class\n                    }\n                )\n            }\n        )\n    }\n\n    pipeline_shared_libraries = [\n        'CommonLib': [\n            'defaultVersion': 'master',\n            'implicit': true,\n            'allowVersionOverride': true,\n            'includeInChangesets': false,\n            'scm': [\n                'remote': 'https://github.com/fuchicorp/jenkins-global-library.git',\n                'credentialsId': ''\n            ]\n        ]\n    ]\n\n\n    if(!binding.hasVariable('pipeline_shared_libraries')) {\n        pipeline_shared_libraries = [:]\n    }\n\n    if(!pipeline_shared_libraries in Map) {\n        throw new Exception(\"pipeline_shared_libraries must be an instance of Map but instead is instance of: \"+ pipeline_shared_libraries.getClass())\n    }\n\n    pipeline_shared_libraries = pipeline_shared_libraries as JSONObject\n\n    List libraries = [] as ArrayList\n    pipeline_shared_libraries.each { name, config -\u003e\n        if(name \u0026\u0026 config \u0026\u0026 config in Map \u0026\u0026 'scm' in config \u0026\u0026 config['scm'] in Map \u0026\u0026 'remote' in config['scm'] \u0026\u0026 config['scm'].optString('remote')) {\n            def scm = new GitSCMSource(config['scm'].optString('remote'))\n            scm.credentialsId = config['scm'].optString('credentialsId')\n            scm.traits = [new BranchDiscoveryTrait()]\n            def retriever = new SCMSourceRetriever(scm)\n            def library = new LibraryConfiguration(name, retriever)\n            library.defaultVersion = config.optString('defaultVersion')\n            library.implicit = config.optBoolean('implicit', false)\n            library.allowVersionOverride = config.optBoolean('allowVersionOverride', true)\n            library.includeInChangesets = config.optBoolean('includeInChangesets', true)\n            libraries \u003c\u003c library\n        }\n    }\n\n    def global_settings = Jenkins.instance.getExtensionList(GlobalLibraries.class)[0]\n\n    if(libraries \u0026\u0026 !isLibrariesEqual(global_settings.libraries, libraries)) {\n        global_settings.libraries = libraries\n        global_settings.save()\n        println 'Configured Pipeline Global Shared Libraries:\\n    ' + global_settings.libraries.collect { it.name }.join('\\n    ')\n    }\n    else {\n        if(pipeline_shared_libraries) {\n            println 'Nothing changed.  Pipeline Global Shared Libraries already configured.'\n        }\n        else {\n            println 'Nothing changed.  Skipped configuring Pipeline Global Shared Libraries because settings are empty.'\n        }\n    }\n\n\n    github_realm = github_realm as JSONObject\n\n    String githubWebUri = github_realm.optString('web_uri', GithubSecurityRealm.DEFAULT_WEB_URI)\n    String githubApiUri = github_realm.optString('api_uri', GithubSecurityRealm.DEFAULT_API_URI)\n    String oauthScopes = github_realm.optString('oauth_scopes', GithubSecurityRealm.DEFAULT_OAUTH_SCOPES)\n    String clientID = github_realm.optString('client_id', git_hub_auth_id)\n    String clientSecret = github_realm.optString('client_secret', git_hub_auth_secret)\n\n    if(!Jenkins.instance.isQuietingDown()) {\n       if(clientID \u0026\u0026 clientSecret) {\n           SecurityRealm github_realm = new GithubSecurityRealm(githubWebUri, githubApiUri, clientID, clientSecret, oauthScopes)\n           //check for equality, no need to modify the runtime if no settings changed\n           if(!github_realm.equals(Jenkins.instance.getSecurityRealm())) {\n               Jenkins.instance.setSecurityRealm(github_realm)\n               println 'Security realm configuration has changed.  Configured GitHub security realm.'\n           } else {\n               println 'Nothing changed.  GitHub security realm already configured.'\n           }\n       }\n    } else {\n       println 'Shutdown mode enabled.  Configure GitHub security realm SKIPPED.'\n    }\n\n\n\n\n    def env = System.getenv()\n    jsonSlurper = new JsonSlurper()\n\n\n    def getTeamId(teamName) {\n      /*\n       Function to find teams ID\n      */\n      def organization = \"fuchicorp\"\n      def teamsUrl = \"https://api.github.com/orgs/\" + organization + \"/teams\"\n      def teamId = null\n\n      def get = new URL(teamsUrl).openConnection();\n          get.setRequestMethod(\"GET\")\n          get.setRequestProperty(\"Authorization\", \"token \" + gitToken)\n          get.setRequestProperty(\"Content-Type\", \"application/json\")\n\n      def data = jsonSlurper.parseText(get.getInputStream().getText())\n\n      data.each() {\n        if (it.name.toLowerCase() == teamName.toLowerCase()) {\n          teamId = it.id\n        }\n      }\n\n      return teamId\n    }\n\n\n    def getTeamMembers(teamName) {\n\n      /*\n      Function to find team members from github\n      */\n\n      def getTeamId = getTeamId(teamName)\n      def memberUrl = \"https://api.github.com/teams/\"+ getTeamId +\"/members\"\n      def get = new URL(memberUrl).openConnection();\n          get.setRequestMethod(\"GET\")\n          get.setRequestProperty(\"Authorization\", \"token \" + gitToken)\n          get.setRequestProperty(\"Content-Type\", \"application/json\")\n\n      def object = jsonSlurper.parseText(get.getInputStream().getText())\n      return object.login\n\n    }\n\n    def devopTeam = getTeamMembers(\"devops\")\n    def orgMembers = getTeamMembers(\"members\")\n\n    /**\n     *                Roles\n     */\n\n    def globalRoleRead = \"read\"\n    def globalBuildRole = \"build\"\n    def globalRoleAdmin = \"admin\"\n\n    /**\n     *           Users and Groups\n     */\n    def access = [\n      admins: devopTeam,// Using DevOps team from FuchiCorp organization\n      builders: [],\n      readers: orgMembers\n    ]\n\n\n    if (env.AUTHZ_JSON_FILE)  {\n      println \"Get role authorizations from file \" + env.AUTHZ_JSON_FILE\n      File f = new File(env.AUTHZ_JSON_FILE)\n      def jsonSlurper = new JsonSlurper()\n      def jsonText = f.getText()\n      access = jsonSlurper.parseText( jsonText )\n    }\n    else if (env.AUTH_JSON_URL) {\n      println \"Get role authorizations from URL \" + env.AUTHZ_JSON_URL\n      URL jsonUrl = new URL(env.AUTHZ_JSON_URL);\n      access = new JsonSlurper().parse(jsonUrl);\n    }\n    else {\n      println \"Warning! Neither env.AUTHZ_JSON_FILE nor env.AUTHZ_JSON_URL specified!\"\n      println \"Granting anonymous admin access\"\n    }\n\n    /**\n     * ===================================\n     *\n     *           Permissions\n     *\n     * ===================================\n     */\n\n    // TODO: drive these from a config file\n    def adminPermissions = [\n    \"hudson.model.Hudson.Administer\",\n    \"hudson.model.Hudson.Read\"\n    ]\n\n    def readPermissions = [\n    \"hudson.model.Hudson.Read\",\n    \"hudson.model.Item.Discover\",\n    \"hudson.model.Item.Read\"\n    ]\n\n    def buildPermissions = [\n    \"hudson.model.Hudson.Read\",\n    \"hudson.model.Item.Build\",\n    \"hudson.model.Item.Cancel\",\n    \"hudson.model.Item.Read\",\n    \"hudson.model.Run.Replay\"\n    ]\n\n    def roleBasedAuthenticationStrategy = new RoleBasedAuthorizationStrategy()\n    Jenkins.instance.setAuthorizationStrategy(roleBasedAuthenticationStrategy)\n\n    Constructor[] constrs = Role.class.getConstructors();\n    for (Constructor\u003c?\u003e c : constrs) {\n      c.setAccessible(true);\n    }\n\n    // Make the method assignRole accessible\n    Method assignRoleMethod = RoleBasedAuthorizationStrategy.class.getDeclaredMethod(\"assignRole\", RoleType.class, Role.class, String.class);\n    assignRoleMethod.setAccessible(true);\n    println(\"HACK! changing visibility of RoleBasedAuthorizationStrategy.assignRole\")\n\n    /**\n     *           Permissions\n     */\n\n    Set\u003cPermission\u003e adminPermissionSet = new HashSet\u003cPermission\u003e();\n    adminPermissions.each { p -\u003e\n      def permission = Permission.fromId(p);\n      if (permission != null) {\n        adminPermissionSet.add(permission);\n      } else {\n        println(p + \" is not a valid permission ID (ignoring)\")\n      }\n    }\n\n    Set\u003cPermission\u003e buildPermissionSet = new HashSet\u003cPermission\u003e();\n    buildPermissions.each { p -\u003e\n      def permission = Permission.fromId(p);\n      if (permission != null) {\n        buildPermissionSet.add(permission);\n      } else {\n        println(p + \" is not a valid permission ID (ignoring)\")\n      }\n    }\n\n    Set\u003cPermission\u003e readPermissionSet = new HashSet\u003cPermission\u003e();\n    readPermissions.each { p -\u003e\n      def permission = Permission.fromId(p);\n      if (permission != null) {\n        readPermissionSet.add(permission);\n      } else {\n        println(p + \" is not a valid permission ID (ignoring)\")\n      }\n    }\n\n    /**\n     *      Permissions -\u003e Roles\n     */\n\n    // admins\n    Role adminRole = new Role(globalRoleAdmin, adminPermissionSet);\n    roleBasedAuthenticationStrategy.addRole(RoleType.Global, adminRole);\n\n    // builders\n    Role buildersRole = new Role(globalBuildRole, buildPermissionSet);\n    roleBasedAuthenticationStrategy.addRole(RoleType.Global, buildersRole);\n\n    // anonymous read\n    Role readRole = new Role(globalRoleRead, readPermissionSet);\n    roleBasedAuthenticationStrategy.addRole(RoleType.Global, readRole);\n\n    /**\n     *      Roles -\u003e Groups/Users\n     */\n\n    access.admins.each { l -\u003e\n      println(\"Granting admin to \" + l)\n      roleBasedAuthenticationStrategy.assignRole(RoleType.Global, adminRole, l);\n    }\n\n    access.builders.each { l -\u003e\n      println(\"Granting builder to \" + l)\n      roleBasedAuthenticationStrategy.assignRole(RoleType.Global, buildersRole, l);\n    }\n\n    access.readers.each { l -\u003e\n      println(\"Granting read to \" + l)\n      roleBasedAuthenticationStrategy.assignRole(RoleType.Global, readRole, l);\n    }\n\n    Jenkins.instance.save()\n  InstallPlugins:\n  - kubernetes:1.18.2\n  - workflow-job:2.33\n  - workflow-aggregator:2.6\n  - credentials-binding:1.19\n  - git:3.11.0\n  - docker-build-step:2.4\n  - oki-docki:1.1\n  - slack:2.34\n  - role-strategy:2.14\n  - github-oauth:0.33\n  - authorize-project:1.3.0\n  JavaOpts: -Xms1g -Xmx1024m\n  Jobs: |-\n    academy-fuchicorp-build:\n     |\n      \u003corg.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject plugin=\"workflow-multibranch@2.21\"\u003e\n      \u003cscript type=\"text/javascript\" charset=\"utf-8\" id=\"zm-extension\"/\u003e\n      \u003cactions/\u003e\n      \u003cdescription/\u003e\n      \u003cproperties\u003e\n      \u003corg.jenkinsci.plugins.pipeline.modeldefinition.config.FolderConfig plugin=\"pipeline-model-definition@1.3.9\"\u003e\n      \u003cdockerLabel/\u003e\n      \u003cregistry plugin=\"docker-commons@1.15\"/\u003e\n      \u003c/org.jenkinsci.plugins.pipeline.modeldefinition.config.FolderConfig\u003e\n      \u003c/properties\u003e\n      \u003cfolderViews class=\"jenkins.branch.MultiBranchProjectViewHolder\" plugin=\"branch-api@2.5.4\"\u003e\n      \u003cowner class=\"org.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject\" reference=\"../..\"/\u003e\n      \u003c/folderViews\u003e\n      \u003chealthMetrics\u003e\n      \u003ccom.cloudbees.hudson.plugins.folder.health.WorstChildHealthMetric plugin=\"cloudbees-folder@6.9\"\u003e\n      \u003cnonRecursive\u003efalse\u003c/nonRecursive\u003e\n      \u003c/com.cloudbees.hudson.plugins.folder.health.WorstChildHealthMetric\u003e\n      \u003c/healthMetrics\u003e\n      \u003cicon class=\"jenkins.branch.MetadataActionFolderIcon\" plugin=\"branch-api@2.5.4\"\u003e\n      \u003cowner class=\"org.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject\" reference=\"../..\"/\u003e\n      \u003c/icon\u003e\n      \u003corphanedItemStrategy class=\"com.cloudbees.hudson.plugins.folder.computed.DefaultOrphanedItemStrategy\" plugin=\"cloudbees-folder@6.9\"\u003e\n      \u003cpruneDeadBranches\u003etrue\u003c/pruneDeadBranches\u003e\n      \u003cdaysToKeep\u003e-1\u003c/daysToKeep\u003e\n      \u003cnumToKeep\u003e-1\u003c/numToKeep\u003e\n      \u003c/orphanedItemStrategy\u003e\n      \u003ctriggers\u003e\n      \u003ccom.cloudbees.hudson.plugins.folder.computed.PeriodicFolderTrigger plugin=\"cloudbees-folder@6.9\"\u003e\n      \u003cspec\u003e* * * * *\u003c/spec\u003e\n      \u003cinterval\u003e120000\u003c/interval\u003e\n      \u003c/com.cloudbees.hudson.plugins.folder.computed.PeriodicFolderTrigger\u003e\n      \u003c/triggers\u003e\n      \u003cdisabled\u003efalse\u003c/disabled\u003e\n      \u003csources class=\"jenkins.branch.MultiBranchProject$BranchSourceList\" plugin=\"branch-api@2.5.4\"\u003e\n      \u003cdata\u003e\n      \u003cjenkins.branch.BranchSource\u003e\n      \u003csource class=\"jenkins.plugins.git.GitSCMSource\" plugin=\"git@3.11.0\"\u003e\n      \u003cid\u003e0a162395-4438-4b2e-8d7d-5e3b8f7d247c\u003c/id\u003e\n      \u003cremote\u003ehttps://github.com/fuchicorp/webplatform.git\u003c/remote\u003e\n      \u003ccredentialsId/\u003e\n      \u003ctraits\u003e\n      \u003cjenkins.plugins.git.traits.BranchDiscoveryTrait/\u003e\n      \u003c/traits\u003e\n      \u003c/source\u003e\n      \u003cstrategy class=\"jenkins.branch.DefaultBranchPropertyStrategy\"\u003e\n      \u003cproperties class=\"empty-list\"/\u003e\n      \u003c/strategy\u003e\n      \u003c/jenkins.branch.BranchSource\u003e\n      \u003c/data\u003e\n      \u003cowner class=\"org.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject\" reference=\"../..\"/\u003e\n      \u003c/sources\u003e\n      \u003cfactory class=\"org.jenkinsci.plugins.workflow.multibranch.WorkflowBranchProjectFactory\"\u003e\n      \u003cowner class=\"org.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject\" reference=\"../..\"/\u003e\n      \u003cscriptPath\u003eJenkinsBuilder.groovy\u003c/scriptPath\u003e\n      \u003c/factory\u003e\n      \u003c/org.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject\u003e\n\n    academy-fuchicorp-deploy:\n     |\n      \u003corg.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject plugin=\"workflow-multibranch@2.21\"\u003e\n      \u003cscript type=\"text/javascript\" charset=\"utf-8\" id=\"zm-extension\"/\u003e\n      \u003cactions/\u003e\n      \u003cdescription/\u003e\n      \u003cproperties\u003e\n      \u003corg.csanchez.jenkins.plugins.kubernetes.KubernetesFolderProperty plugin=\"kubernetes@1.18.2\"\u003e\n      \u003cpermittedClouds/\u003e\n      \u003c/org.csanchez.jenkins.plugins.kubernetes.KubernetesFolderProperty\u003e\n      \u003corg.jenkinsci.plugins.pipeline.modeldefinition.config.FolderConfig plugin=\"pipeline-model-definition@1.3.9\"\u003e\n      \u003cdockerLabel/\u003e\n      \u003cregistry plugin=\"docker-commons@1.15\"/\u003e\n      \u003c/org.jenkinsci.plugins.pipeline.modeldefinition.config.FolderConfig\u003e\n      \u003c/properties\u003e\n      \u003cfolderViews class=\"jenkins.branch.MultiBranchProjectViewHolder\" plugin=\"branch-api@2.5.4\"\u003e\n      \u003cowner class=\"org.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject\" reference=\"../..\"/\u003e\n      \u003c/folderViews\u003e\n      \u003chealthMetrics\u003e\n      \u003ccom.cloudbees.hudson.plugins.folder.health.WorstChildHealthMetric plugin=\"cloudbees-folder@6.9\"\u003e\n      \u003cnonRecursive\u003efalse\u003c/nonRecursive\u003e\n      \u003c/com.cloudbees.hudson.plugins.folder.health.WorstChildHealthMetric\u003e\n      \u003c/healthMetrics\u003e\n      \u003cicon class=\"jenkins.branch.MetadataActionFolderIcon\" plugin=\"branch-api@2.5.4\"\u003e\n      \u003cowner class=\"org.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject\" reference=\"../..\"/\u003e\n      \u003c/icon\u003e\n      \u003corphanedItemStrategy class=\"com.cloudbees.hudson.plugins.folder.computed.DefaultOrphanedItemStrategy\" plugin=\"cloudbees-folder@6.9\"\u003e\n      \u003cpruneDeadBranches\u003etrue\u003c/pruneDeadBranches\u003e\n      \u003cdaysToKeep\u003e-1\u003c/daysToKeep\u003e\n      \u003cnumToKeep\u003e-1\u003c/numToKeep\u003e\n      \u003c/orphanedItemStrategy\u003e\n      \u003ctriggers\u003e\n      \u003ccom.cloudbees.hudson.plugins.folder.computed.PeriodicFolderTrigger plugin=\"cloudbees-folder@6.9\"\u003e\n      \u003cspec\u003e* * * * *\u003c/spec\u003e\n      \u003cinterval\u003e120000\u003c/interval\u003e\n      \u003c/com.cloudbees.hudson.plugins.folder.computed.PeriodicFolderTrigger\u003e\n      \u003c/triggers\u003e\n      \u003cdisabled\u003efalse\u003c/disabled\u003e\n      \u003csources class=\"jenkins.branch.MultiBranchProject$BranchSourceList\" plugin=\"branch-api@2.5.4\"\u003e\n      \u003cdata\u003e\n      \u003cjenkins.branch.BranchSource\u003e\n      \u003csource class=\"jenkins.plugins.git.GitSCMSource\" plugin=\"git@3.11.0\"\u003e\n      \u003cid\u003e0a162395-4438-4b2e-8d7d-5e3b8f7d247c\u003c/id\u003e\n      \u003cremote\u003ehttps://github.com/fuchicorp/webplatform.git\u003c/remote\u003e\n      \u003ccredentialsId/\u003e\n      \u003ctraits\u003e\n      \u003cjenkins.plugins.git.traits.BranchDiscoveryTrait/\u003e\n      \u003c/traits\u003e\n      \u003c/source\u003e\n      \u003cstrategy class=\"jenkins.branch.DefaultBranchPropertyStrategy\"\u003e\n      \u003cproperties class=\"empty-list\"/\u003e\n      \u003c/strategy\u003e\n      \u003c/jenkins.branch.BranchSource\u003e\n      \u003c/data\u003e\n      \u003cowner class=\"org.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject\" reference=\"../..\"/\u003e\n      \u003c/sources\u003e\n      \u003cfactory class=\"org.jenkinsci.plugins.workflow.multibranch.WorkflowBranchProjectFactory\"\u003e\n      \u003cowner class=\"org.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject\" reference=\"../..\"/\u003e\n      \u003cscriptPath\u003eJenkinsDeployer.groovy\u003c/scriptPath\u003e\n      \u003c/factory\u003e\n      \u003c/org.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject\u003e\n  LoadBalancerSourceRanges:\n  - 0.0.0.0/0\n  Memory: 1G\n  MemoryLimit: 2G\n  Name: jenkins-master\n  NodeSelector: {}\n  ScriptApproval:\n  - method com.michelin.cio.hudson.plugins.rolestrategy.RoleBasedAuthorizationStrategy\n    addRole\n  - method com.michelin.cio.hudson.plugins.rolestrategy.RoleBasedAuthorizationStrategy\n    addRole java.lang.String com.michelin.cio.hudson.plugins.rolestrategy.Role\n  - method com.michelin.cio.hudson.plugins.rolestrategy.RoleBasedAuthorizationStrategy\n    assignRole java.lang.String com.michelin.cio.hudson.plugins.rolestrategy.Role\n    java.lang.String\n  - method hudson.model.Saveable save\n  - method java.lang.Class getConstructors\n  - method java.net.HttpURLConnection setRequestMethod java.lang.String\n  - method java.net.URL openConnection\n  - method java.net.URLConnection getInputStream\n  - method java.net.URLConnection setRequestProperty java.lang.String java.lang.String\n  - method jenkins.model.Jenkins getAuthorizationStrategy\n  - method jenkins.model.Jenkins getSecurityRealm\n  - method jenkins.model.Jenkins isQuietingDown\n  - method jenkins.model.Jenkins setAuthorizationStrategy hudson.security.AuthorizationStrategy\n  - method jenkins.model.Jenkins setSecurityRealm hudson.security.SecurityRealm\n  - method net.sf.json.JSONObject optString java.lang.String java.lang.String\n  - new com.michelin.cio.hudson.plugins.rolestrategy.RoleBasedAuthorizationStrategy\n  - new net.sf.json.JSONObject\n  - new org.jenkinsci.plugins.GithubSecurityRealm java.lang.String java.lang.String\n    java.lang.String java.lang.String java.lang.String\n  - staticField com.michelin.cio.hudson.plugins.rolestrategy.RoleBasedAuthorizationStrategy\n    PROJECT\n  - staticField org.jenkinsci.plugins.GithubSecurityRealm DEFAULT_API_URI\n  - staticField org.jenkinsci.plugins.GithubSecurityRealm DEFAULT_OAUTH_SCOPES\n  - staticField org.jenkinsci.plugins.GithubSecurityRealm DEFAULT_WEB_URI\n  - staticMethod hudson.model.Hudson getInstance\n  - staticMethod java.lang.System getenv\n  - staticMethod jenkins.model.Jenkins getInstance\n  - staticMethod org.codehaus.groovy.runtime.DefaultGroovyMethods getText java.io.InputStream\n  - method java.lang.reflect.AccessibleObject setAccessible boolean\n  - staticMethod java.lang.System getenv java.lang.String\n  - method java.lang.Class getDeclaredMethod java.lang.String java.lang.Class[]\n  ServiceAnnotations: null\n  ServicePort: 443\n  ServiceType: ClusterIP\n  SlaveListenerPort: 50000\n  SlaveListenerServiceAnnotations: {}\n  SlaveListenerServiceType: ClusterIP\n  Tolerations: {}\n  UseSecurity: true\n  cluster_sub_domain: fuchicorp.com\nNetworkPolicy:\n  ApiVersion: extensions/v1beta1\n  Enabled: false\nNewRelic:\n  LicenseKey: \"\"\nPersistence:\n  AccessMode: ReadWriteOnce\n  Annotations: {}\n  Enabled: true\n  Size: 10Gi\n  StorageClass: standard\n  mounts: null\n  volumes: null\nrbac:\n  apiVersion: v1beta1\n  install: true\n  roleRef: cluster-admin\n  serviceAccountName: jenkins\n",
                            "metadata.0.version": "0.16.1",
                            "name": "jenkins-fuchicorp",
                            "namespace": "tools",
                            "recreate_pods": "false",
                            "reuse": "false",
                            "reuse_values": "false",
                            "status": "DEPLOYED",
                            "timeout": "300",
                            "values.#": "1",
                            "values.0": "# Default values for jenkins.\n# This is a YAML-formatted file.\n# Declare name/value pairs to be passed into your templates.\n# name: value\n\n## Overrides for generated resource names\n# See templates/_helpers.tpl\n# nameOverride:\n# fullnameOverride:\n\n#Common\n\nCronSchedule: \"*/30 * * * *\"\n\nMaster:\n  Name: jenkins-master\n  Image: \"jenkins/jenkins\"\n  ImageTag: \"lts\"\n  ImagePullPolicy: \"Always\"\n# ImagePullSecret: jenkins\n  Component: \"jenkins-master\"\n  UseSecurity: true\n  AdminUser: 'admin'\n  AdminPassword: 'B1JsVZtr4rvJfmnnafqRjTEKLsT'\n  Cpu: \"1\"\n  Memory: \"1G\"\n  CpuLimit: \"2\"\n  MemoryLimit: \"2G\"\n  Affinity:\n    nodeAffinity:\n      preferredDuringSchedulingIgnoredDuringExecution:\n      - weight: 1\n        preference:\n          matchExpressions:\n          - key: jenkinsPreferred\n            operator: In\n            values:\n            - \"true\"\n\n  # Environment variables that get added to the init container (useful for e.g. http_proxy)\n  # InitContainerEnv:\n  #   - name: GIT_TOKEN\n  #     value: ad9015cdfda2935a25cae144d9bf1ede5b731196\n  ContainerEnv:\n    - name: GIT_TOKEN\n      value: ad9015cdfda2935a25cae144d9bf1ede5b731196\n\n    - name: JENKINS_GITHUB_AUTH_ID\n      value: 3595c43658d4c3417c95\n\n    - name: JENKINS_GITHUB_AUTH_SECRET\n      value: 06c9eed36e89369f860d0ac39aca64d6283ad74b\n\n  # Set min/max heap here if needed with:\n  JavaOpts: \"-Xms1g -Xmx1024m\"\n  # JenkinsOpts: \"\"\n  # JenkinsUriPrefix: \"/jenkins\"\n  # Set RunAsUser to 1000 to let Jenkins run as non-root user 'jenkins' which exists in 'jenkins/jenkins' docker image.\n  # When setting RunAsUser to a different value than 0 also set FsGroup to the same value:\n  # RunAsUser: \u003cdefaults to 0\u003e\n  # FsGroup: \u003cwill be omitted in deployment if RunAsUser is 0\u003e\n  ServicePort: 443\n  # For minikube, set this to NodePort, elsewhere use LoadBalancer\n  # Use ClusterIP if your setup includes ingress controller\n  ServiceType: ClusterIP\n  # Master Service annotations\n  ServiceAnnotations:\n    # service.beta.kubernetes.io/aws-load-balancer-backend-protocol: http\n    # nginx.ingress.kubernetes.io/secure-backends: \"true\"\n    # service.beta.kubernetes.io/aws-load-balancer-additional-resource-tags:\n    # service.beta.kubernetes.io/aws-load-balancer-backend-protocol: 'http'\n    # service.beta.kubernetes.io/aws-load-balancer-ssl-cert: '\\$\\{ssl_arn\\}'\n    # service.beta.kubernetes.io/aws-load-balancer-internal: '0.0.0.0/0'\n  #   service.beta.kubernetes.io/aws-load-balancer-backend-protocol: https\n  # Used to create Ingress record (should used with ServiceType: ClusterIP)\n  HostName: jenkins.fuchicorp.com\n  HostNameAlias: builder.fuchicorp.com\n  cluster_sub_domain: fuchicorp.com\n  # NodePort: \u003cto set explicitly, choose port between 30000-32767\n  ContainerPort: 8080\n  # Enable Kubernetes Liveness and Readiness Probes\n  HealthProbes: true\n  HealthProbesTimeout: 100\n  HealthProbeLivenessFailureThreshold: 12\n  SlaveListenerPort: 50000\n  DisabledAgentProtocols:\n    - JNLP-connect\n    - JNLP2-connect\n  CSRF:\n    DefaultCrumbIssuer:\n      Enabled: true\n      ProxyCompatability: true\n  CLI: true\n  # Kubernetes service type for the JNLP slave service\n  # SETTING THIS TO \"LoadBalancer\" IS A HUGE SECURITY RISK: https://github.com/kubernetes/charts/issues/1341\n  SlaveListenerServiceType: ClusterIP\n  SlaveListenerServiceAnnotations: {}\n  LoadBalancerSourceRanges:\n  - 0.0.0.0/0\n  # Optionally assign a known public LB IP\n  # LoadBalancerIP: 1.2.3.4\n  # Optionally configure a JMX port\n  # requires additional JavaOpts, ie\n  # JavaOpts: \u003e\n  #   -Dcom.sun.management.jmxremote.port=4000\n  #   -Dcom.sun.management.jmxremote.authenticate=false\n  #   -Dcom.sun.management.jmxremote.ssl=false\n  # JMXPort: 4000\n  # Jenkins Global Environment Variables to be created during Jenkins master initial setup\n\n  # GlobalEnvVariables:\n  #   - name: GIT_TOKEN\n  #     value: ad9015cdfda2935a25cae144d9bf1ede5b731196\n  #   - name: git_server_host\n  #     value: \"coderepository.mcd.com\"\n  #   - name: sonar_host_url\n  #     value: \"https://sonarqube.sharedtools.vet-tools.digitalecp.mcd.com\"\n  #\n  CustomConfigMap: false\n  # Node labels and tolerations for pod assignment\n  # ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector\n  # ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#taints-and-tolerations-beta-feature\n  NodeSelector: {}\n  Tolerations: {}\n  Ingress:\n    ApiVersion: extensions/v1beta1\n    Annotations:\n      kubernetes.io/ingress.class: nginx\n      certmanager.k8s.io/cluster-issuer: letsencrypt-fuchicorp-prod\n    # kubernetes.io/tls-acme: \"true\"\n    TLS:\n    - hosts:\n      - jenkins.fuchicorp.com\n      secretName: \"jenkins-letsencrypt-fuchicorp-prod\"\n  # List of plugins to be install during Jenkins master start\n  InstallPlugins:\n    - kubernetes:1.18.2\n    - workflow-job:2.33\n    - workflow-aggregator:2.6\n    - credentials-binding:1.19\n    - git:3.11.0\n    - docker-build-step:2.4\n    - oki-docki:1.1\n    - slack:2.34\n    - role-strategy:2.14\n    - github-oauth:0.33\n    - authorize-project:1.3.0\n  # Used to approve a list of groovy functions in pipelines used the script-security plugin. Can be viewed under /scriptApproval\n  ScriptApproval:\n    - \"method com.michelin.cio.hudson.plugins.rolestrategy.RoleBasedAuthorizationStrategy addRole\"\n    - \"method com.michelin.cio.hudson.plugins.rolestrategy.RoleBasedAuthorizationStrategy addRole java.lang.String com.michelin.cio.hudson.plugins.rolestrategy.Role\"\n    - \"method com.michelin.cio.hudson.plugins.rolestrategy.RoleBasedAuthorizationStrategy assignRole java.lang.String com.michelin.cio.hudson.plugins.rolestrategy.Role java.lang.String\"\n    - \"method hudson.model.Saveable save\"\n    - \"method java.lang.Class getConstructors\"\n    - \"method java.net.HttpURLConnection setRequestMethod java.lang.String\"\n    - \"method java.net.URL openConnection\"\n    - \"method java.net.URLConnection getInputStream\"\n    - \"method java.net.URLConnection setRequestProperty java.lang.String java.lang.String\"\n    - \"method jenkins.model.Jenkins getAuthorizationStrategy\"\n    - \"method jenkins.model.Jenkins getSecurityRealm\"\n    - \"method jenkins.model.Jenkins isQuietingDown\"\n    - \"method jenkins.model.Jenkins setAuthorizationStrategy hudson.security.AuthorizationStrategy\"\n    - \"method jenkins.model.Jenkins setSecurityRealm hudson.security.SecurityRealm\"\n    - \"method net.sf.json.JSONObject optString java.lang.String java.lang.String\"\n    - \"new com.michelin.cio.hudson.plugins.rolestrategy.RoleBasedAuthorizationStrategy\"\n    - \"new net.sf.json.JSONObject\"\n    - \"new org.jenkinsci.plugins.GithubSecurityRealm java.lang.String java.lang.String java.lang.String java.lang.String java.lang.String\"\n    - \"staticField com.michelin.cio.hudson.plugins.rolestrategy.RoleBasedAuthorizationStrategy PROJECT\"\n    - \"staticField org.jenkinsci.plugins.GithubSecurityRealm DEFAULT_API_URI\"\n    - \"staticField org.jenkinsci.plugins.GithubSecurityRealm DEFAULT_OAUTH_SCOPES\"\n    - \"staticField org.jenkinsci.plugins.GithubSecurityRealm DEFAULT_WEB_URI\"\n    - \"staticMethod hudson.model.Hudson getInstance\"\n    - \"staticMethod java.lang.System getenv\"\n    - \"staticMethod jenkins.model.Jenkins getInstance\"\n    - \"staticMethod org.codehaus.groovy.runtime.DefaultGroovyMethods getText java.io.InputStream\"\n    - \"method java.lang.reflect.AccessibleObject setAccessible boolean\"\n    - \"staticMethod java.lang.System getenv java.lang.String\"\n    - \"method java.lang.Class getDeclaredMethod java.lang.String java.lang.Class[]\"\n\n  # List of groovy init scripts to be executed during Jenkins master start\n  InitScripts:\n   - |\n      import jenkins.model.Jenkins\n      import hudson.security.SecurityRealm\n      import org.jenkinsci.plugins.GithubSecurityRealm\n      import jenkins.plugins.git.GitSCMSource\n      import jenkins.plugins.git.traits.BranchDiscoveryTrait\n      import org.jenkinsci.plugins.workflow.libs.GlobalLibraries\n      import org.jenkinsci.plugins.workflow.libs.LibraryConfiguration\n      import org.jenkinsci.plugins.workflow.libs.SCMSourceRetriever\n      import net.sf.json.JSONObject\n      import hudson.*\n      import hudson.security.*\n      import jenkins.model.*\n      import java.util.*\n      import com.michelin.cio.hudson.plugins.rolestrategy.*\n      import com.synopsys.arc.jenkins.plugins.rolestrategy.*\n      import java.lang.reflect.*\n      import java.util.logging.*\n      import groovy.json.*\n      import groovy.json.JsonSlurper\n      import jenkins.model.Jenkins\n\n      if(!binding.hasVariable('github_realm')) {\n         github_realm = [:]\n      }\n\n      if(!(github_realm instanceof Map)) {\n         throw new Exception('github_realm must be a Map.')\n      }\n\n      String git_hub_auth_id  = \"3595c43658d4c3417c95\"\n      String git_hub_auth_secret  = \"06c9eed36e89369f860d0ac39aca64d6283ad74b\"\n      gitToken                   = \"ad9015cdfda2935a25cae144d9bf1ede5b731196\"\n\n      // gitToken = System.getenv().get(\"GIT_TOKEN\")\n\n\n\n      /**\n        Function to compare if the two global shared libraries are equal.\n       */\n      boolean isLibrariesEqual(List lib1, List lib2) {\n          //compare returns true or false\n          lib1.size() == lib2.size() \u0026\u0026\n          !(\n              false in [lib1, lib2].transpose().collect { l1, l2 -\u003e\n                  def s1 = l1.retriever.scm\n                  def s2 = l2.retriever.scm\n                  l1.retriever.class == l2.retriever.class \u0026\u0026\n                  l1.name == l2.name \u0026\u0026\n                  l1.defaultVersion == l2.defaultVersion \u0026\u0026\n                  l1.implicit == l2.implicit \u0026\u0026\n                  l1.allowVersionOverride == l2.allowVersionOverride \u0026\u0026\n                  l1.includeInChangesets == l2.includeInChangesets \u0026\u0026\n                  s1.remote == s2.remote \u0026\u0026\n                  s1.credentialsId == s2.credentialsId \u0026\u0026\n                  s1.traits.size() == s2.traits.size() \u0026\u0026\n                  !(\n                      false in [s1.traits, s2.traits].transpose().collect { t1, t2 -\u003e\n                          t1.class == t2.class\n                      }\n                  )\n              }\n          )\n      }\n\n      pipeline_shared_libraries = [\n          'CommonLib': [\n              'defaultVersion': 'master',\n              'implicit': true,\n              'allowVersionOverride': true,\n              'includeInChangesets': false,\n              'scm': [\n                  'remote': 'https://github.com/fuchicorp/jenkins-global-library.git',\n                  'credentialsId': ''\n              ]\n          ]\n      ]\n\n\n      if(!binding.hasVariable('pipeline_shared_libraries')) {\n          pipeline_shared_libraries = [:]\n      }\n\n      if(!pipeline_shared_libraries in Map) {\n          throw new Exception(\"pipeline_shared_libraries must be an instance of Map but instead is instance of: \"+ pipeline_shared_libraries.getClass())\n      }\n\n      pipeline_shared_libraries = pipeline_shared_libraries as JSONObject\n\n      List libraries = [] as ArrayList\n      pipeline_shared_libraries.each { name, config -\u003e\n          if(name \u0026\u0026 config \u0026\u0026 config in Map \u0026\u0026 'scm' in config \u0026\u0026 config['scm'] in Map \u0026\u0026 'remote' in config['scm'] \u0026\u0026 config['scm'].optString('remote')) {\n              def scm = new GitSCMSource(config['scm'].optString('remote'))\n              scm.credentialsId = config['scm'].optString('credentialsId')\n              scm.traits = [new BranchDiscoveryTrait()]\n              def retriever = new SCMSourceRetriever(scm)\n              def library = new LibraryConfiguration(name, retriever)\n              library.defaultVersion = config.optString('defaultVersion')\n              library.implicit = config.optBoolean('implicit', false)\n              library.allowVersionOverride = config.optBoolean('allowVersionOverride', true)\n              library.includeInChangesets = config.optBoolean('includeInChangesets', true)\n              libraries \u003c\u003c library\n          }\n      }\n\n      def global_settings = Jenkins.instance.getExtensionList(GlobalLibraries.class)[0]\n\n      if(libraries \u0026\u0026 !isLibrariesEqual(global_settings.libraries, libraries)) {\n          global_settings.libraries = libraries\n          global_settings.save()\n          println 'Configured Pipeline Global Shared Libraries:\\n    ' + global_settings.libraries.collect { it.name }.join('\\n    ')\n      }\n      else {\n          if(pipeline_shared_libraries) {\n              println 'Nothing changed.  Pipeline Global Shared Libraries already configured.'\n          }\n          else {\n              println 'Nothing changed.  Skipped configuring Pipeline Global Shared Libraries because settings are empty.'\n          }\n      }\n\n\n      github_realm = github_realm as JSONObject\n\n      String githubWebUri = github_realm.optString('web_uri', GithubSecurityRealm.DEFAULT_WEB_URI)\n      String githubApiUri = github_realm.optString('api_uri', GithubSecurityRealm.DEFAULT_API_URI)\n      String oauthScopes = github_realm.optString('oauth_scopes', GithubSecurityRealm.DEFAULT_OAUTH_SCOPES)\n      String clientID = github_realm.optString('client_id', git_hub_auth_id)\n      String clientSecret = github_realm.optString('client_secret', git_hub_auth_secret)\n\n      if(!Jenkins.instance.isQuietingDown()) {\n         if(clientID \u0026\u0026 clientSecret) {\n             SecurityRealm github_realm = new GithubSecurityRealm(githubWebUri, githubApiUri, clientID, clientSecret, oauthScopes)\n             //check for equality, no need to modify the runtime if no settings changed\n             if(!github_realm.equals(Jenkins.instance.getSecurityRealm())) {\n                 Jenkins.instance.setSecurityRealm(github_realm)\n                 println 'Security realm configuration has changed.  Configured GitHub security realm.'\n             } else {\n                 println 'Nothing changed.  GitHub security realm already configured.'\n             }\n         }\n      } else {\n         println 'Shutdown mode enabled.  Configure GitHub security realm SKIPPED.'\n      }\n\n\n\n\n      def env = System.getenv()\n      jsonSlurper = new JsonSlurper()\n\n\n      def getTeamId(teamName) {\n        /*\n         Function to find teams ID\n        */\n        def organization = \"fuchicorp\"\n        def teamsUrl = \"https://api.github.com/orgs/\" + organization + \"/teams\"\n        def teamId = null\n\n        def get = new URL(teamsUrl).openConnection();\n            get.setRequestMethod(\"GET\")\n            get.setRequestProperty(\"Authorization\", \"token \" + gitToken)\n            get.setRequestProperty(\"Content-Type\", \"application/json\")\n\n        def data = jsonSlurper.parseText(get.getInputStream().getText())\n\n        data.each() {\n          if (it.name.toLowerCase() == teamName.toLowerCase()) {\n            teamId = it.id\n          }\n        }\n\n        return teamId\n      }\n\n\n      def getTeamMembers(teamName) {\n\n        /*\n        Function to find team members from github\n        */\n\n        def getTeamId = getTeamId(teamName)\n        def memberUrl = \"https://api.github.com/teams/\"+ getTeamId +\"/members\"\n        def get = new URL(memberUrl).openConnection();\n            get.setRequestMethod(\"GET\")\n            get.setRequestProperty(\"Authorization\", \"token \" + gitToken)\n            get.setRequestProperty(\"Content-Type\", \"application/json\")\n\n        def object = jsonSlurper.parseText(get.getInputStream().getText())\n        return object.login\n\n      }\n\n      def devopTeam = getTeamMembers(\"devops\")\n      def orgMembers = getTeamMembers(\"members\")\n\n      /**\n       *                Roles\n       */\n\n      def globalRoleRead = \"read\"\n      def globalBuildRole = \"build\"\n      def globalRoleAdmin = \"admin\"\n\n      /**\n       *           Users and Groups\n       */\n      def access = [\n        admins: devopTeam,// Using DevOps team from FuchiCorp organization\n        builders: [],\n        readers: orgMembers\n      ]\n\n\n      if (env.AUTHZ_JSON_FILE)  {\n        println \"Get role authorizations from file \" + env.AUTHZ_JSON_FILE\n        File f = new File(env.AUTHZ_JSON_FILE)\n        def jsonSlurper = new JsonSlurper()\n        def jsonText = f.getText()\n        access = jsonSlurper.parseText( jsonText )\n      }\n      else if (env.AUTH_JSON_URL) {\n        println \"Get role authorizations from URL \" + env.AUTHZ_JSON_URL\n        URL jsonUrl = new URL(env.AUTHZ_JSON_URL);\n        access = new JsonSlurper().parse(jsonUrl);\n      }\n      else {\n        println \"Warning! Neither env.AUTHZ_JSON_FILE nor env.AUTHZ_JSON_URL specified!\"\n        println \"Granting anonymous admin access\"\n      }\n\n      /**\n       * ===================================\n       *\n       *           Permissions\n       *\n       * ===================================\n       */\n\n      // TODO: drive these from a config file\n      def adminPermissions = [\n      \"hudson.model.Hudson.Administer\",\n      \"hudson.model.Hudson.Read\"\n      ]\n\n      def readPermissions = [\n      \"hudson.model.Hudson.Read\",\n      \"hudson.model.Item.Discover\",\n      \"hudson.model.Item.Read\"\n      ]\n\n      def buildPermissions = [\n      \"hudson.model.Hudson.Read\",\n      \"hudson.model.Item.Build\",\n      \"hudson.model.Item.Cancel\",\n      \"hudson.model.Item.Read\",\n      \"hudson.model.Run.Replay\"\n      ]\n\n      def roleBasedAuthenticationStrategy = new RoleBasedAuthorizationStrategy()\n      Jenkins.instance.setAuthorizationStrategy(roleBasedAuthenticationStrategy)\n\n      Constructor[] constrs = Role.class.getConstructors();\n      for (Constructor\u003c?\u003e c : constrs) {\n        c.setAccessible(true);\n      }\n\n      // Make the method assignRole accessible\n      Method assignRoleMethod = RoleBasedAuthorizationStrategy.class.getDeclaredMethod(\"assignRole\", RoleType.class, Role.class, String.class);\n      assignRoleMethod.setAccessible(true);\n      println(\"HACK! changing visibility of RoleBasedAuthorizationStrategy.assignRole\")\n\n      /**\n       *           Permissions\n       */\n\n      Set\u003cPermission\u003e adminPermissionSet = new HashSet\u003cPermission\u003e();\n      adminPermissions.each { p -\u003e\n        def permission = Permission.fromId(p);\n        if (permission != null) {\n          adminPermissionSet.add(permission);\n        } else {\n          println(p + \" is not a valid permission ID (ignoring)\")\n        }\n      }\n\n      Set\u003cPermission\u003e buildPermissionSet = new HashSet\u003cPermission\u003e();\n      buildPermissions.each { p -\u003e\n        def permission = Permission.fromId(p);\n        if (permission != null) {\n          buildPermissionSet.add(permission);\n        } else {\n          println(p + \" is not a valid permission ID (ignoring)\")\n        }\n      }\n\n      Set\u003cPermission\u003e readPermissionSet = new HashSet\u003cPermission\u003e();\n      readPermissions.each { p -\u003e\n        def permission = Permission.fromId(p);\n        if (permission != null) {\n          readPermissionSet.add(permission);\n        } else {\n          println(p + \" is not a valid permission ID (ignoring)\")\n        }\n      }\n\n      /**\n       *      Permissions -\u003e Roles\n       */\n\n      // admins\n      Role adminRole = new Role(globalRoleAdmin, adminPermissionSet);\n      roleBasedAuthenticationStrategy.addRole(RoleType.Global, adminRole);\n\n      // builders\n      Role buildersRole = new Role(globalBuildRole, buildPermissionSet);\n      roleBasedAuthenticationStrategy.addRole(RoleType.Global, buildersRole);\n\n      // anonymous read\n      Role readRole = new Role(globalRoleRead, readPermissionSet);\n      roleBasedAuthenticationStrategy.addRole(RoleType.Global, readRole);\n\n      /**\n       *      Roles -\u003e Groups/Users\n       */\n\n      access.admins.each { l -\u003e\n        println(\"Granting admin to \" + l)\n        roleBasedAuthenticationStrategy.assignRole(RoleType.Global, adminRole, l);\n      }\n\n      access.builders.each { l -\u003e\n        println(\"Granting builder to \" + l)\n        roleBasedAuthenticationStrategy.assignRole(RoleType.Global, buildersRole, l);\n      }\n\n      access.readers.each { l -\u003e\n        println(\"Granting read to \" + l)\n        roleBasedAuthenticationStrategy.assignRole(RoleType.Global, readRole, l);\n      }\n\n      Jenkins.instance.save()\n\n\n  # Kubernetes secret that contains a 'credentials.xml' for Jenkins\n  # CredentialsXmlSecret: jenkins-credentials\n  # Kubernetes secret that contains files to be put in the Jenkins 'secrets' directory,\n  # useful to manage encryption keys used for credentials.xml for instance (such as\n  # master.key and hudson.util.Secret)\n  # SecretsFilesSecret: jenkins-secrets\n  # Jenkins XML job configs to provision\n  Jobs: |-\n    academy-fuchicorp-build:\n     |\n      \u003corg.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject plugin=\"workflow-multibranch@2.21\"\u003e\n      \u003cscript type=\"text/javascript\" charset=\"utf-8\" id=\"zm-extension\"/\u003e\n      \u003cactions/\u003e\n      \u003cdescription/\u003e\n      \u003cproperties\u003e\n      \u003corg.jenkinsci.plugins.pipeline.modeldefinition.config.FolderConfig plugin=\"pipeline-model-definition@1.3.9\"\u003e\n      \u003cdockerLabel/\u003e\n      \u003cregistry plugin=\"docker-commons@1.15\"/\u003e\n      \u003c/org.jenkinsci.plugins.pipeline.modeldefinition.config.FolderConfig\u003e\n      \u003c/properties\u003e\n      \u003cfolderViews class=\"jenkins.branch.MultiBranchProjectViewHolder\" plugin=\"branch-api@2.5.4\"\u003e\n      \u003cowner class=\"org.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject\" reference=\"../..\"/\u003e\n      \u003c/folderViews\u003e\n      \u003chealthMetrics\u003e\n      \u003ccom.cloudbees.hudson.plugins.folder.health.WorstChildHealthMetric plugin=\"cloudbees-folder@6.9\"\u003e\n      \u003cnonRecursive\u003efalse\u003c/nonRecursive\u003e\n      \u003c/com.cloudbees.hudson.plugins.folder.health.WorstChildHealthMetric\u003e\n      \u003c/healthMetrics\u003e\n      \u003cicon class=\"jenkins.branch.MetadataActionFolderIcon\" plugin=\"branch-api@2.5.4\"\u003e\n      \u003cowner class=\"org.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject\" reference=\"../..\"/\u003e\n      \u003c/icon\u003e\n      \u003corphanedItemStrategy class=\"com.cloudbees.hudson.plugins.folder.computed.DefaultOrphanedItemStrategy\" plugin=\"cloudbees-folder@6.9\"\u003e\n      \u003cpruneDeadBranches\u003etrue\u003c/pruneDeadBranches\u003e\n      \u003cdaysToKeep\u003e-1\u003c/daysToKeep\u003e\n      \u003cnumToKeep\u003e-1\u003c/numToKeep\u003e\n      \u003c/orphanedItemStrategy\u003e\n      \u003ctriggers\u003e\n      \u003ccom.cloudbees.hudson.plugins.folder.computed.PeriodicFolderTrigger plugin=\"cloudbees-folder@6.9\"\u003e\n      \u003cspec\u003e* * * * *\u003c/spec\u003e\n      \u003cinterval\u003e120000\u003c/interval\u003e\n      \u003c/com.cloudbees.hudson.plugins.folder.computed.PeriodicFolderTrigger\u003e\n      \u003c/triggers\u003e\n      \u003cdisabled\u003efalse\u003c/disabled\u003e\n      \u003csources class=\"jenkins.branch.MultiBranchProject$BranchSourceList\" plugin=\"branch-api@2.5.4\"\u003e\n      \u003cdata\u003e\n      \u003cjenkins.branch.BranchSource\u003e\n      \u003csource class=\"jenkins.plugins.git.GitSCMSource\" plugin=\"git@3.11.0\"\u003e\n      \u003cid\u003e0a162395-4438-4b2e-8d7d-5e3b8f7d247c\u003c/id\u003e\n      \u003cremote\u003ehttps://github.com/fuchicorp/webplatform.git\u003c/remote\u003e\n      \u003ccredentialsId/\u003e\n      \u003ctraits\u003e\n      \u003cjenkins.plugins.git.traits.BranchDiscoveryTrait/\u003e\n      \u003c/traits\u003e\n      \u003c/source\u003e\n      \u003cstrategy class=\"jenkins.branch.DefaultBranchPropertyStrategy\"\u003e\n      \u003cproperties class=\"empty-list\"/\u003e\n      \u003c/strategy\u003e\n      \u003c/jenkins.branch.BranchSource\u003e\n      \u003c/data\u003e\n      \u003cowner class=\"org.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject\" reference=\"../..\"/\u003e\n      \u003c/sources\u003e\n      \u003cfactory class=\"org.jenkinsci.plugins.workflow.multibranch.WorkflowBranchProjectFactory\"\u003e\n      \u003cowner class=\"org.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject\" reference=\"../..\"/\u003e\n      \u003cscriptPath\u003eJenkinsBuilder.groovy\u003c/scriptPath\u003e\n      \u003c/factory\u003e\n      \u003c/org.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject\u003e\n\n    academy-fuchicorp-deploy:\n     |\n      \u003corg.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject plugin=\"workflow-multibranch@2.21\"\u003e\n      \u003cscript type=\"text/javascript\" charset=\"utf-8\" id=\"zm-extension\"/\u003e\n      \u003cactions/\u003e\n      \u003cdescription/\u003e\n      \u003cproperties\u003e\n      \u003corg.csanchez.jenkins.plugins.kubernetes.KubernetesFolderProperty plugin=\"kubernetes@1.18.2\"\u003e\n      \u003cpermittedClouds/\u003e\n      \u003c/org.csanchez.jenkins.plugins.kubernetes.KubernetesFolderProperty\u003e\n      \u003corg.jenkinsci.plugins.pipeline.modeldefinition.config.FolderConfig plugin=\"pipeline-model-definition@1.3.9\"\u003e\n      \u003cdockerLabel/\u003e\n      \u003cregistry plugin=\"docker-commons@1.15\"/\u003e\n      \u003c/org.jenkinsci.plugins.pipeline.modeldefinition.config.FolderConfig\u003e\n      \u003c/properties\u003e\n      \u003cfolderViews class=\"jenkins.branch.MultiBranchProjectViewHolder\" plugin=\"branch-api@2.5.4\"\u003e\n      \u003cowner class=\"org.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject\" reference=\"../..\"/\u003e\n      \u003c/folderViews\u003e\n      \u003chealthMetrics\u003e\n      \u003ccom.cloudbees.hudson.plugins.folder.health.WorstChildHealthMetric plugin=\"cloudbees-folder@6.9\"\u003e\n      \u003cnonRecursive\u003efalse\u003c/nonRecursive\u003e\n      \u003c/com.cloudbees.hudson.plugins.folder.health.WorstChildHealthMetric\u003e\n      \u003c/healthMetrics\u003e\n      \u003cicon class=\"jenkins.branch.MetadataActionFolderIcon\" plugin=\"branch-api@2.5.4\"\u003e\n      \u003cowner class=\"org.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject\" reference=\"../..\"/\u003e\n      \u003c/icon\u003e\n      \u003corphanedItemStrategy class=\"com.cloudbees.hudson.plugins.folder.computed.DefaultOrphanedItemStrategy\" plugin=\"cloudbees-folder@6.9\"\u003e\n      \u003cpruneDeadBranches\u003etrue\u003c/pruneDeadBranches\u003e\n      \u003cdaysToKeep\u003e-1\u003c/daysToKeep\u003e\n      \u003cnumToKeep\u003e-1\u003c/numToKeep\u003e\n      \u003c/orphanedItemStrategy\u003e\n      \u003ctriggers\u003e\n      \u003ccom.cloudbees.hudson.plugins.folder.computed.PeriodicFolderTrigger plugin=\"cloudbees-folder@6.9\"\u003e\n      \u003cspec\u003e* * * * *\u003c/spec\u003e\n      \u003cinterval\u003e120000\u003c/interval\u003e\n      \u003c/com.cloudbees.hudson.plugins.folder.computed.PeriodicFolderTrigger\u003e\n      \u003c/triggers\u003e\n      \u003cdisabled\u003efalse\u003c/disabled\u003e\n      \u003csources class=\"jenkins.branch.MultiBranchProject$BranchSourceList\" plugin=\"branch-api@2.5.4\"\u003e\n      \u003cdata\u003e\n      \u003cjenkins.branch.BranchSource\u003e\n      \u003csource class=\"jenkins.plugins.git.GitSCMSource\" plugin=\"git@3.11.0\"\u003e\n      \u003cid\u003e0a162395-4438-4b2e-8d7d-5e3b8f7d247c\u003c/id\u003e\n      \u003cremote\u003ehttps://github.com/fuchicorp/webplatform.git\u003c/remote\u003e\n      \u003ccredentialsId/\u003e\n      \u003ctraits\u003e\n      \u003cjenkins.plugins.git.traits.BranchDiscoveryTrait/\u003e\n      \u003c/traits\u003e\n      \u003c/source\u003e\n      \u003cstrategy class=\"jenkins.branch.DefaultBranchPropertyStrategy\"\u003e\n      \u003cproperties class=\"empty-list\"/\u003e\n      \u003c/strategy\u003e\n      \u003c/jenkins.branch.BranchSource\u003e\n      \u003c/data\u003e\n      \u003cowner class=\"org.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject\" reference=\"../..\"/\u003e\n      \u003c/sources\u003e\n      \u003cfactory class=\"org.jenkinsci.plugins.workflow.multibranch.WorkflowBranchProjectFactory\"\u003e\n      \u003cowner class=\"org.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject\" reference=\"../..\"/\u003e\n      \u003cscriptPath\u003eJenkinsDeployer.groovy\u003c/scriptPath\u003e\n      \u003c/factory\u003e\n      \u003c/org.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject\u003e\n\nAgent:\n  Enabled: true\n  Image: jenkins/jnlp-slave\n  ImageTag: 3.27-1\n# ImagePullSecret: jenkins\n  Component: \"jenkins-slave\"\n  Privileged: false\n  Cpu: \"200m\"\n  Memory: \"512Mi\"\n  # You may want to change this to true while testing a new image\n  AlwaysPullImage: false\n  # You can define the volumes that you want to mount for this container\n  # Allowed types are: ConfigMap, EmptyDir, HostPath, Nfs, Pod, Secret\n  # Configure the attributes as they appear in the corresponding Java class for that type\n  # https://github.com/jenkinsci/kubernetes-plugin/tree/master/src/main/java/org/csanchez/jenkins/plugins/kubernetes/volumes\n  volumes:\n  # - type: Secret\n  #   secretName: mysecret\n  #   mountPath: /var/myapp/mysecret\n  NodeSelector: {}\n  # Key Value selectors. Ex:\n  # jenkins-agent: v1\n\nPersistence:\n  Enabled: true\n  ## A manually managed Persistent Volume and Claim\n  ## Requires Persistence.Enabled: true\n  ## If defined, PVC must be created manually before volume will be bound\n  # ExistingClaim: jenkins2\n\n  ## jenkins data Persistent Volume Storage Class\n  ## If defined, storageClassName: \u003cstorageClass\u003e\n  ## If set to \"-\", storageClassName: \"\", which disables dynamic provisioning\n  ## If undefined (the default) or set to null, no storageClassName spec is\n  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on\n  ##   GKE, AWS \u0026 OpenStack)\n  ##\n  # StorageClass: \"-\"\n\n  # No inode limits with btrfs\n  StorageClass: \"standard\"\n  Annotations: {}\n  AccessMode: ReadWriteOnce\n  Size: 10Gi\n  volumes:\n  #  - name: nothing\n  #    emptyDir: {}\n  mounts:\n  #  - mountPath: /var/nothing\n  #    name: nothing\n  #    readOnly: true\n\nNetworkPolicy:\n  # Enable creation of NetworkPolicy resources.\n  Enabled: false\n  # For Kubernetes v1.4, v1.5 and v1.6, use 'extensions/v1beta1'\n  # For Kubernetes v1.7, use 'networking.k8s.io/v1'\n  ApiVersion: extensions/v1beta1\n\n## Install Default RBAC roles and bindings\nrbac:\n  install: true\n  serviceAccountName: jenkins\n  # RBAC api version (currently either v1beta1 or v1alpha1)\n  apiVersion: v1beta1\n  # Cluster role reference\n  roleRef: cluster-admin\nNewRelic:\n  LicenseKey: \"\"\n",
                            "verify": "false",
                            "version": "0.16.1",
                            "wait": "true"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.helm"
                },
                "helm_release.ingress_controller": {
                    "type": "helm_release",
                    "depends_on": [
                        "data.template_file.ingress_controller_values",
                        "kubernetes_cluster_role_binding.tiller_cluster_rule",
                        "kubernetes_namespace.service_tools",
                        "kubernetes_secret.tiller",
                        "kubernetes_service_account.tiller"
                    ],
                    "primary": {
                        "id": "fuchicorp-ingress-controller",
                        "attributes": {
                            "chart": "./helm-ingress-controller/ingress-controller",
                            "disable_webhooks": "false",
                            "force_update": "false",
                            "id": "fuchicorp-ingress-controller",
                            "metadata.#": "1",
                            "metadata.0.chart": "nginx-ingress",
                            "metadata.0.name": "fuchicorp-ingress-controller",
                            "metadata.0.namespace": "tools",
                            "metadata.0.revision": "2",
                            "metadata.0.values": "controller:\n  addHeaders: {}\n  admissionWebhooks:\n    enabled: false\n    failurePolicy: Fail\n    patch:\n      enabled: true\n      image:\n        pullPolicy: IfNotPresent\n        repository: jettech/kube-webhook-certgen\n        tag: v1.0.0\n      nodeSelector: {}\n      podAnnotations: {}\n      priorityClassName: \"\"\n    port: 8443\n    service:\n      annotations: {}\n      clusterIP: \"\"\n      externalIPs: []\n      loadBalancerIP: \"\"\n      loadBalancerSourceRanges: []\n      omitClusterIP: false\n      servicePort: 443\n      type: ClusterIP\n  affinity: {}\n  apiVersion: apps/v1\n  autoscaling:\n    enabled: false\n    maxReplicas: 11\n    minReplicas: 1\n    targetCPUUtilizationPercentage: 50\n    targetMemoryUtilizationPercentage: 50\n  config: {}\n  configMapNamespace: \"\"\n  containerPort:\n    http: 80\n    https: 443\n  customTemplate:\n    configMapKey: \"\"\n    configMapName: \"\"\n  daemonset:\n    hostPorts:\n      http: 80\n      https: 443\n    useHostPort: false\n  defaultBackendService: \"\"\n  dnsPolicy: ClusterFirst\n  electionID: ingress-controller-leader\n  extraArgs: {}\n  extraContainers: []\n  extraEnvs: []\n  extraInitContainers: []\n  extraVolumeMounts: []\n  extraVolumes: []\n  hostNetwork: false\n  image:\n    allowPrivilegeEscalation: true\n    pullPolicy: IfNotPresent\n    repository: quay.io/kubernetes-ingress-controller/nginx-ingress-controller\n    runAsUser: 33\n    tag: 0.26.1\n  ingressClass: nginx\n  kind: Deployment\n  lifecycle: {}\n  livenessProbe:\n    failureThreshold: 3\n    initialDelaySeconds: 10\n    periodSeconds: 10\n    port: 10254\n    successThreshold: 1\n    timeoutSeconds: 1\n  metrics:\n    enabled: false\n    prometheusRule:\n      additionalLabels: {}\n      enabled: false\n      namespace: \"\"\n      rules: []\n    service:\n      annotations: {}\n      clusterIP: \"\"\n      externalIPs: []\n      loadBalancerIP: \"\"\n      loadBalancerSourceRanges: []\n      omitClusterIP: false\n      servicePort: 9913\n      type: ClusterIP\n    serviceMonitor:\n      additionalLabels: {}\n      enabled: false\n      namespace: \"\"\n      scrapeInterval: 30s\n  minAvailable: 1\n  minReadySeconds: 0\n  name: controller\n  nodeSelector: {}\n  podAnnotations: {}\n  podLabels: {}\n  podSecurityContext: {}\n  priorityClassName: \"\"\n  proxySetHeaders: {}\n  publishService:\n    enabled: true\n    pathOverride: \"\"\n  readinessProbe:\n    failureThreshold: 3\n    initialDelaySeconds: 10\n    periodSeconds: 10\n    port: 10254\n    successThreshold: 1\n    timeoutSeconds: 1\n  replicaCount: 1\n  reportNodeInternalIp: false\n  resources: {}\n  scope:\n    enabled: false\n    namespace: \"\"\n  service:\n    annotations: {}\n    clusterIP: \"\"\n    enableHttp: true\n    enableHttps: true\n    enabled: true\n    externalIPs: []\n    externalTrafficPolicy: Local\n    healthCheckNodePort: 0\n    labels: {}\n    loadBalancerIP: \"\"\n    loadBalancerSourceRanges: []\n    nodePorts:\n      http: \"\"\n      https: \"\"\n      tcp: {}\n      udp: {}\n    omitClusterIP: false\n    ports:\n      http: 80\n      https: 443\n    targetPorts:\n      http: http\n      https: https\n    type: LoadBalancer\n  tcp:\n    configMapNamespace: \"\"\n  terminationGracePeriodSeconds: 60\n  tolerations: []\n  udp:\n    configMapNamespace: \"\"\n  updateStrategy: {}\ndefaultBackend:\n  affinity: {}\n  apiVersion: apps/v1\n  enabled: true\n  extraArgs: {}\n  extraEnvs: []\n  image:\n    pullPolicy: IfNotPresent\n    repository: k8s.gcr.io/defaultbackend-amd64\n    runAsUser: 65534\n    tag: \"1.5\"\n  livenessProbe:\n    failureThreshold: 3\n    initialDelaySeconds: 30\n    periodSeconds: 10\n    successThreshold: 1\n    timeoutSeconds: 5\n  minAvailable: 1\n  name: default-backend\n  nodeSelector: {}\n  podAnnotations: {}\n  podLabels: {}\n  podSecurityContext: {}\n  port: 8080\n  priorityClassName: \"\"\n  readinessProbe:\n    failureThreshold: 6\n    initialDelaySeconds: 0\n    periodSeconds: 5\n    successThreshold: 1\n    timeoutSeconds: 5\n  replicaCount: 1\n  resources: {}\n  service:\n    annotations: {}\n    clusterIP: \"\"\n    externalIPs: []\n    loadBalancerIP: \"\"\n    loadBalancerSourceRanges: []\n    omitClusterIP: false\n    servicePort: 80\n    type: ClusterIP\n  serviceAccount:\n    create: true\n    name: null\n  tolerations: []\nimagePullSecrets: []\npodSecurityPolicy:\n  enabled: false\nrbac:\n  create: true\nrevisionHistoryLimit: 10\nserviceAccount:\n  create: true\n  name: null\ntcp: {}\nudp: {}\n",
                            "metadata.0.version": "1.24.0",
                            "name": "fuchicorp-ingress-controller",
                            "namespace": "tools",
                            "recreate_pods": "false",
                            "reuse": "false",
                            "reuse_values": "false",
                            "status": "DEPLOYED",
                            "timeout": "300",
                            "values.#": "1",
                            "values.0": "## nginx configuration\n## Ref: https://github.com/kubernetes/ingress/blob/master/controllers/nginx/configuration.md\n##\ncontroller:\n  name: controller\n  image:\n    repository: quay.io/kubernetes-ingress-controller/nginx-ingress-controller\n    tag: \"0.26.1\"\n    pullPolicy: IfNotPresent\n    # www-data -\u003e uid 33\n    runAsUser: 33\n    allowPrivilegeEscalation: true\n\n  # Can be changed to old api for compatibility reasons: extensions/v1beta1\n  apiVersion: apps/v1\n\n  # Configures the ports the nginx-controller listens on\n  containerPort:\n    http: 80\n    https: 443\n\n  # Will add custom configuration options to Nginx https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap/\n  config: {}\n    # use-proxy-protocol: \"true\"\n    # use-forwarded-headers: \"true\"\n    # forwarded-for-header: \"X-Forwarded-For\"\n    # compute-full-forwarded-for: \"true\"\n\n  # Will add custom headers before sending traffic to backends according to https://github.com/kubernetes/ingress-nginx/tree/master/docs/examples/customization/custom-headers\n  proxySetHeaders: {}\n\n  # Will add custom headers before sending response traffic to the client according to: https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap/#add-headers\n  addHeaders: {}\n\n  # Required for use with CNI based kubernetes installations (such as ones set up by kubeadm),\n  # since CNI and hostport don't mix yet. Can be deprecated once https://github.com/kubernetes/kubernetes/issues/23920\n  # is merged\n  hostNetwork: false\n\n  # Optionally change this to ClusterFirstWithHostNet in case you have 'hostNetwork: true'.\n  # By default, while using host network, name resolution uses the host's DNS. If you wish nginx-controller\n  # to keep resolving names inside the k8s network, use ClusterFirstWithHostNet.\n  dnsPolicy: ClusterFirst\n\n  # Bare-metal considerations via the host network https://kubernetes.github.io/ingress-nginx/deploy/baremetal/#via-the-host-network\n  # Ingress status was blank because there is no Service exposing the NGINX Ingress controller in a configuration using the host network, the default --publish-service flag used in standard cloud setups does not apply\n  reportNodeInternalIp: false\n\n  ## Use host ports 80 and 443\n  daemonset:\n    useHostPort: false\n\n    hostPorts:\n      http: 80\n      https: 443\n\n  ## Required only if defaultBackend.enabled = false\n  ## Must be \u003cnamespace\u003e/\u003cservice_name\u003e\n  ##\n  defaultBackendService: \"\"\n\n  ## Election ID to use for status update\n  ##\n  electionID: ingress-controller-leader\n\n  ## Name of the ingress class to route through this controller\n  ##\n  ingressClass: nginx\n\n  # labels to add to the pod container metadata\n  podLabels: {}\n  #  key: value\n\n  ## Security Context policies for controller pods\n  ## See https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster/ for\n  ## notes on enabling and using sysctls\n  ##\n  podSecurityContext: {}\n\n  ## Allows customization of the external service\n  ## the ingress will be bound to via DNS\n  publishService:\n    enabled: true\n    ## Allows overriding of the publish service to bind to\n    ## Must be \u003cnamespace\u003e/\u003cservice_name\u003e\n    ##\n    pathOverride: \"\"\n\n  ## Limit the scope of the controller\n  ##\n  scope:\n    enabled: false\n    namespace: \"\"   # defaults to .Release.Namespace\n\n  ## Allows customization of the configmap / nginx-configmap namespace\n  ##\n  configMapNamespace: \"\"   # defaults to .Release.Namespace\n\n  ## Allows customization of the tcp-services-configmap namespace\n  ##\n  tcp:\n    configMapNamespace: \"\"   # defaults to .Release.Namespace\n\n  ## Allows customization of the udp-services-configmap namespace\n  ##\n  udp:\n    configMapNamespace: \"\"   # defaults to .Release.Namespace\n\n  ## Additional command line arguments to pass to nginx-ingress-controller\n  ## E.g. to specify the default SSL certificate you can use\n  ## extraArgs:\n  ##   default-ssl-certificate: \"\u003cnamespace\u003e/\u003csecret_name\u003e\"\n  extraArgs: {}\n\n  ## Additional environment variables to set\n  extraEnvs: []\n  # extraEnvs:\n  #   - name: FOO\n  #     valueFrom:\n  #       secretKeyRef:\n  #         key: FOO\n  #         name: secret-resource\n\n  ## DaemonSet or Deployment\n  ##\n  kind: Deployment\n\n  # The update strategy to apply to the Deployment or DaemonSet\n  ##\n  updateStrategy: {}\n  #  rollingUpdate:\n  #    maxUnavailable: 1\n  #  type: RollingUpdate\n\n  # minReadySeconds to avoid killing pods before we are ready\n  ##\n  minReadySeconds: 0\n\n\n  ## Node tolerations for server scheduling to nodes with taints\n  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\n  ##\n  tolerations: []\n  #  - key: \"key\"\n  #    operator: \"Equal|Exists\"\n  #    value: \"value\"\n  #    effect: \"NoSchedule|PreferNoSchedule|NoExecute(1.6 only)\"\n\n  ## Affinity and anti-affinity\n  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity\n  ##\n  affinity: {}\n    # # An example of preferred pod anti-affinity, weight is in the range 1-100\n    # podAntiAffinity:\n    #   preferredDuringSchedulingIgnoredDuringExecution:\n    #   - weight: 100\n    #     podAffinityTerm:\n    #       labelSelector:\n    #         matchExpressions:\n    #         - key: app\n    #           operator: In\n    #           values:\n    #           - nginx-ingress\n    #       topologyKey: kubernetes.io/hostname\n\n    # # An example of required pod anti-affinity\n    # podAntiAffinity:\n    #   requiredDuringSchedulingIgnoredDuringExecution:\n    #   - labelSelector:\n    #       matchExpressions:\n    #       - key: app\n    #         operator: In\n    #         values:\n    #         - nginx-ingress\n    #     topologyKey: \"kubernetes.io/hostname\"\n\n  ## terminationGracePeriodSeconds\n  ##\n  terminationGracePeriodSeconds: 60\n\n  ## Node labels for controller pod assignment\n  ## Ref: https://kubernetes.io/docs/user-guide/node-selection/\n  ##\n  nodeSelector: {}\n\n  ## Liveness and readiness probe values\n  ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes\n  ##\n  livenessProbe:\n    failureThreshold: 3\n    initialDelaySeconds: 10\n    periodSeconds: 10\n    successThreshold: 1\n    timeoutSeconds: 1\n    port: 10254\n  readinessProbe:\n    failureThreshold: 3\n    initialDelaySeconds: 10\n    periodSeconds: 10\n    successThreshold: 1\n    timeoutSeconds: 1\n    port: 10254\n\n  ## Annotations to be added to controller pods\n  ##\n  podAnnotations: {}\n\n  replicaCount: 1\n\n  minAvailable: 1\n\n  resources: {}\n  #  limits:\n  #    cpu: 100m\n  #    memory: 64Mi\n  #  requests:\n  #    cpu: 100m\n  #    memory: 64Mi\n\n  autoscaling:\n    enabled: false\n    minReplicas: 1\n    maxReplicas: 11\n    targetCPUUtilizationPercentage: 50\n    targetMemoryUtilizationPercentage: 50\n\n  ## Override NGINX template\n  customTemplate:\n    configMapName: \"\"\n    configMapKey: \"\"\n\n  service:\n    enabled: true\n\n    annotations: {}\n    labels: {}\n    omitClusterIP: false\n    clusterIP: \"\"\n\n    ## List of IP addresses at which the controller services are available\n    ## Ref: https://kubernetes.io/docs/user-guide/services/#external-ips\n    ##\n    externalIPs: []\n\n    loadBalancerIP: \"\"\n    loadBalancerSourceRanges: []\n\n    enableHttp: true\n    enableHttps: true\n\n    ## Set external traffic policy to: \"Local\" to preserve source IP on\n    ## providers supporting it\n    ## Ref: https://kubernetes.io/docs/tutorials/services/source-ip/#source-ip-for-services-with-typeloadbalancer\n    externalTrafficPolicy: Local\n\n    healthCheckNodePort: 0\n\n    ports:\n      http: 80\n      https: 443\n\n    targetPorts:\n      http: http\n      https: https\n\n    type: LoadBalancer\n\n    # type: NodePort\n    # nodePorts:\n    #   http: 32080\n    #   https: 32443\n    #   tcp:\n    #     8080: 32808\n    nodePorts:\n      http: \"\"\n      https: \"\"\n      tcp: {}\n      udp: {}\n\n  extraContainers: []\n  ## Additional containers to be added to the controller pod.\n  ## See https://github.com/lemonldap-ng-controller/lemonldap-ng-controller as example.\n  #  - name: my-sidecar\n  #    image: nginx:latest\n  #  - name: lemonldap-ng-controller\n  #    image: lemonldapng/lemonldap-ng-controller:0.2.0\n  #    args:\n  #      - /lemonldap-ng-controller\n  #      - --alsologtostderr\n  #      - --configmap=$(POD_NAMESPACE)/lemonldap-ng-configuration\n  #    env:\n  #      - name: POD_NAME\n  #        valueFrom:\n  #          fieldRef:\n  #            fieldPath: metadata.name\n  #      - name: POD_NAMESPACE\n  #        valueFrom:\n  #          fieldRef:\n  #            fieldPath: metadata.namespace\n  #    volumeMounts:\n  #    - name: copy-portal-skins\n  #      mountPath: /srv/var/lib/lemonldap-ng/portal/skins\n\n  extraVolumeMounts: []\n  ## Additional volumeMounts to the controller main container.\n  #  - name: copy-portal-skins\n  #   mountPath: /var/lib/lemonldap-ng/portal/skins\n\n  extraVolumes: []\n  ## Additional volumes to the controller pod.\n  #  - name: copy-portal-skins\n  #    emptyDir: {}\n\n  extraInitContainers: []\n  ## Containers, which are run before the app containers are started.\n  # - name: init-myservice\n  #   image: busybox\n  #   command: ['sh', '-c', 'until nslookup myservice; do echo waiting for myservice; sleep 2; done;']\n\n  admissionWebhooks:\n    enabled: false\n    failurePolicy: Fail\n    port: 8443\n\n    service:\n      annotations: {}\n      omitClusterIP: false\n      clusterIP: \"\"\n      externalIPs: []\n      loadBalancerIP: \"\"\n      loadBalancerSourceRanges: []\n      servicePort: 443\n      type: ClusterIP\n\n    patch:\n      enabled: true\n      image:\n        repository: jettech/kube-webhook-certgen\n        tag: v1.0.0\n        pullPolicy: IfNotPresent\n      ## Provide a priority class name to the webhook patching job\n      ##\n      priorityClassName: \"\"\n      podAnnotations: {}\n      nodeSelector: {}\n\n  metrics:\n    enabled: false\n\n    service:\n      annotations: {}\n      # prometheus.io/scrape: \"true\"\n      # prometheus.io/port: \"10254\"\n\n      omitClusterIP: false\n      clusterIP: \"\"\n\n      ## List of IP addresses at which the stats-exporter service is available\n      ## Ref: https://kubernetes.io/docs/user-guide/services/#external-ips\n      ##\n      externalIPs: []\n\n      loadBalancerIP: \"\"\n      loadBalancerSourceRanges: []\n      servicePort: 9913\n      type: ClusterIP\n\n    serviceMonitor:\n      enabled: false\n      additionalLabels: {}\n      namespace: \"\"\n      scrapeInterval: 30s\n      # honorLabels: true\n\n    prometheusRule:\n      enabled: false\n      additionalLabels: {}\n      namespace: \"\"\n      rules: []\n        # # These are just examples rules, please adapt them to your needs\n        # - alert: TooMany500s\n        #   expr: 100 * ( sum( nginx_ingress_controller_requests{status=~\"5.+\"} ) / sum(nginx_ingress_controller_requests) ) \u003e 5\n        #   for: 1m\n        #   labels:\n        #     severity: critical\n        #   annotations:\n        #     description: Too many 5XXs\n        #     summary: More than 5% of the all requests did return 5XX, this require your attention\n        # - alert: TooMany400s\n        #   expr: 100 * ( sum( nginx_ingress_controller_requests{status=~\"4.+\"} ) / sum(nginx_ingress_controller_requests) ) \u003e 5\n        #   for: 1m\n        #   labels:\n        #     severity: critical\n        #   annotations:\n        #     description: Too many 4XXs\n        #     summary: More than 5% of the all requests did return 4XX, this require your attention\n\n\n  lifecycle: {}\n\n  priorityClassName: \"\"\n\n## Rollback limit\n##\nrevisionHistoryLimit: 10\n\n## Default 404 backend\n##\ndefaultBackend:\n\n  ## If false, controller.defaultBackendService must be provided\n  ##\n  enabled: true\n\n  # Can be changed to old api for compatibility reasons: extensions/v1beta1\n  apiVersion: apps/v1\n\n  name: default-backend\n  image:\n    repository: k8s.gcr.io/defaultbackend-amd64\n    tag: \"1.5\"\n    pullPolicy: IfNotPresent\n    # nobody user -\u003e uid 65534\n    runAsUser: 65534\n\n  extraArgs: {}\n\n  serviceAccount:\n    create: true\n    name:\n  ## Additional environment variables to set for defaultBackend pods\n  extraEnvs: []\n\n  port: 8080\n\n  ## Readiness and liveness probes for default backend\n  ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/\n  ##\n  livenessProbe:\n    failureThreshold: 3\n    initialDelaySeconds: 30\n    periodSeconds: 10\n    successThreshold: 1\n    timeoutSeconds: 5\n  readinessProbe:\n    failureThreshold: 6\n    initialDelaySeconds: 0\n    periodSeconds: 5\n    successThreshold: 1\n    timeoutSeconds: 5\n\n  ## Node tolerations for server scheduling to nodes with taints\n  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\n  ##\n  tolerations: []\n  #  - key: \"key\"\n  #    operator: \"Equal|Exists\"\n  #    value: \"value\"\n  #    effect: \"NoSchedule|PreferNoSchedule|NoExecute(1.6 only)\"\n\n  affinity: {}\n\n  ## Security Context policies for controller pods\n  ## See https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster/ for\n  ## notes on enabling and using sysctls\n  ##\n  podSecurityContext: {}\n\n  # labels to add to the pod container metadata\n  podLabels: {}\n  #  key: value\n\n  ## Node labels for default backend pod assignment\n  ## Ref: https://kubernetes.io/docs/user-guide/node-selection/\n  ##\n  nodeSelector: {}\n\n  ## Annotations to be added to default backend pods\n  ##\n  podAnnotations: {}\n\n  replicaCount: 1\n\n  minAvailable: 1\n\n  resources: {}\n  # limits:\n  #   cpu: 10m\n  #   memory: 20Mi\n  # requests:\n  #   cpu: 10m\n  #   memory: 20Mi\n\n  service:\n    annotations: {}\n    omitClusterIP: false\n    clusterIP: \"\"\n\n    ## List of IP addresses at which the default backend service is available\n    ## Ref: https://kubernetes.io/docs/user-guide/services/#external-ips\n    ##\n    externalIPs: []\n\n    loadBalancerIP: \"\"\n    loadBalancerSourceRanges: []\n    servicePort: 80\n    type: ClusterIP\n\n  priorityClassName: \"\"\n\n## Enable RBAC as per https://github.com/kubernetes/ingress/tree/master/examples/rbac/nginx and https://github.com/kubernetes/ingress/issues/266\nrbac:\n  create: true\n\n# If true, create \u0026 use Pod Security Policy resources\n# https://kubernetes.io/docs/concepts/policy/pod-security-policy/\npodSecurityPolicy:\n  enabled: false\n\nserviceAccount:\n  create: true\n  name:\n\n## Optional array of imagePullSecrets containing private registry credentials\n## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/\nimagePullSecrets: []\n# - name: secretName\n\n# TCP service key:value pairs\n# Ref: https://github.com/kubernetes/contrib/tree/master/ingress/controllers/nginx/examples/tcp\n##\ntcp: {}\n#  8080: \"default/example-tcp-svc:9000\"\n\n# UDP service key:value pairs\n# Ref: https://github.com/kubernetes/contrib/tree/master/ingress/controllers/nginx/examples/udp\n##\nudp: {}\n#  53: \"kube-system/kube-dns:53\"\n",
                            "verify": "false",
                            "version": "1.24.0",
                            "wait": "true"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.helm"
                },
                "kubernetes_cluster_role_binding.common_cluster_rule": {
                    "type": "kubernetes_cluster_role_binding",
                    "depends_on": [
                        "kubernetes_secret.common_service_account_secret",
                        "kubernetes_service_account.common_service_account"
                    ],
                    "primary": {
                        "id": "common-cluster-rule",
                        "attributes": {
                            "id": "common-cluster-rule",
                            "metadata.#": "1",
                            "metadata.0.annotations.%": "0",
                            "metadata.0.generation": "0",
                            "metadata.0.labels.%": "0",
                            "metadata.0.name": "common-cluster-rule",
                            "metadata.0.resource_version": "9349",
                            "metadata.0.self_link": "/apis/rbac.authorization.k8s.io/v1/clusterrolebindings/common-cluster-rule",
                            "metadata.0.uid": "9119fe2b-ef98-11e9-9b86-42010a80011c",
                            "role_ref.#": "1",
                            "role_ref.0.api_group": "rbac.authorization.k8s.io",
                            "role_ref.0.kind": "ClusterRole",
                            "role_ref.0.name": "cluster-admin",
                            "subject.#": "1",
                            "subject.0.api_group": "",
                            "subject.0.kind": "ServiceAccount",
                            "subject.0.name": "common-service-account",
                            "subject.0.namespace": "tools"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.kubernetes"
                },
                "kubernetes_cluster_role_binding.tiller_cluster_rule": {
                    "type": "kubernetes_cluster_role_binding",
                    "depends_on": [
                        "kubernetes_secret.tiller",
                        "kubernetes_service_account.tiller"
                    ],
                    "primary": {
                        "id": "tiller-cluster-rule",
                        "attributes": {
                            "id": "tiller-cluster-rule",
                            "metadata.#": "1",
                            "metadata.0.annotations.%": "0",
                            "metadata.0.generation": "0",
                            "metadata.0.labels.%": "0",
                            "metadata.0.name": "tiller-cluster-rule",
                            "metadata.0.resource_version": "9330",
                            "metadata.0.self_link": "/apis/rbac.authorization.k8s.io/v1/clusterrolebindings/tiller-cluster-rule",
                            "metadata.0.uid": "90ca1790-ef98-11e9-9b86-42010a80011c",
                            "role_ref.#": "1",
                            "role_ref.0.api_group": "rbac.authorization.k8s.io",
                            "role_ref.0.kind": "ClusterRole",
                            "role_ref.0.name": "cluster-admin",
                            "subject.#": "1",
                            "subject.0.api_group": "",
                            "subject.0.kind": "ServiceAccount",
                            "subject.0.name": "tiller",
                            "subject.0.namespace": "kube-system"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.kubernetes"
                },
                "kubernetes_deployment.grafana_fuchicorp_deployment": {
                    "type": "kubernetes_deployment",
                    "depends_on": [
                        "kubernetes_namespace.service_tools",
                        "kubernetes_secret.grafana_secrets"
                    ],
                    "primary": {
                        "id": "tools/grafana-fuchicorp-deployment",
                        "attributes": {
                            "id": "tools/grafana-fuchicorp-deployment",
                            "metadata.#": "1",
                            "metadata.0.annotations.%": "0",
                            "metadata.0.generate_name": "",
                            "metadata.0.generation": "1",
                            "metadata.0.labels.%": "1",
                            "metadata.0.labels.app": "grafana-fuchicorp-deployment",
                            "metadata.0.name": "grafana-fuchicorp-deployment",
                            "metadata.0.namespace": "tools",
                            "metadata.0.resource_version": "9393",
                            "metadata.0.self_link": "/apis/apps/v1/namespaces/tools/deployments/grafana-fuchicorp-deployment",
                            "metadata.0.uid": "8ec008c8-ef98-11e9-9b86-42010a80011c",
                            "spec.#": "1",
                            "spec.0.min_ready_seconds": "0",
                            "spec.0.paused": "false",
                            "spec.0.progress_deadline_seconds": "600",
                            "spec.0.replicas": "1",
                            "spec.0.revision_history_limit": "10",
                            "spec.0.selector.#": "1",
                            "spec.0.selector.0.match_expressions.#": "0",
                            "spec.0.selector.0.match_labels.%": "1",
                            "spec.0.selector.0.match_labels.app": "grafana-fuchicorp-deployment",
                            "spec.0.strategy.#": "1",
                            "spec.0.strategy.0.rolling_update.#": "1",
                            "spec.0.strategy.0.rolling_update.0.max_surge": "25%",
                            "spec.0.strategy.0.rolling_update.0.max_unavailable": "25%",
                            "spec.0.strategy.0.type": "RollingUpdate",
                            "spec.0.template.#": "1",
                            "spec.0.template.0.metadata.#": "1",
                            "spec.0.template.0.metadata.0.annotations.%": "0",
                            "spec.0.template.0.metadata.0.generate_name": "",
                            "spec.0.template.0.metadata.0.generation": "0",
                            "spec.0.template.0.metadata.0.labels.%": "1",
                            "spec.0.template.0.metadata.0.labels.app": "grafana-fuchicorp-deployment",
                            "spec.0.template.0.metadata.0.name": "",
                            "spec.0.template.0.metadata.0.namespace": "default",
                            "spec.0.template.0.metadata.0.resource_version": "",
                            "spec.0.template.0.metadata.0.self_link": "",
                            "spec.0.template.0.metadata.0.uid": "",
                            "spec.0.template.0.spec.#": "1",
                            "spec.0.template.0.spec.0.active_deadline_seconds": "0",
                            "spec.0.template.0.spec.0.affinity.#": "0",
                            "spec.0.template.0.spec.0.automount_service_account_token": "false",
                            "spec.0.template.0.spec.0.container.#": "1",
                            "spec.0.template.0.spec.0.container.0.args.#": "0",
                            "spec.0.template.0.spec.0.container.0.command.#": "0",
                            "spec.0.template.0.spec.0.container.0.env.#": "4",
                            "spec.0.template.0.spec.0.container.0.env.0.name": "GF_AUTH_BASIC_ENABLED",
                            "spec.0.template.0.spec.0.container.0.env.0.value": "true",
                            "spec.0.template.0.spec.0.container.0.env.0.value_from.#": "0",
                            "spec.0.template.0.spec.0.container.0.env.1.name": "GF_SECURITY_ADMIN_USER",
                            "spec.0.template.0.spec.0.container.0.env.1.value": "",
                            "spec.0.template.0.spec.0.container.0.env.1.value_from.#": "1",
                            "spec.0.template.0.spec.0.container.0.env.1.value_from.0.config_map_key_ref.#": "0",
                            "spec.0.template.0.spec.0.container.0.env.1.value_from.0.field_ref.#": "0",
                            "spec.0.template.0.spec.0.container.0.env.1.value_from.0.resource_field_ref.#": "0",
                            "spec.0.template.0.spec.0.container.0.env.1.value_from.0.secret_key_ref.#": "1",
                            "spec.0.template.0.spec.0.container.0.env.1.value_from.0.secret_key_ref.0.key": "username",
                            "spec.0.template.0.spec.0.container.0.env.1.value_from.0.secret_key_ref.0.name": "grafana-secrets",
                            "spec.0.template.0.spec.0.container.0.env.2.name": "GF_SECURITY_ADMIN_PASSWORD",
                            "spec.0.template.0.spec.0.container.0.env.2.value": "",
                            "spec.0.template.0.spec.0.container.0.env.2.value_from.#": "1",
                            "spec.0.template.0.spec.0.container.0.env.2.value_from.0.config_map_key_ref.#": "0",
                            "spec.0.template.0.spec.0.container.0.env.2.value_from.0.field_ref.#": "0",
                            "spec.0.template.0.spec.0.container.0.env.2.value_from.0.resource_field_ref.#": "0",
                            "spec.0.template.0.spec.0.container.0.env.2.value_from.0.secret_key_ref.#": "1",
                            "spec.0.template.0.spec.0.container.0.env.2.value_from.0.secret_key_ref.0.key": "password",
                            "spec.0.template.0.spec.0.container.0.env.2.value_from.0.secret_key_ref.0.name": "grafana-secrets",
                            "spec.0.template.0.spec.0.container.0.env.3.name": "GF_AUTH_ANONYMOUS_ENABLED",
                            "spec.0.template.0.spec.0.container.0.env.3.value": "false",
                            "spec.0.template.0.spec.0.container.0.env.3.value_from.#": "0",
                            "spec.0.template.0.spec.0.container.0.env_from.#": "0",
                            "spec.0.template.0.spec.0.container.0.image": "grafana/grafana:6.2.1",
                            "spec.0.template.0.spec.0.container.0.image_pull_policy": "IfNotPresent",
                            "spec.0.template.0.spec.0.container.0.lifecycle.#": "0",
                            "spec.0.template.0.spec.0.container.0.liveness_probe.#": "0",
                            "spec.0.template.0.spec.0.container.0.name": "grafana-fuchicorp-deployment",
                            "spec.0.template.0.spec.0.container.0.port.#": "1",
                            "spec.0.template.0.spec.0.container.0.port.0.container_port": "3000",
                            "spec.0.template.0.spec.0.container.0.port.0.host_ip": "",
                            "spec.0.template.0.spec.0.container.0.port.0.host_port": "0",
                            "spec.0.template.0.spec.0.container.0.port.0.name": "",
                            "spec.0.template.0.spec.0.container.0.port.0.protocol": "TCP",
                            "spec.0.template.0.spec.0.container.0.readiness_probe.#": "0",
                            "spec.0.template.0.spec.0.container.0.resources.#": "1",
                            "spec.0.template.0.spec.0.container.0.resources.0.limits.#": "1",
                            "spec.0.template.0.spec.0.container.0.resources.0.limits.0.cpu": "100m",
                            "spec.0.template.0.spec.0.container.0.resources.0.limits.0.memory": "100Mi",
                            "spec.0.template.0.spec.0.container.0.resources.0.requests.#": "1",
                            "spec.0.template.0.spec.0.container.0.resources.0.requests.0.cpu": "100m",
                            "spec.0.template.0.spec.0.container.0.resources.0.requests.0.memory": "100Mi",
                            "spec.0.template.0.spec.0.container.0.security_context.#": "0",
                            "spec.0.template.0.spec.0.container.0.stdin": "false",
                            "spec.0.template.0.spec.0.container.0.stdin_once": "false",
                            "spec.0.template.0.spec.0.container.0.termination_message_path": "/dev/termination-log",
                            "spec.0.template.0.spec.0.container.0.tty": "false",
                            "spec.0.template.0.spec.0.container.0.volume_mount.#": "0",
                            "spec.0.template.0.spec.0.container.0.working_dir": "",
                            "spec.0.template.0.spec.0.dns_config.#": "0",
                            "spec.0.template.0.spec.0.dns_policy": "ClusterFirst",
                            "spec.0.template.0.spec.0.host_aliases.#": "0",
                            "spec.0.template.0.spec.0.host_ipc": "false",
                            "spec.0.template.0.spec.0.host_network": "false",
                            "spec.0.template.0.spec.0.host_pid": "false",
                            "spec.0.template.0.spec.0.hostname": "",
                            "spec.0.template.0.spec.0.image_pull_secrets.#": "0",
                            "spec.0.template.0.spec.0.init_container.#": "0",
                            "spec.0.template.0.spec.0.node_name": "",
                            "spec.0.template.0.spec.0.node_selector.%": "0",
                            "spec.0.template.0.spec.0.restart_policy": "Always",
                            "spec.0.template.0.spec.0.security_context.#": "0",
                            "spec.0.template.0.spec.0.service_account_name": "",
                            "spec.0.template.0.spec.0.share_process_namespace": "false",
                            "spec.0.template.0.spec.0.subdomain": "",
                            "spec.0.template.0.spec.0.termination_grace_period_seconds": "30",
                            "spec.0.template.0.spec.0.toleration.#": "0",
                            "spec.0.template.0.spec.0.volume.#": "0"
                        },
                        "meta": {
                            "e2bfb730-ecaa-11e6-8f88-34363bc7c4c0": {
                                "create": 600000000000,
                                "delete": 600000000000,
                                "update": 600000000000
                            }
                        },
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.kubernetes"
                },
                "kubernetes_deployment.nexus_fuchicorp_deployment": {
                    "type": "kubernetes_deployment",
                    "depends_on": [
                        "kubernetes_namespace.service_tools"
                    ],
                    "primary": {
                        "id": "tools/nexus-fuchicorp-deployment",
                        "attributes": {
                            "id": "tools/nexus-fuchicorp-deployment",
                            "metadata.#": "1",
                            "metadata.0.annotations.%": "0",
                            "metadata.0.generate_name": "",
                            "metadata.0.generation": "1",
                            "metadata.0.labels.%": "1",
                            "metadata.0.labels.app": "nexus-fuchicorp-deployment",
                            "metadata.0.name": "nexus-fuchicorp-deployment",
                            "metadata.0.namespace": "tools",
                            "metadata.0.resource_version": "9438",
                            "metadata.0.self_link": "/apis/apps/v1/namespaces/tools/deployments/nexus-fuchicorp-deployment",
                            "metadata.0.uid": "8d3af3b0-ef98-11e9-9b86-42010a80011c",
                            "spec.#": "1",
                            "spec.0.min_ready_seconds": "0",
                            "spec.0.paused": "false",
                            "spec.0.progress_deadline_seconds": "600",
                            "spec.0.replicas": "1",
                            "spec.0.revision_history_limit": "10",
                            "spec.0.selector.#": "1",
                            "spec.0.selector.0.match_expressions.#": "0",
                            "spec.0.selector.0.match_labels.%": "1",
                            "spec.0.selector.0.match_labels.app": "nexus-fuchicorp-deployment",
                            "spec.0.strategy.#": "1",
                            "spec.0.strategy.0.rolling_update.#": "1",
                            "spec.0.strategy.0.rolling_update.0.max_surge": "25%",
                            "spec.0.strategy.0.rolling_update.0.max_unavailable": "25%",
                            "spec.0.strategy.0.type": "RollingUpdate",
                            "spec.0.template.#": "1",
                            "spec.0.template.0.metadata.#": "1",
                            "spec.0.template.0.metadata.0.annotations.%": "0",
                            "spec.0.template.0.metadata.0.generate_name": "",
                            "spec.0.template.0.metadata.0.generation": "0",
                            "spec.0.template.0.metadata.0.labels.%": "1",
                            "spec.0.template.0.metadata.0.labels.app": "nexus-fuchicorp-deployment",
                            "spec.0.template.0.metadata.0.name": "",
                            "spec.0.template.0.metadata.0.namespace": "default",
                            "spec.0.template.0.metadata.0.resource_version": "",
                            "spec.0.template.0.metadata.0.self_link": "",
                            "spec.0.template.0.metadata.0.uid": "",
                            "spec.0.template.0.spec.#": "1",
                            "spec.0.template.0.spec.0.active_deadline_seconds": "0",
                            "spec.0.template.0.spec.0.affinity.#": "0",
                            "spec.0.template.0.spec.0.automount_service_account_token": "false",
                            "spec.0.template.0.spec.0.container.#": "1",
                            "spec.0.template.0.spec.0.container.0.args.#": "0",
                            "spec.0.template.0.spec.0.container.0.command.#": "0",
                            "spec.0.template.0.spec.0.container.0.env.#": "1",
                            "spec.0.template.0.spec.0.container.0.env.0.name": "INSTALL4J_ADD_VM_PARAMS",
                            "spec.0.template.0.spec.0.container.0.env.0.value": "-Xms1200M -Xmx1200M -XX:MaxDirectMemorySize=2G -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap",
                            "spec.0.template.0.spec.0.container.0.env.0.value_from.#": "0",
                            "spec.0.template.0.spec.0.container.0.env_from.#": "0",
                            "spec.0.template.0.spec.0.container.0.image": "fsadykov/docker-nexus",
                            "spec.0.template.0.spec.0.container.0.image_pull_policy": "IfNotPresent",
                            "spec.0.template.0.spec.0.container.0.lifecycle.#": "0",
                            "spec.0.template.0.spec.0.container.0.liveness_probe.#": "0",
                            "spec.0.template.0.spec.0.container.0.name": "nexus-container",
                            "spec.0.template.0.spec.0.container.0.port.#": "2",
                            "spec.0.template.0.spec.0.container.0.port.0.container_port": "8081",
                            "spec.0.template.0.spec.0.container.0.port.0.host_ip": "",
                            "spec.0.template.0.spec.0.container.0.port.0.host_port": "0",
                            "spec.0.template.0.spec.0.container.0.port.0.name": "nexus-http",
                            "spec.0.template.0.spec.0.container.0.port.0.protocol": "TCP",
                            "spec.0.template.0.spec.0.container.0.port.1.container_port": "8085",
                            "spec.0.template.0.spec.0.container.0.port.1.host_ip": "",
                            "spec.0.template.0.spec.0.container.0.port.1.host_port": "0",
                            "spec.0.template.0.spec.0.container.0.port.1.name": "docker-repo",
                            "spec.0.template.0.spec.0.container.0.port.1.protocol": "TCP",
                            "spec.0.template.0.spec.0.container.0.readiness_probe.#": "0",
                            "spec.0.template.0.spec.0.container.0.resources.#": "1",
                            "spec.0.template.0.spec.0.container.0.resources.0.limits.#": "0",
                            "spec.0.template.0.spec.0.container.0.resources.0.requests.#": "1",
                            "spec.0.template.0.spec.0.container.0.resources.0.requests.0.cpu": "500m",
                            "spec.0.template.0.spec.0.container.0.resources.0.requests.0.memory": "4800Mi",
                            "spec.0.template.0.spec.0.container.0.security_context.#": "0",
                            "spec.0.template.0.spec.0.container.0.stdin": "false",
                            "spec.0.template.0.spec.0.container.0.stdin_once": "false",
                            "spec.0.template.0.spec.0.container.0.termination_message_path": "/dev/termination-log",
                            "spec.0.template.0.spec.0.container.0.tty": "false",
                            "spec.0.template.0.spec.0.container.0.volume_mount.#": "1",
                            "spec.0.template.0.spec.0.container.0.volume_mount.0.mount_path": "/nexus-data",
                            "spec.0.template.0.spec.0.container.0.volume_mount.0.name": "nexus-pvc",
                            "spec.0.template.0.spec.0.container.0.volume_mount.0.read_only": "false",
                            "spec.0.template.0.spec.0.container.0.volume_mount.0.sub_path": "",
                            "spec.0.template.0.spec.0.container.0.working_dir": "",
                            "spec.0.template.0.spec.0.dns_config.#": "0",
                            "spec.0.template.0.spec.0.dns_policy": "ClusterFirst",
                            "spec.0.template.0.spec.0.host_aliases.#": "0",
                            "spec.0.template.0.spec.0.host_ipc": "false",
                            "spec.0.template.0.spec.0.host_network": "false",
                            "spec.0.template.0.spec.0.host_pid": "false",
                            "spec.0.template.0.spec.0.hostname": "",
                            "spec.0.template.0.spec.0.image_pull_secrets.#": "0",
                            "spec.0.template.0.spec.0.init_container.#": "0",
                            "spec.0.template.0.spec.0.node_name": "",
                            "spec.0.template.0.spec.0.node_selector.%": "0",
                            "spec.0.template.0.spec.0.restart_policy": "Always",
                            "spec.0.template.0.spec.0.security_context.#": "0",
                            "spec.0.template.0.spec.0.service_account_name": "",
                            "spec.0.template.0.spec.0.share_process_namespace": "false",
                            "spec.0.template.0.spec.0.subdomain": "",
                            "spec.0.template.0.spec.0.termination_grace_period_seconds": "30",
                            "spec.0.template.0.spec.0.toleration.#": "0",
                            "spec.0.template.0.spec.0.volume.#": "1",
                            "spec.0.template.0.spec.0.volume.0.aws_elastic_block_store.#": "0",
                            "spec.0.template.0.spec.0.volume.0.azure_disk.#": "0",
                            "spec.0.template.0.spec.0.volume.0.azure_file.#": "0",
                            "spec.0.template.0.spec.0.volume.0.ceph_fs.#": "0",
                            "spec.0.template.0.spec.0.volume.0.cinder.#": "0",
                            "spec.0.template.0.spec.0.volume.0.config_map.#": "0",
                            "spec.0.template.0.spec.0.volume.0.downward_api.#": "0",
                            "spec.0.template.0.spec.0.volume.0.empty_dir.#": "0",
                            "spec.0.template.0.spec.0.volume.0.fc.#": "0",
                            "spec.0.template.0.spec.0.volume.0.flex_volume.#": "0",
                            "spec.0.template.0.spec.0.volume.0.flocker.#": "0",
                            "spec.0.template.0.spec.0.volume.0.gce_persistent_disk.#": "0",
                            "spec.0.template.0.spec.0.volume.0.git_repo.#": "0",
                            "spec.0.template.0.spec.0.volume.0.glusterfs.#": "0",
                            "spec.0.template.0.spec.0.volume.0.host_path.#": "0",
                            "spec.0.template.0.spec.0.volume.0.iscsi.#": "0",
                            "spec.0.template.0.spec.0.volume.0.local.#": "0",
                            "spec.0.template.0.spec.0.volume.0.name": "nexus-pvc",
                            "spec.0.template.0.spec.0.volume.0.nfs.#": "0",
                            "spec.0.template.0.spec.0.volume.0.persistent_volume_claim.#": "1",
                            "spec.0.template.0.spec.0.volume.0.persistent_volume_claim.0.claim_name": "nexus-pvc",
                            "spec.0.template.0.spec.0.volume.0.persistent_volume_claim.0.read_only": "false",
                            "spec.0.template.0.spec.0.volume.0.photon_persistent_disk.#": "0",
                            "spec.0.template.0.spec.0.volume.0.quobyte.#": "0",
                            "spec.0.template.0.spec.0.volume.0.rbd.#": "0",
                            "spec.0.template.0.spec.0.volume.0.secret.#": "0",
                            "spec.0.template.0.spec.0.volume.0.vsphere_volume.#": "0"
                        },
                        "meta": {
                            "e2bfb730-ecaa-11e6-8f88-34363bc7c4c0": {
                                "create": 600000000000,
                                "delete": 600000000000,
                                "update": 600000000000
                            }
                        },
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.kubernetes"
                },
                "kubernetes_deployment.vault_fuchicorp_deployment": {
                    "type": "kubernetes_deployment",
                    "depends_on": [
                        "kubernetes_namespace.service_tools"
                    ],
                    "primary": {
                        "id": "tools/vault-fuchicorp-deployment",
                        "attributes": {
                            "id": "tools/vault-fuchicorp-deployment",
                            "metadata.#": "1",
                            "metadata.0.annotations.%": "0",
                            "metadata.0.generate_name": "",
                            "metadata.0.generation": "1",
                            "metadata.0.labels.%": "1",
                            "metadata.0.labels.app": "vault-fuchicorp-deployment",
                            "metadata.0.name": "vault-fuchicorp-deployment",
                            "metadata.0.namespace": "tools",
                            "metadata.0.resource_version": "9670",
                            "metadata.0.self_link": "/apis/apps/v1/namespaces/tools/deployments/vault-fuchicorp-deployment",
                            "metadata.0.uid": "8d51ca07-ef98-11e9-9b86-42010a80011c",
                            "spec.#": "1",
                            "spec.0.min_ready_seconds": "0",
                            "spec.0.paused": "false",
                            "spec.0.progress_deadline_seconds": "600",
                            "spec.0.replicas": "1",
                            "spec.0.revision_history_limit": "10",
                            "spec.0.selector.#": "1",
                            "spec.0.selector.0.match_expressions.#": "0",
                            "spec.0.selector.0.match_labels.%": "1",
                            "spec.0.selector.0.match_labels.app": "vault-fuchicorp-deployment",
                            "spec.0.strategy.#": "1",
                            "spec.0.strategy.0.rolling_update.#": "1",
                            "spec.0.strategy.0.rolling_update.0.max_surge": "25%",
                            "spec.0.strategy.0.rolling_update.0.max_unavailable": "25%",
                            "spec.0.strategy.0.type": "RollingUpdate",
                            "spec.0.template.#": "1",
                            "spec.0.template.0.metadata.#": "1",
                            "spec.0.template.0.metadata.0.annotations.%": "0",
                            "spec.0.template.0.metadata.0.generate_name": "",
                            "spec.0.template.0.metadata.0.generation": "0",
                            "spec.0.template.0.metadata.0.labels.%": "1",
                            "spec.0.template.0.metadata.0.labels.app": "vault-fuchicorp-deployment",
                            "spec.0.template.0.metadata.0.name": "",
                            "spec.0.template.0.metadata.0.namespace": "default",
                            "spec.0.template.0.metadata.0.resource_version": "",
                            "spec.0.template.0.metadata.0.self_link": "",
                            "spec.0.template.0.metadata.0.uid": "",
                            "spec.0.template.0.spec.#": "1",
                            "spec.0.template.0.spec.0.active_deadline_seconds": "0",
                            "spec.0.template.0.spec.0.affinity.#": "0",
                            "spec.0.template.0.spec.0.automount_service_account_token": "false",
                            "spec.0.template.0.spec.0.container.#": "1",
                            "spec.0.template.0.spec.0.container.0.args.#": "0",
                            "spec.0.template.0.spec.0.container.0.command.#": "0",
                            "spec.0.template.0.spec.0.container.0.env.#": "1",
                            "spec.0.template.0.spec.0.container.0.env.0.name": "VAULT_DEV_ROOT_TOKEN_ID",
                            "spec.0.template.0.spec.0.container.0.env.0.value": "",
                            "spec.0.template.0.spec.0.container.0.env.0.value_from.#": "1",
                            "spec.0.template.0.spec.0.container.0.env.0.value_from.0.config_map_key_ref.#": "0",
                            "spec.0.template.0.spec.0.container.0.env.0.value_from.0.field_ref.#": "0",
                            "spec.0.template.0.spec.0.container.0.env.0.value_from.0.resource_field_ref.#": "0",
                            "spec.0.template.0.spec.0.container.0.env.0.value_from.0.secret_key_ref.#": "1",
                            "spec.0.template.0.spec.0.container.0.env.0.value_from.0.secret_key_ref.0.key": "token",
                            "spec.0.template.0.spec.0.container.0.env.0.value_from.0.secret_key_ref.0.name": "vault-secret",
                            "spec.0.template.0.spec.0.container.0.env_from.#": "0",
                            "spec.0.template.0.spec.0.container.0.image": "vault",
                            "spec.0.template.0.spec.0.container.0.image_pull_policy": "Always",
                            "spec.0.template.0.spec.0.container.0.lifecycle.#": "0",
                            "spec.0.template.0.spec.0.container.0.liveness_probe.#": "0",
                            "spec.0.template.0.spec.0.container.0.name": "vault",
                            "spec.0.template.0.spec.0.container.0.port.#": "1",
                            "spec.0.template.0.spec.0.container.0.port.0.container_port": "8200",
                            "spec.0.template.0.spec.0.container.0.port.0.host_ip": "",
                            "spec.0.template.0.spec.0.container.0.port.0.host_port": "0",
                            "spec.0.template.0.spec.0.container.0.port.0.name": "",
                            "spec.0.template.0.spec.0.container.0.port.0.protocol": "TCP",
                            "spec.0.template.0.spec.0.container.0.readiness_probe.#": "0",
                            "spec.0.template.0.spec.0.container.0.resources.#": "1",
                            "spec.0.template.0.spec.0.container.0.security_context.#": "1",
                            "spec.0.template.0.spec.0.container.0.security_context.0.allow_privilege_escalation": "true",
                            "spec.0.template.0.spec.0.container.0.security_context.0.capabilities.#": "1",
                            "spec.0.template.0.spec.0.container.0.security_context.0.capabilities.0.add.#": "1",
                            "spec.0.template.0.spec.0.container.0.security_context.0.capabilities.0.add.0": "IPC_LOCK",
                            "spec.0.template.0.spec.0.container.0.security_context.0.capabilities.0.drop.#": "0",
                            "spec.0.template.0.spec.0.container.0.security_context.0.privileged": "false",
                            "spec.0.template.0.spec.0.container.0.security_context.0.read_only_root_filesystem": "false",
                            "spec.0.template.0.spec.0.container.0.security_context.0.run_as_group": "0",
                            "spec.0.template.0.spec.0.container.0.security_context.0.run_as_non_root": "false",
                            "spec.0.template.0.spec.0.container.0.security_context.0.run_as_user": "0",
                            "spec.0.template.0.spec.0.container.0.security_context.0.se_linux_options.#": "0",
                            "spec.0.template.0.spec.0.container.0.stdin": "false",
                            "spec.0.template.0.spec.0.container.0.stdin_once": "false",
                            "spec.0.template.0.spec.0.container.0.termination_message_path": "/dev/termination-log",
                            "spec.0.template.0.spec.0.container.0.tty": "false",
                            "spec.0.template.0.spec.0.container.0.volume_mount.#": "1",
                            "spec.0.template.0.spec.0.container.0.volume_mount.0.mount_path": "/var/run",
                            "spec.0.template.0.spec.0.container.0.volume_mount.0.name": "vault-pvc",
                            "spec.0.template.0.spec.0.container.0.volume_mount.0.read_only": "false",
                            "spec.0.template.0.spec.0.container.0.volume_mount.0.sub_path": "",
                            "spec.0.template.0.spec.0.container.0.working_dir": "",
                            "spec.0.template.0.spec.0.dns_config.#": "0",
                            "spec.0.template.0.spec.0.dns_policy": "ClusterFirst",
                            "spec.0.template.0.spec.0.host_aliases.#": "0",
                            "spec.0.template.0.spec.0.host_ipc": "false",
                            "spec.0.template.0.spec.0.host_network": "false",
                            "spec.0.template.0.spec.0.host_pid": "false",
                            "spec.0.template.0.spec.0.hostname": "",
                            "spec.0.template.0.spec.0.image_pull_secrets.#": "0",
                            "spec.0.template.0.spec.0.init_container.#": "0",
                            "spec.0.template.0.spec.0.node_name": "",
                            "spec.0.template.0.spec.0.node_selector.%": "0",
                            "spec.0.template.0.spec.0.restart_policy": "Always",
                            "spec.0.template.0.spec.0.security_context.#": "0",
                            "spec.0.template.0.spec.0.service_account_name": "",
                            "spec.0.template.0.spec.0.share_process_namespace": "false",
                            "spec.0.template.0.spec.0.subdomain": "",
                            "spec.0.template.0.spec.0.termination_grace_period_seconds": "30",
                            "spec.0.template.0.spec.0.toleration.#": "0",
                            "spec.0.template.0.spec.0.volume.#": "1",
                            "spec.0.template.0.spec.0.volume.0.aws_elastic_block_store.#": "0",
                            "spec.0.template.0.spec.0.volume.0.azure_disk.#": "0",
                            "spec.0.template.0.spec.0.volume.0.azure_file.#": "0",
                            "spec.0.template.0.spec.0.volume.0.ceph_fs.#": "0",
                            "spec.0.template.0.spec.0.volume.0.cinder.#": "0",
                            "spec.0.template.0.spec.0.volume.0.config_map.#": "0",
                            "spec.0.template.0.spec.0.volume.0.downward_api.#": "0",
                            "spec.0.template.0.spec.0.volume.0.empty_dir.#": "0",
                            "spec.0.template.0.spec.0.volume.0.fc.#": "0",
                            "spec.0.template.0.spec.0.volume.0.flex_volume.#": "0",
                            "spec.0.template.0.spec.0.volume.0.flocker.#": "0",
                            "spec.0.template.0.spec.0.volume.0.gce_persistent_disk.#": "0",
                            "spec.0.template.0.spec.0.volume.0.git_repo.#": "0",
                            "spec.0.template.0.spec.0.volume.0.glusterfs.#": "0",
                            "spec.0.template.0.spec.0.volume.0.host_path.#": "0",
                            "spec.0.template.0.spec.0.volume.0.iscsi.#": "0",
                            "spec.0.template.0.spec.0.volume.0.local.#": "0",
                            "spec.0.template.0.spec.0.volume.0.name": "vault-pvc",
                            "spec.0.template.0.spec.0.volume.0.nfs.#": "0",
                            "spec.0.template.0.spec.0.volume.0.persistent_volume_claim.#": "1",
                            "spec.0.template.0.spec.0.volume.0.persistent_volume_claim.0.claim_name": "vault-pvc",
                            "spec.0.template.0.spec.0.volume.0.persistent_volume_claim.0.read_only": "false",
                            "spec.0.template.0.spec.0.volume.0.photon_persistent_disk.#": "0",
                            "spec.0.template.0.spec.0.volume.0.quobyte.#": "0",
                            "spec.0.template.0.spec.0.volume.0.rbd.#": "0",
                            "spec.0.template.0.spec.0.volume.0.secret.#": "0",
                            "spec.0.template.0.spec.0.volume.0.vsphere_volume.#": "0"
                        },
                        "meta": {
                            "e2bfb730-ecaa-11e6-8f88-34363bc7c4c0": {
                                "create": 600000000000,
                                "delete": 600000000000,
                                "update": 600000000000
                            }
                        },
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.kubernetes"
                },
                "kubernetes_namespace.dev": {
                    "type": "kubernetes_namespace",
                    "depends_on": [],
                    "primary": {
                        "id": "dev",
                        "attributes": {
                            "id": "dev",
                            "metadata.#": "1",
                            "metadata.0.annotations.%": "0",
                            "metadata.0.generate_name": "",
                            "metadata.0.generation": "0",
                            "metadata.0.labels.%": "0",
                            "metadata.0.name": "dev",
                            "metadata.0.resource_version": "9160",
                            "metadata.0.self_link": "/api/v1/namespaces/dev",
                            "metadata.0.uid": "8c450f80-ef98-11e9-9b86-42010a80011c"
                        },
                        "meta": {
                            "e2bfb730-ecaa-11e6-8f88-34363bc7c4c0": {
                                "delete": 300000000000
                            }
                        },
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.kubernetes"
                },
                "kubernetes_namespace.dev_namespace": {
                    "type": "kubernetes_namespace",
                    "depends_on": [],
                    "primary": {
                        "id": "dev-students",
                        "attributes": {
                            "id": "dev-students",
                            "metadata.#": "1",
                            "metadata.0.annotations.%": "0",
                            "metadata.0.generate_name": "",
                            "metadata.0.generation": "0",
                            "metadata.0.labels.%": "0",
                            "metadata.0.name": "dev-students",
                            "metadata.0.resource_version": "9231",
                            "metadata.0.self_link": "/api/v1/namespaces/dev-students",
                            "metadata.0.uid": "8d815dcd-ef98-11e9-9b86-42010a80011c"
                        },
                        "meta": {
                            "e2bfb730-ecaa-11e6-8f88-34363bc7c4c0": {
                                "delete": 300000000000
                            }
                        },
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.kubernetes"
                },
                "kubernetes_namespace.prod": {
                    "type": "kubernetes_namespace",
                    "depends_on": [],
                    "primary": {
                        "id": "prod",
                        "attributes": {
                            "id": "prod",
                            "metadata.#": "1",
                            "metadata.0.annotations.%": "0",
                            "metadata.0.generate_name": "",
                            "metadata.0.generation": "0",
                            "metadata.0.labels.%": "0",
                            "metadata.0.name": "prod",
                            "metadata.0.resource_version": "9158",
                            "metadata.0.self_link": "/api/v1/namespaces/prod",
                            "metadata.0.uid": "8c44388d-ef98-11e9-9b86-42010a80011c"
                        },
                        "meta": {
                            "e2bfb730-ecaa-11e6-8f88-34363bc7c4c0": {
                                "delete": 300000000000
                            }
                        },
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.kubernetes"
                },
                "kubernetes_namespace.prod_namespace": {
                    "type": "kubernetes_namespace",
                    "depends_on": [],
                    "primary": {
                        "id": "prod-students",
                        "attributes": {
                            "id": "prod-students",
                            "metadata.#": "1",
                            "metadata.0.annotations.%": "0",
                            "metadata.0.generate_name": "",
                            "metadata.0.generation": "0",
                            "metadata.0.labels.%": "0",
                            "metadata.0.name": "prod-students",
                            "metadata.0.resource_version": "9161",
                            "metadata.0.self_link": "/api/v1/namespaces/prod-students",
                            "metadata.0.uid": "8c459755-ef98-11e9-9b86-42010a80011c"
                        },
                        "meta": {
                            "e2bfb730-ecaa-11e6-8f88-34363bc7c4c0": {
                                "delete": 300000000000
                            }
                        },
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.kubernetes"
                },
                "kubernetes_namespace.qa": {
                    "type": "kubernetes_namespace",
                    "depends_on": [],
                    "primary": {
                        "id": "qa",
                        "attributes": {
                            "id": "qa",
                            "metadata.#": "1",
                            "metadata.0.annotations.%": "0",
                            "metadata.0.generate_name": "",
                            "metadata.0.generation": "0",
                            "metadata.0.labels.%": "0",
                            "metadata.0.name": "qa",
                            "metadata.0.resource_version": "9159",
                            "metadata.0.self_link": "/api/v1/namespaces/qa",
                            "metadata.0.uid": "8c4410ba-ef98-11e9-9b86-42010a80011c"
                        },
                        "meta": {
                            "e2bfb730-ecaa-11e6-8f88-34363bc7c4c0": {
                                "delete": 300000000000
                            }
                        },
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.kubernetes"
                },
                "kubernetes_namespace.qa_namespace": {
                    "type": "kubernetes_namespace",
                    "depends_on": [],
                    "primary": {
                        "id": "qa-students",
                        "attributes": {
                            "id": "qa-students",
                            "metadata.#": "1",
                            "metadata.0.annotations.%": "0",
                            "metadata.0.generate_name": "",
                            "metadata.0.generation": "0",
                            "metadata.0.labels.%": "0",
                            "metadata.0.name": "qa-students",
                            "metadata.0.resource_version": "9156",
                            "metadata.0.self_link": "/api/v1/namespaces/qa-students",
                            "metadata.0.uid": "8c43748a-ef98-11e9-9b86-42010a80011c"
                        },
                        "meta": {
                            "e2bfb730-ecaa-11e6-8f88-34363bc7c4c0": {
                                "delete": 300000000000
                            }
                        },
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.kubernetes"
                },
                "kubernetes_namespace.service_tools": {
                    "type": "kubernetes_namespace",
                    "depends_on": [],
                    "primary": {
                        "id": "tools",
                        "attributes": {
                            "id": "tools",
                            "metadata.#": "1",
                            "metadata.0.annotations.%": "0",
                            "metadata.0.generate_name": "",
                            "metadata.0.generation": "0",
                            "metadata.0.labels.%": "0",
                            "metadata.0.name": "tools",
                            "metadata.0.resource_version": "9157",
                            "metadata.0.self_link": "/api/v1/namespaces/tools",
                            "metadata.0.uid": "8c43b751-ef98-11e9-9b86-42010a80011c"
                        },
                        "meta": {
                            "e2bfb730-ecaa-11e6-8f88-34363bc7c4c0": {
                                "delete": 300000000000
                            }
                        },
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.kubernetes"
                },
                "kubernetes_namespace.test": {
                    "type": "kubernetes_namespace",
                    "depends_on": [],
                    "primary": {
                        "id": "test",
                        "attributes": {
                            "id": "test",
                            "metadata.#": "1",
                            "metadata.0.annotations.%": "0",
                            "metadata.0.generate_name": "",
                            "metadata.0.generation": "0",
                            "metadata.0.labels.%": "0",
                            "metadata.0.name": "test",
                            "metadata.0.resource_version": "9162",
                            "metadata.0.self_link": "/api/v1/namespaces/test",
                            "metadata.0.uid": "8c465d4b-ef98-11e9-9b86-42010a80011c"
                        },
                        "meta": {
                            "e2bfb730-ecaa-11e6-8f88-34363bc7c4c0": {
                                "delete": 300000000000
                            }
                        },
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.kubernetes"
                },
                "kubernetes_persistent_volume_claim.nexus_pvc": {
                    "type": "kubernetes_persistent_volume_claim",
                    "depends_on": [
                        "kubernetes_namespace.service_tools"
                    ],
                    "primary": {
                        "id": "tools/nexus-pvc",
                        "attributes": {
                            "id": "tools/nexus-pvc",
                            "metadata.#": "1",
                            "metadata.0.annotations.%": "0",
                            "metadata.0.generate_name": "",
                            "metadata.0.generation": "0",
                            "metadata.0.labels.%": "1",
                            "metadata.0.labels.app": "nexus-fuchicorp-deployment",
                            "metadata.0.name": "nexus-pvc",
                            "metadata.0.namespace": "tools",
                            "metadata.0.resource_version": "9301",
                            "metadata.0.self_link": "/api/v1/namespaces/tools/persistentvolumeclaims/nexus-pvc",
                            "metadata.0.uid": "8de26f96-ef98-11e9-9b86-42010a80011c",
                            "spec.#": "1",
                            "spec.0.access_modes.#": "1",
                            "spec.0.access_modes.1245328686": "ReadWriteOnce",
                            "spec.0.resources.#": "1",
                            "spec.0.resources.0.limits.%": "0",
                            "spec.0.resources.0.requests.%": "1",
                            "spec.0.resources.0.requests.storage": "30Gi",
                            "spec.0.selector.#": "0",
                            "spec.0.storage_class_name": "standard",
                            "spec.0.volume_name": "pvc-8de26f96-ef98-11e9-9b86-42010a80011c",
                            "wait_until_bound": "true"
                        },
                        "meta": {
                            "e2bfb730-ecaa-11e6-8f88-34363bc7c4c0": {
                                "create": 300000000000
                            }
                        },
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.kubernetes"
                },
                "kubernetes_persistent_volume_claim.vault_pvc": {
                    "type": "kubernetes_persistent_volume_claim",
                    "depends_on": [
                        "kubernetes_namespace.service_tools",
                        "kubernetes_secret.vault_secret"
                    ],
                    "primary": {
                        "id": "tools/vault-pvc",
                        "attributes": {
                            "id": "tools/vault-pvc",
                            "metadata.#": "1",
                            "metadata.0.annotations.%": "0",
                            "metadata.0.generate_name": "",
                            "metadata.0.generation": "0",
                            "metadata.0.labels.%": "1",
                            "metadata.0.labels.app": "vault-fuchicorp-deployment",
                            "metadata.0.name": "vault-pvc",
                            "metadata.0.namespace": "tools",
                            "metadata.0.resource_version": "9365",
                            "metadata.0.self_link": "/api/v1/namespaces/tools/persistentvolumeclaims/vault-pvc",
                            "metadata.0.uid": "8fe3ec68-ef98-11e9-9b86-42010a80011c",
                            "spec.#": "1",
                            "spec.0.access_modes.#": "1",
                            "spec.0.access_modes.1245328686": "ReadWriteOnce",
                            "spec.0.resources.#": "1",
                            "spec.0.resources.0.limits.%": "0",
                            "spec.0.resources.0.requests.%": "1",
                            "spec.0.resources.0.requests.storage": "1Gi",
                            "spec.0.selector.#": "0",
                            "spec.0.storage_class_name": "standard",
                            "spec.0.volume_name": "pvc-8fe3ec68-ef98-11e9-9b86-42010a80011c",
                            "wait_until_bound": "true"
                        },
                        "meta": {
                            "e2bfb730-ecaa-11e6-8f88-34363bc7c4c0": {
                                "create": 300000000000
                            }
                        },
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.kubernetes"
                },
                "kubernetes_secret.common_service_account_secret": {
                    "type": "kubernetes_secret",
                    "depends_on": [],
                    "primary": {
                        "id": "tools/common-service-account-secret",
                        "attributes": {
                            "data.%": "0",
                            "id": "tools/common-service-account-secret",
                            "metadata.#": "1",
                            "metadata.0.annotations.%": "0",
                            "metadata.0.generate_name": "",
                            "metadata.0.generation": "0",
                            "metadata.0.labels.%": "0",
                            "metadata.0.name": "common-service-account-secret",
                            "metadata.0.namespace": "tools",
                            "metadata.0.resource_version": "9164",
                            "metadata.0.self_link": "/api/v1/namespaces/tools/secrets/common-service-account-secret",
                            "metadata.0.uid": "8c47d2c5-ef98-11e9-9b86-42010a80011c",
                            "type": "Opaque"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.kubernetes"
                },
                "kubernetes_secret.grafana_secrets": {
                    "type": "kubernetes_secret",
                    "depends_on": [],
                    "primary": {
                        "id": "tools/grafana-secrets",
                        "attributes": {
                            "data.%": "2",
                            "data.password": "vghT7vFHDRnEHmC",
                            "data.username": "grafuser",
                            "id": "tools/grafana-secrets",
                            "metadata.#": "1",
                            "metadata.0.annotations.%": "0",
                            "metadata.0.generate_name": "",
                            "metadata.0.generation": "0",
                            "metadata.0.labels.%": "0",
                            "metadata.0.name": "grafana-secrets",
                            "metadata.0.namespace": "tools",
                            "metadata.0.resource_version": "9165",
                            "metadata.0.self_link": "/api/v1/namespaces/tools/secrets/grafana-secrets",
                            "metadata.0.uid": "8c47ddad-ef98-11e9-9b86-42010a80011c",
                            "type": "Opaque"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.kubernetes"
                },
                "kubernetes_secret.tiller": {
                    "type": "kubernetes_secret",
                    "depends_on": [],
                    "primary": {
                        "id": "kube-system/tiller",
                        "attributes": {
                            "data.%": "0",
                            "id": "kube-system/tiller",
                            "metadata.#": "1",
                            "metadata.0.annotations.%": "0",
                            "metadata.0.generate_name": "",
                            "metadata.0.generation": "0",
                            "metadata.0.labels.%": "0",
                            "metadata.0.name": "tiller",
                            "metadata.0.namespace": "kube-system",
                            "metadata.0.resource_version": "9163",
                            "metadata.0.self_link": "/api/v1/namespaces/kube-system/secrets/tiller",
                            "metadata.0.uid": "8c45ee01-ef98-11e9-9b86-42010a80011c",
                            "type": "Opaque"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.kubernetes"
                },
                "kubernetes_secret.vault_secret": {
                    "type": "kubernetes_secret",
                    "depends_on": [
                        "kubernetes_namespace.service_tools"
                    ],
                    "primary": {
                        "id": "tools/vault-secret",
                        "attributes": {
                            "data.%": "1",
                            "data.token": "Wq32vuLCCiLCcc7x6VAtB0yxRXZMRlWPICYPZjS4",
                            "id": "tools/vault-secret",
                            "metadata.#": "1",
                            "metadata.0.annotations.%": "0",
                            "metadata.0.generate_name": "",
                            "metadata.0.generation": "0",
                            "metadata.0.labels.%": "0",
                            "metadata.0.name": "vault-secret",
                            "metadata.0.namespace": "tools",
                            "metadata.0.resource_version": "9267",
                            "metadata.0.self_link": "/api/v1/namespaces/tools/secrets/vault-secret",
                            "metadata.0.uid": "8e390e55-ef98-11e9-9b86-42010a80011c",
                            "type": "Opaque"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.kubernetes"
                },
                "kubernetes_service.grafana_fuchicorp_service": {
                    "type": "kubernetes_service",
                    "depends_on": [
                        "kubernetes_secret.grafana_secrets"
                    ],
                    "primary": {
                        "id": "tools/grafana-fuchicorp-service",
                        "attributes": {
                            "id": "tools/grafana-fuchicorp-service",
                            "load_balancer_ingress.#": "0",
                            "metadata.#": "1",
                            "metadata.0.annotations.%": "0",
                            "metadata.0.generate_name": "",
                            "metadata.0.generation": "0",
                            "metadata.0.labels.%": "0",
                            "metadata.0.name": "grafana-fuchicorp-service",
                            "metadata.0.namespace": "tools",
                            "metadata.0.resource_version": "132321",
                            "metadata.0.self_link": "/api/v1/namespaces/tools/services/grafana-fuchicorp-service",
                            "metadata.0.uid": "113a73db-efe0-11e9-9b86-42010a80011c",
                            "spec.#": "1",
                            "spec.0.cluster_ip": "10.19.243.48",
                            "spec.0.external_ips.#": "0",
                            "spec.0.external_name": "",
                            "spec.0.external_traffic_policy": "",
                            "spec.0.load_balancer_ip": "",
                            "spec.0.load_balancer_source_ranges.#": "0",
                            "spec.0.port.#": "1",
                            "spec.0.port.0.name": "",
                            "spec.0.port.0.node_port": "0",
                            "spec.0.port.0.port": "8080",
                            "spec.0.port.0.protocol": "TCP",
                            "spec.0.port.0.target_port": "3000",
                            "spec.0.publish_not_ready_addresses": "false",
                            "spec.0.selector.%": "1",
                            "spec.0.selector.app": "grafana-fuchicorp-deployment",
                            "spec.0.session_affinity": "None",
                            "spec.0.type": "ClusterIP"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.kubernetes"
                },
                "kubernetes_service.nexus_fuchicorp_service": {
                    "type": "kubernetes_service",
                    "depends_on": [
                        "kubernetes_namespace.service_tools"
                    ],
                    "primary": {
                        "id": "tools/nexus-fuchicorp-service",
                        "attributes": {
                            "id": "tools/nexus-fuchicorp-service",
                            "load_balancer_ingress.#": "0",
                            "metadata.#": "1",
                            "metadata.0.annotations.%": "0",
                            "metadata.0.generate_name": "",
                            "metadata.0.generation": "0",
                            "metadata.0.labels.%": "0",
                            "metadata.0.name": "nexus-fuchicorp-service",
                            "metadata.0.namespace": "tools",
                            "metadata.0.resource_version": "132328",
                            "metadata.0.self_link": "/api/v1/namespaces/tools/services/nexus-fuchicorp-service",
                            "metadata.0.uid": "113f0202-efe0-11e9-9b86-42010a80011c",
                            "spec.#": "1",
                            "spec.0.cluster_ip": "10.19.243.173",
                            "spec.0.external_ips.#": "0",
                            "spec.0.external_name": "",
                            "spec.0.external_traffic_policy": "",
                            "spec.0.load_balancer_ip": "",
                            "spec.0.load_balancer_source_ranges.#": "0",
                            "spec.0.port.#": "2",
                            "spec.0.port.0.name": "http",
                            "spec.0.port.0.node_port": "0",
                            "spec.0.port.0.port": "8083",
                            "spec.0.port.0.protocol": "TCP",
                            "spec.0.port.0.target_port": "8081",
                            "spec.0.port.1.name": "docker-repo",
                            "spec.0.port.1.node_port": "0",
                            "spec.0.port.1.port": "8085",
                            "spec.0.port.1.protocol": "TCP",
                            "spec.0.port.1.target_port": "8085",
                            "spec.0.publish_not_ready_addresses": "false",
                            "spec.0.selector.%": "1",
                            "spec.0.selector.app": "nexus-fuchicorp-deployment",
                            "spec.0.session_affinity": "None",
                            "spec.0.type": "ClusterIP"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.kubernetes"
                },
                "kubernetes_service.vault_fuchicorp_service": {
                    "type": "kubernetes_service",
                    "depends_on": [
                        "kubernetes_namespace.service_tools"
                    ],
                    "primary": {
                        "id": "tools/vault-fuchicorp-service",
                        "attributes": {
                            "id": "tools/vault-fuchicorp-service",
                            "load_balancer_ingress.#": "0",
                            "metadata.#": "1",
                            "metadata.0.annotations.%": "0",
                            "metadata.0.generate_name": "",
                            "metadata.0.generation": "0",
                            "metadata.0.labels.%": "0",
                            "metadata.0.name": "vault-fuchicorp-service",
                            "metadata.0.namespace": "tools",
                            "metadata.0.resource_version": "132325",
                            "metadata.0.self_link": "/api/v1/namespaces/tools/services/vault-fuchicorp-service",
                            "metadata.0.uid": "113dabc0-efe0-11e9-9b86-42010a80011c",
                            "spec.#": "1",
                            "spec.0.cluster_ip": "10.19.249.122",
                            "spec.0.external_ips.#": "0",
                            "spec.0.external_name": "",
                            "spec.0.external_traffic_policy": "",
                            "spec.0.load_balancer_ip": "",
                            "spec.0.load_balancer_source_ranges.#": "0",
                            "spec.0.port.#": "1",
                            "spec.0.port.0.name": "",
                            "spec.0.port.0.node_port": "0",
                            "spec.0.port.0.port": "8082",
                            "spec.0.port.0.protocol": "TCP",
                            "spec.0.port.0.target_port": "8200",
                            "spec.0.publish_not_ready_addresses": "false",
                            "spec.0.selector.%": "1",
                            "spec.0.selector.app": "vault-fuchicorp-deployment",
                            "spec.0.session_affinity": "None",
                            "spec.0.type": "ClusterIP"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.kubernetes"
                },
                "kubernetes_service_account.common_service_account": {
                    "type": "kubernetes_service_account",
                    "depends_on": [
                        "kubernetes_secret.common_service_account_secret"
                    ],
                    "primary": {
                        "id": "tools/common-service-account",
                        "attributes": {
                            "automount_service_account_token": "true",
                            "default_secret_name": "common-service-account-token-dcc59",
                            "id": "tools/common-service-account",
                            "image_pull_secret.#": "0",
                            "metadata.#": "1",
                            "metadata.0.annotations.%": "0",
                            "metadata.0.generate_name": "",
                            "metadata.0.generation": "0",
                            "metadata.0.labels.%": "0",
                            "metadata.0.name": "common-service-account",
                            "metadata.0.namespace": "tools",
                            "metadata.0.resource_version": "9318",
                            "metadata.0.self_link": "/api/v1/namespaces/tools/serviceaccounts/common-service-account",
                            "metadata.0.uid": "8f9423be-ef98-11e9-9b86-42010a80011c",
                            "secret.#": "1",
                            "secret.3906486957.name": "common-service-account-secret"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.kubernetes"
                },
                "kubernetes_service_account.tiller": {
                    "type": "kubernetes_service_account",
                    "depends_on": [
                        "kubernetes_secret.tiller"
                    ],
                    "primary": {
                        "id": "kube-system/tiller",
                        "attributes": {
                            "automount_service_account_token": "false",
                            "default_secret_name": "tiller-token-6fckn",
                            "id": "kube-system/tiller",
                            "image_pull_secret.#": "0",
                            "metadata.#": "1",
                            "metadata.0.annotations.%": "0",
                            "metadata.0.generate_name": "",
                            "metadata.0.generation": "0",
                            "metadata.0.labels.%": "0",
                            "metadata.0.name": "tiller",
                            "metadata.0.namespace": "kube-system",
                            "metadata.0.resource_version": "9273",
                            "metadata.0.self_link": "/api/v1/namespaces/kube-system/serviceaccounts/tiller",
                            "metadata.0.uid": "8e5be861-ef98-11e9-9b86-42010a80011c",
                            "secret.#": "1",
                            "secret.4126980057.name": "tiller"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.kubernetes"
                },
                "local_file.external_dns_helm_chart_values": {
                    "type": "local_file",
                    "depends_on": [
                        "data.template_file.external_dns_values"
                    ],
                    "primary": {
                        "id": "832d1d0dff595bbf1b44817f40142dc0bb30697f",
                        "attributes": {
                            "content": "## Global Docker image parameters\n## Please, note that this will override the image parameters, including dependencies, configured to use the global value\n## Current available global Docker image parameters: imageRegistry and imagePullSecrets\n##\n# global:\n#   imageRegistry: myRegistryName\n#   imagePullSecrets:\n#     - myRegistryKeySecretName\n\n## Bitnami external-dns image version\n## ref: https://hub.docker.com/r/bitnami/external-dns/tags/\n##\nimage:\n  registry: docker.io\n  repository: bitnami/external-dns\n  tag: 0.5.17-r16\n  ## Specify a imagePullPolicy\n  ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'\n  ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images\n  ##\n  pullPolicy: IfNotPresent\n  ## Optionally specify an array of imagePullSecrets.\n  ## Secrets must be manually created in the namespace.\n  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/\n  ##\n  # pullSecrets:\n  #   - myRegistryKeySecretName\n\n## String to partially override external-dns.fullname template (will maintain the release name)\n# nameOverride:\n\n## String to fully override external-dns.fullname template\n# fullnameOverride:\n\n## K8s resources type to be observed for new DNS entries by ExternalDNS\n##\nsources:\n- ingress\n# - service\n# - crd\n\n## DNS provider where the DNS records will be created. Available providers are:\n## - aws, azure, cloudflare, coredns, designate, digitalocoean, google, infoblox, rfc2136\n##\nprovider: google\n\n## Whether to publish DNS records for ClusterIP services or not (optional)\n##\npublishInternalServices: true\n\n## AWS configuration to be set via arguments/env. variables\n##\naws:\n  ## AWS credentials\n  ##\n  credentials:\n    secretKey: \"\"\n    accessKey: \"\"\n    ## pre external-dns 0.5.9 home dir should be `/root/.aws`\n    ##\n    mountPath: \"/.aws\"\n  ## AWS region\n  ##\n  region: \"us-east-1\"\n  ## Zone Filter. Available values are: public, private\n  ##\n  zoneType: \"\"\n  ## AWS Role to assume\n  ##\n  assumeRoleArn: \"\"\n  ## Maximum number of changes that will be applied in each batch\n  ##\n  batchChangeSize: 1000\n  ## AWS Zone tags\n  ##\n  zoneTags: []\n\n## Azure configuration to be set via arguments/env. variables\n##\nazure:\n  ## When a secret to load azure.json is not specified,\n  ## the host's /etc/kubernetes/azure.json will be used\n  ##\n  secretName: \"\"\n  ## Azure resource group to use\n  ##\n  resourceGroup: \"\"\n\n## Cloudflare configuration to be set via arguments/env. variables\n##\ncloudflare:\n  ## `CF_API_KEY` to set in the environment\n  ##\n  apiKey: \"\"\n  ## `CF_API_EMAIL` to set in the environment\n  ##\n  email: \"\"\n  ## Enable the proxy feature of Cloudflare\n  ##\n  proxied: true\n\n## CoreDNS configuration to be set via arguments/env variables\n##\ncoredns:\n  ## Comma-separated list of the etcd endpoints\n  ## Secure (https) endpoints can be used as well, in that case `etcdTLS` section\n  ## should be filled in accordingly\n  ##\n  etcdEndpoints: \"http://etcd-extdns:2379\"\n  ## Configuration of the secure communication and client authentication to the etcd cluster\n  ## If enabled all the values under this key must hold a valid data\n  ##\n  etcdTLS:\n    ## Enable or disable secure communication and client authentication to the etcd cluster\n    ##\n    enabled: false\n    ## Name of the existing secret containing cert files for client communication\n    ## ref: https://github.com/etcd-io/etcd/blob/master/Documentation/op-guide/security.md\n    ## ref (secret creation):\n    ##  https://github.com/bitnami/charts/tree/master/bitnami/etcd#configure-certificates-for-client-communication\n    ##\n    secretName: \"etcd-client-certs\"\n    ## Location of the mounted certificates inside external-dns pod\n    ##\n    mountPath: \"/etc/coredns/tls/etcd\"\n    ## CA PEM file used to sign etcd TLS cert, should exist in the secret provided above\n    ##\n    caFilename: \"ca.crt\"\n    ## Certificate PEM file, should exist in the secret provided above\n    ## Will be used by external-dns to authenticate against etcd\n    ##\n    certFilename: \"cert.pem\"\n    ## Private key PEM file, should exist in the secret provided above\n    ## Will be used by external-dns to authenticate against etcd\n    ##\n    keyFilename: \"key.pem\"\n\n## OpenStack Designate provider configuration to be set via arguments/env. variables\n##\ndesignate:\n  ## Use a custom CA (optional)\n  ##\n  customCA:\n    enabled: false\n    ## The content of the custom CA file\n    ##\n    content: \"\"\n    ## Location to mount custom CA\n    ##\n    mountPath: \"/config/designate\"\n    ## Custom CA filename\n    ##\n    filename: \"designate-ca.pem\"\n\n## DigitalOcean configuration to be set via arguments/env. variables\n##\ndigitalocean:\n  ## `DO_TOKEN` to set in the environment\n  ##\n  apiToken: \"\"\n\n## Google configuration to be set via arguments/env. variables\n##\ngoogle:\n  ## Google Project to use\n  ##\n  project: fuchicorp-project-256020\n  ## Google Application Credentials\n  ##\n  serviceAccountSecret: \"fuchicorp-service-account\"\n\n  # serviceAccountKey: \"fuchicorp-service-account.json\"\n\n## Infoblox configuration to be set via arguments/env. variables\n##\ninfoblox:\n  ## Required keys\n  ##\n  wapiUsername: \"admin\"\n  wapiPassword: \"\"\n  gridHost: \"\"\n  ## Optional keys\n  ##\n  domainFilter: \"\"\n  noSslVerify: false\n  wapiPort: \"\"\n  wapiVersion: \"\"\n  wapiConnectionPoolSize: \"\"\n  wapiHttpTimeout: \"\"\n\n## RFC 2136 configuration to be set via arguments/env. variables\n##\nrfc2136:\n  host: \"fuchicorp.com\"\n  port: 53\n  zone: \"fuchicorp\"\n  tsigSecret: \"\"\n  tsigSecretAlg: hmac-sha256\n  tsigKeyname: externaldns-key\n  tsigAxfr: true\n\n## PowerDNS configuration to be set via arguments/env. variables\n##\npdns:\n  apiUrl: \"\"\n  apiPort: \"8081\"\n  apiKey: \"\"\n\n## Limit possible target zones by domain suffixes (optional)\n##\ndomainFilters: []\n## Limit possible target zones by zone id (optional)\n##\nzoneIdFilters: []\n## Filter sources managed by external-dns via annotation using label selector semantics (optional)\n##\nannotationFilter: \"\"\n## When enabled, prints DNS record changes rather than actually performing them\n##\ndryRun: false\n## Adjust the interval for DNS updates\n##\ninterval: \"1m\"\n## Verbosity of the ExternalDNS logs. Available values are:\n## - panic, debug, info, warn, error, fatal\n##\nlogLevel: info\n## Modify how DNS records are sychronized between sources and providers (options: sync, upsert-only)\n##\npolicy: upsert-only\n## Registry Type. Available types are: txt, noop\n## ref: https://github.com/kubernetes-incubator/external-dns/blob/master/docs/proposal/registry.md\n##\nregistry: \"txt\"\n## TXT Registry Identifier\n##\ntxtOwnerId: \"\"\n## Prefix to create a TXT record with a name following the pattern prefix.\u003cCNAME record\u003e\n##\n# txtPrefix: \"\"\n## Load balancer service to be used; ie: custom-istio-namespace/custom-istio-ingressgateway.\n## Omit to use the default (istio-system/istio-ingressgateway)\n##\nistioIngressGateways: []\n\n## Extra Arguments to passed to external-dns\n##\nextraArgs: {}\n## Extra env. variable to set on external-dns container.\n##\n## extraEnv:\n## - name: VARNAME1\n##   value: value1\n## - name: VARNAME2\n##   valueFrom:\n##     secretKeyRef:\n##       name: existing-secret\n##       key: varname2-key\nextraEnv: []\n\n## Replica count\n##\nreplicas: 1\n\n## Affinity for pod assignment (this value is evaluated as a template)\n## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity\n##\naffinity: {}\n## Node labels for pod assignment (this value is evaluated as a template)\n## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector\n##\nnodeSelector: {}\n## Tolerations for pod assignment (this value is evaluated as a template)\n## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#taints-and-tolerations-beta-feature\n##\ntolerations: []\n## Annotations for external-dns pods\n##\npodAnnotations: {}\n## Additional labels for the pod(s).\n##\npodLabels: {}\n## Pod priority class name\n##\npriorityClassName: \"\"\n\n## Options for the source type \"crd\"\n##\ncrd:\n  ## Install and use the integrated DNSEndpoint CRD\n  create: false\n  ## Change these to use an external DNSEndpoint CRD (E.g. from kubefed)\n  apiversion: \"\"\n  kind: \"\"\n\n## Kubernetes svc configutarion\n##\nservice:\n  ## Kubernetes svc type\n  ##\n  type: ClusterIP\n  port: 7979\n  ## Specify the nodePort value for the LoadBalancer and NodePort service types for the client port\n  ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport\n  ##\n  # nodePort:\n  ## Static clusterIP or None for headless services\n  ##\n  # clusterIP: \"\"\n  ## External IP list to use with ClusterIP service type\n  ##\n  externalIPs: []\n  ## Use loadBalancerIP to request a specific static IP,\n  ## otherwise leave blank\n  ##\n  # loadBalancerIP:\n  ## Address that are allowed when svc is LoadBalancer\n  ##\n  loadBalancerSourceRanges: []\n  ## Provide any additional annotations which may be required. This can be used to\n  ## set the LoadBalancer service type to internal only.\n  ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer\n  ##\n  annotations: {}\n\n## RBAC parameteres\n## https://kubernetes.io/docs/reference/access-authn-authz/rbac/\n##\nrbac:\n  create: true\n  ## Service Account for pods\n  ## https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/\n  ##\n  serviceAccountName: external-dns-service-account\n  ## Annotations for the Service Account\n  ##\n  serviceAccountAnnotations: {}\n  ## RBAC API version\n  ##\n  apiVersion: v1beta1\n  ## Podsecuritypolicy\n  ##\n  pspEnabled: false\n\n## Kubernetes Security Context\n## https://kubernetes.io/docs/tasks/configure-pod-container/security-context/\n##\nsecurityContext: {}\n  # allowPrivilegeEscalation: false\n  # readOnlyRootFilesystem: true\n  # capabilities:\n  #   drop: [\"ALL\"]\npodSecurityContext:\n  fsGroup: 1001\n  runAsUser: 1001\n  # runAsNonRoot: true\n\n## Configure resource requests and limits\n## ref: http://kubernetes.io/docs/user-guide/compute-resources/\n##\nresources: {}\n#  limits:\n#    cpu: 50m\n#    memory: 50Mi\n#  requests:\n#    memory: 50Mi\n#    cpu: 10m\n\n## Liveness Probe. The block is directly forwarded into the deployment, so you can use whatever livenessProbe configuration you want.\n## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/\n##\nlivenessProbe:\n  httpGet:\n    path: /healthz\n    port: http\n  initialDelaySeconds: 10\n  periodSeconds: 10\n  timeoutSeconds: 5\n  failureThreshold: 2\n  successThreshold: 1\n## Readiness Probe. The block is directly forwarded into the deployment, so you can use whatever readinessProbe configuration you want.\n## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/\n##\nreadinessProbe:\n  httpGet:\n    path: /healthz\n    port: http\n  initialDelaySeconds: 5\n  periodSeconds: 10\n  timeoutSeconds: 5\n  failureThreshold: 6\n  successThreshold: 1\n\n## Prometheus Exporter / Metrics\n##\nmetrics:\n  enabled: false\n  ## Metrics exporter pod Annotation and Labels\n  ##",
                            "directory_permission": "0777",
                            "file_permission": "0777",
                            "filename": "helm-external-dns/.cache/external_dns_values.yaml",
                            "id": "832d1d0dff595bbf1b44817f40142dc0bb30697f"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local"
                },
                "local_file.ingress_controller_helm_chart_values": {
                    "type": "local_file",
                    "depends_on": [
                        "data.template_file.ingress_controller_values"
                    ],
                    "primary": {
                        "id": "60e4d954e7eda1a3ee4ba27af48fe6bfb75d908b",
                        "attributes": {
                            "content": "## nginx configuration\n## Ref: https://github.com/kubernetes/ingress/blob/master/controllers/nginx/configuration.md\n##\ncontroller:\n  name: controller\n  image:\n    repository: quay.io/kubernetes-ingress-controller/nginx-ingress-controller\n    tag: \"0.26.1\"\n    pullPolicy: IfNotPresent\n    # www-data -\u003e uid 33\n    runAsUser: 33\n    allowPrivilegeEscalation: true\n\n  # Can be changed to old api for compatibility reasons: extensions/v1beta1\n  apiVersion: apps/v1\n\n  # Configures the ports the nginx-controller listens on\n  containerPort:\n    http: 80\n    https: 443\n\n  # Will add custom configuration options to Nginx https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap/\n  config: {}\n    # use-proxy-protocol: \"true\"\n    # use-forwarded-headers: \"true\"\n    # forwarded-for-header: \"X-Forwarded-For\"\n    # compute-full-forwarded-for: \"true\"\n\n  # Will add custom headers before sending traffic to backends according to https://github.com/kubernetes/ingress-nginx/tree/master/docs/examples/customization/custom-headers\n  proxySetHeaders: {}\n\n  # Will add custom headers before sending response traffic to the client according to: https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap/#add-headers\n  addHeaders: {}\n\n  # Required for use with CNI based kubernetes installations (such as ones set up by kubeadm),\n  # since CNI and hostport don't mix yet. Can be deprecated once https://github.com/kubernetes/kubernetes/issues/23920\n  # is merged\n  hostNetwork: false\n\n  # Optionally change this to ClusterFirstWithHostNet in case you have 'hostNetwork: true'.\n  # By default, while using host network, name resolution uses the host's DNS. If you wish nginx-controller\n  # to keep resolving names inside the k8s network, use ClusterFirstWithHostNet.\n  dnsPolicy: ClusterFirst\n\n  # Bare-metal considerations via the host network https://kubernetes.github.io/ingress-nginx/deploy/baremetal/#via-the-host-network\n  # Ingress status was blank because there is no Service exposing the NGINX Ingress controller in a configuration using the host network, the default --publish-service flag used in standard cloud setups does not apply\n  reportNodeInternalIp: false\n\n  ## Use host ports 80 and 443\n  daemonset:\n    useHostPort: false\n\n    hostPorts:\n      http: 80\n      https: 443\n\n  ## Required only if defaultBackend.enabled = false\n  ## Must be \u003cnamespace\u003e/\u003cservice_name\u003e\n  ##\n  defaultBackendService: \"\"\n\n  ## Election ID to use for status update\n  ##\n  electionID: ingress-controller-leader\n\n  ## Name of the ingress class to route through this controller\n  ##\n  ingressClass: nginx\n\n  # labels to add to the pod container metadata\n  podLabels: {}\n  #  key: value\n\n  ## Security Context policies for controller pods\n  ## See https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster/ for\n  ## notes on enabling and using sysctls\n  ##\n  podSecurityContext: {}\n\n  ## Allows customization of the external service\n  ## the ingress will be bound to via DNS\n  publishService:\n    enabled: true\n    ## Allows overriding of the publish service to bind to\n    ## Must be \u003cnamespace\u003e/\u003cservice_name\u003e\n    ##\n    pathOverride: \"\"\n\n  ## Limit the scope of the controller\n  ##\n  scope:\n    enabled: false\n    namespace: \"\"   # defaults to .Release.Namespace\n\n  ## Allows customization of the configmap / nginx-configmap namespace\n  ##\n  configMapNamespace: \"\"   # defaults to .Release.Namespace\n\n  ## Allows customization of the tcp-services-configmap namespace\n  ##\n  tcp:\n    configMapNamespace: \"\"   # defaults to .Release.Namespace\n\n  ## Allows customization of the udp-services-configmap namespace\n  ##\n  udp:\n    configMapNamespace: \"\"   # defaults to .Release.Namespace\n\n  ## Additional command line arguments to pass to nginx-ingress-controller\n  ## E.g. to specify the default SSL certificate you can use\n  ## extraArgs:\n  ##   default-ssl-certificate: \"\u003cnamespace\u003e/\u003csecret_name\u003e\"\n  extraArgs: {}\n\n  ## Additional environment variables to set\n  extraEnvs: []\n  # extraEnvs:\n  #   - name: FOO\n  #     valueFrom:\n  #       secretKeyRef:\n  #         key: FOO\n  #         name: secret-resource\n\n  ## DaemonSet or Deployment\n  ##\n  kind: Deployment\n\n  # The update strategy to apply to the Deployment or DaemonSet\n  ##\n  updateStrategy: {}\n  #  rollingUpdate:\n  #    maxUnavailable: 1\n  #  type: RollingUpdate\n\n  # minReadySeconds to avoid killing pods before we are ready\n  ##\n  minReadySeconds: 0\n\n\n  ## Node tolerations for server scheduling to nodes with taints\n  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\n  ##\n  tolerations: []\n  #  - key: \"key\"\n  #    operator: \"Equal|Exists\"\n  #    value: \"value\"\n  #    effect: \"NoSchedule|PreferNoSchedule|NoExecute(1.6 only)\"\n\n  ## Affinity and anti-affinity\n  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity\n  ##\n  affinity: {}\n    # # An example of preferred pod anti-affinity, weight is in the range 1-100\n    # podAntiAffinity:\n    #   preferredDuringSchedulingIgnoredDuringExecution:\n    #   - weight: 100\n    #     podAffinityTerm:\n    #       labelSelector:\n    #         matchExpressions:\n    #         - key: app\n    #           operator: In\n    #           values:\n    #           - nginx-ingress\n    #       topologyKey: kubernetes.io/hostname\n\n    # # An example of required pod anti-affinity\n    # podAntiAffinity:\n    #   requiredDuringSchedulingIgnoredDuringExecution:\n    #   - labelSelector:\n    #       matchExpressions:\n    #       - key: app\n    #         operator: In\n    #         values:\n    #         - nginx-ingress\n    #     topologyKey: \"kubernetes.io/hostname\"\n\n  ## terminationGracePeriodSeconds\n  ##\n  terminationGracePeriodSeconds: 60\n\n  ## Node labels for controller pod assignment\n  ## Ref: https://kubernetes.io/docs/user-guide/node-selection/\n  ##\n  nodeSelector: {}\n\n  ## Liveness and readiness probe values\n  ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes\n  ##\n  livenessProbe:\n    failureThreshold: 3\n    initialDelaySeconds: 10\n    periodSeconds: 10\n    successThreshold: 1\n    timeoutSeconds: 1\n    port: 10254\n  readinessProbe:\n    failureThreshold: 3\n    initialDelaySeconds: 10\n    periodSeconds: 10\n    successThreshold: 1\n    timeoutSeconds: 1\n    port: 10254\n\n  ## Annotations to be added to controller pods\n  ##\n  podAnnotations: {}\n\n  replicaCount: 1\n\n  minAvailable: 1\n\n  resources: {}\n  #  limits:\n  #    cpu: 100m\n  #    memory: 64Mi\n  #  requests:\n  #    cpu: 100m\n  #    memory: 64Mi\n\n  autoscaling:\n    enabled: false\n    minReplicas: 1\n    maxReplicas: 11\n    targetCPUUtilizationPercentage: 50\n    targetMemoryUtilizationPercentage: 50\n\n  ## Override NGINX template\n  customTemplate:\n    configMapName: \"\"\n    configMapKey: \"\"\n\n  service:\n    enabled: true\n\n    annotations: {}\n    labels: {}\n    omitClusterIP: false\n    clusterIP: \"\"\n\n    ## List of IP addresses at which the controller services are available\n    ## Ref: https://kubernetes.io/docs/user-guide/services/#external-ips\n    ##\n    externalIPs: []\n\n    loadBalancerIP: \"\"\n    loadBalancerSourceRanges: []\n\n    enableHttp: true\n    enableHttps: true\n\n    ## Set external traffic policy to: \"Local\" to preserve source IP on\n    ## providers supporting it\n    ## Ref: https://kubernetes.io/docs/tutorials/services/source-ip/#source-ip-for-services-with-typeloadbalancer\n    externalTrafficPolicy: Local\n\n    healthCheckNodePort: 0\n\n    ports:\n      http: 80\n      https: 443\n\n    targetPorts:\n      http: http\n      https: https\n\n    type: LoadBalancer\n\n    # type: NodePort\n    # nodePorts:\n    #   http: 32080\n    #   https: 32443\n    #   tcp:\n    #     8080: 32808\n    nodePorts:\n      http: \"\"\n      https: \"\"\n      tcp: {}\n      udp: {}\n\n  extraContainers: []\n  ## Additional containers to be added to the controller pod.\n  ## See https://github.com/lemonldap-ng-controller/lemonldap-ng-controller as example.\n  #  - name: my-sidecar\n  #    image: nginx:latest\n  #  - name: lemonldap-ng-controller\n  #    image: lemonldapng/lemonldap-ng-controller:0.2.0\n  #    args:\n  #      - /lemonldap-ng-controller\n  #      - --alsologtostderr\n  #      - --configmap=$(POD_NAMESPACE)/lemonldap-ng-configuration\n  #    env:\n  #      - name: POD_NAME\n  #        valueFrom:\n  #          fieldRef:\n  #            fieldPath: metadata.name\n  #      - name: POD_NAMESPACE\n  #        valueFrom:\n  #          fieldRef:\n  #            fieldPath: metadata.namespace\n  #    volumeMounts:\n  #    - name: copy-portal-skins\n  #      mountPath: /srv/var/lib/lemonldap-ng/portal/skins\n\n  extraVolumeMounts: []\n  ## Additional volumeMounts to the controller main container.\n  #  - name: copy-portal-skins\n  #   mountPath: /var/lib/lemonldap-ng/portal/skins\n\n  extraVolumes: []\n  ## Additional volumes to the controller pod.\n  #  - name: copy-portal-skins\n  #    emptyDir: {}\n\n  extraInitContainers: []\n  ## Containers, which are run before the app containers are started.\n  # - name: init-myservice\n  #   image: busybox\n  #   command: ['sh', '-c', 'until nslookup myservice; do echo waiting for myservice; sleep 2; done;']\n\n  admissionWebhooks:\n    enabled: false\n    failurePolicy: Fail\n    port: 8443\n\n    service:\n      annotations: {}\n      omitClusterIP: false\n      clusterIP: \"\"\n      externalIPs: []\n      loadBalancerIP: \"\"\n      loadBalancerSourceRanges: []\n      servicePort: 443\n      type: ClusterIP\n\n    patch:\n      enabled: true\n      image:\n        repository: jettech/kube-webhook-certgen\n        tag: v1.0.0\n        pullPolicy: IfNotPresent\n      ## Provide a priority class name to the webhook patching job\n      ##\n      priorityClassName: \"\"\n      podAnnotations: {}\n      nodeSelector: {}\n\n  metrics:\n    enabled: false\n\n    service:\n      annotations: {}\n      # prometheus.io/scrape: \"true\"\n      # prometheus.io/port: \"10254\"\n\n      omitClusterIP: false\n      clusterIP: \"\"\n\n      ## List of IP addresses at which the stats-exporter service is available\n      ## Ref: https://kubernetes.io/docs/user-guide/services/#external-ips\n      ##\n      externalIPs: []\n\n      loadBalancerIP: \"\"\n      loadBalancerSourceRanges: []\n      servicePort: 9913\n      type: ClusterIP\n\n    serviceMonitor:\n      enabled: false\n      additionalLabels: {}\n      namespace: \"\"\n      scrapeInterval: 30s\n      # honorLabels: true\n\n    prometheusRule:\n      enabled: false\n      additionalLabels: {}\n      namespace: \"\"\n      rules: []\n        # # These are just examples rules, please adapt them to your needs\n        # - alert: TooMany500s\n        #   expr: 100 * ( sum( nginx_ingress_controller_requests{status=~\"5.+\"} ) / sum(nginx_ingress_controller_requests) ) \u003e 5\n        #   for: 1m\n        #   labels:\n        #     severity: critical\n        #   annotations:\n        #     description: Too many 5XXs\n        #     summary: More than 5% of the all requests did return 5XX, this require your attention\n        # - alert: TooMany400s\n        #   expr: 100 * ( sum( nginx_ingress_controller_requests{status=~\"4.+\"} ) / sum(nginx_ingress_controller_requests) ) \u003e 5\n        #   for: 1m\n        #   labels:\n        #     severity: critical\n        #   annotations:\n        #     description: Too many 4XXs\n        #     summary: More than 5% of the all requests did return 4XX, this require your attention\n\n\n  lifecycle: {}\n\n  priorityClassName: \"\"\n\n## Rollback limit\n##\nrevisionHistoryLimit: 10\n\n## Default 404 backend\n##\ndefaultBackend:\n\n  ## If false, controller.defaultBackendService must be provided\n  ##\n  enabled: true\n\n  # Can be changed to old api for compatibility reasons: extensions/v1beta1\n  apiVersion: apps/v1\n\n  name: default-backend\n  image:\n    repository: k8s.gcr.io/defaultbackend-amd64\n    tag: \"1.5\"\n    pullPolicy: IfNotPresent\n    # nobody user -\u003e uid 65534\n    runAsUser: 65534\n\n  extraArgs: {}\n\n  serviceAccount:\n    create: true\n    name:\n  ## Additional environment variables to set for defaultBackend pods\n  extraEnvs: []\n\n  port: 8080\n\n  ## Readiness and liveness probes for default backend\n  ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/\n  ##\n  livenessProbe:\n    failureThreshold: 3\n    initialDelaySeconds: 30\n    periodSeconds: 10\n    successThreshold: 1\n    timeoutSeconds: 5\n  readinessProbe:\n    failureThreshold: 6\n    initialDelaySeconds: 0\n    periodSeconds: 5\n    successThreshold: 1\n    timeoutSeconds: 5\n\n  ## Node tolerations for server scheduling to nodes with taints\n  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\n  ##\n  tolerations: []\n  #  - key: \"key\"\n  #    operator: \"Equal|Exists\"\n  #    value: \"value\"\n  #    effect: \"NoSchedule|PreferNoSchedule|NoExecute(1.6 only)\"\n\n  affinity: {}\n\n  ## Security Context policies for controller pods\n  ## See https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster/ for\n  ## notes on enabling and using sysctls\n  ##\n  podSecurityContext: {}\n\n  # labels to add to the pod container metadata\n  podLabels: {}\n  #  key: value\n\n  ## Node labels for default backend pod assignment\n  ## Ref: https://kubernetes.io/docs/user-guide/node-selection/\n  ##\n  nodeSelector: {}\n\n  ## Annotations to be added to default backend pods\n  ##\n  podAnnotations: {}\n\n  replicaCount: 1\n\n  minAvailable: 1\n\n  resources: {}\n  # limits:\n  #   cpu: 10m\n  #   memory: 20Mi\n  # requests:\n  #   cpu: 10m\n  #   memory: 20Mi\n\n  service:\n    annotations: {}\n    omitClusterIP: false\n    clusterIP: \"\"\n\n    ## List of IP addresses at which the default backend service is available\n    ## Ref: https://kubernetes.io/docs/user-guide/services/#external-ips\n    ##\n    externalIPs: []\n\n    loadBalancerIP: \"\"\n    loadBalancerSourceRanges: []\n    servicePort: 80\n    type: ClusterIP\n\n  priorityClassName: \"\"\n\n## Enable RBAC as per https://github.com/kubernetes/ingress/tree/master/examples/rbac/nginx and https://github.com/kubernetes/ingress/issues/266\nrbac:\n  create: true\n\n# If true, create \u0026 use Pod Security Policy resources\n# https://kubernetes.io/docs/concepts/policy/pod-security-policy/\npodSecurityPolicy:\n  enabled: false\n\nserviceAccount:\n  create: true\n  name:\n\n## Optional array of imagePullSecrets containing private registry credentials\n## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/\nimagePullSecrets: []\n# - name: secretName\n\n# TCP service key:value pairs\n# Ref: https://github.com/kubernetes/contrib/tree/master/ingress/controllers/nginx/examples/tcp\n##\ntcp: {}\n#  8080: \"default/example-tcp-svc:9000\"\n\n# UDP service key:value pairs\n# Ref: https://github.com/kubernetes/contrib/tree/master/ingress/controllers/nginx/examples/udp\n##\nudp: {}\n#  53: \"kube-system/kube-dns:53\"",
                            "directory_permission": "0777",
                            "file_permission": "0777",
                            "filename": "helm-ingress-controller/.cache/ingress_controller_values.yaml",
                            "id": "60e4d954e7eda1a3ee4ba27af48fe6bfb75d908b"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local"
                },
                "local_file.jenkins_helm_chart_values": {
                    "type": "local_file",
                    "depends_on": [
                        "data.template_file.jenkins_values"
                    ],
                    "primary": {
                        "id": "77785d078177bbb06e85fd5dd7ca17a4b6cb3799",
                        "attributes": {
                            "content": "# Default values for jenkins.\n# This is a YAML-formatted file.\n# Declare name/value pairs to be passed into your templates.\n# name: value\n\n## Overrides for generated resource names\n# See templates/_helpers.tpl\n# nameOverride:\n# fullnameOverride:\n\n#Common\n\nCronSchedule: \"*/30 * * * *\"\n\nMaster:\n  Name: jenkins-master\n  Image: \"jenkins/jenkins\"\n  ImageTag: \"lts\"\n  ImagePullPolicy: \"Always\"\n# ImagePullSecret: jenkins\n  Component: \"jenkins-master\"\n  UseSecurity: true\n  AdminUser: 'admin'\n  AdminPassword: 'B1JsVZtr4rvJfmnnafqRjTEKLsT'\n  Cpu: \"1\"\n  Memory: \"1G\"\n  CpuLimit: \"2\"\n  MemoryLimit: \"2G\"\n  Affinity:\n    nodeAffinity:\n      preferredDuringSchedulingIgnoredDuringExecution:\n      - weight: 1\n        preference:\n          matchExpressions:\n          - key: jenkinsPreferred\n            operator: In\n            values:\n            - \"true\"\n\n  # Environment variables that get added to the init container (useful for e.g. http_proxy)\n  # InitContainerEnv:\n  #   - name: GIT_TOKEN\n  #     value: ad9015cdfda2935a25cae144d9bf1ede5b731196\n  ContainerEnv:\n    - name: GIT_TOKEN\n      value: ad9015cdfda2935a25cae144d9bf1ede5b731196\n\n    - name: JENKINS_GITHUB_AUTH_ID\n      value: 3595c43658d4c3417c95\n\n    - name: JENKINS_GITHUB_AUTH_SECRET\n      value: 06c9eed36e89369f860d0ac39aca64d6283ad74b\n\n  # Set min/max heap here if needed with:\n  JavaOpts: \"-Xms1g -Xmx1024m\"\n  # JenkinsOpts: \"\"\n  # JenkinsUriPrefix: \"/jenkins\"\n  # Set RunAsUser to 1000 to let Jenkins run as non-root user 'jenkins' which exists in 'jenkins/jenkins' docker image.\n  # When setting RunAsUser to a different value than 0 also set FsGroup to the same value:\n  # RunAsUser: \u003cdefaults to 0\u003e\n  # FsGroup: \u003cwill be omitted in deployment if RunAsUser is 0\u003e\n  ServicePort: 443\n  # For minikube, set this to NodePort, elsewhere use LoadBalancer\n  # Use ClusterIP if your setup includes ingress controller\n  ServiceType: ClusterIP\n  # Master Service annotations\n  ServiceAnnotations:\n    # service.beta.kubernetes.io/aws-load-balancer-backend-protocol: http\n    # nginx.ingress.kubernetes.io/secure-backends: \"true\"\n    # service.beta.kubernetes.io/aws-load-balancer-additional-resource-tags:\n    # service.beta.kubernetes.io/aws-load-balancer-backend-protocol: 'http'\n    # service.beta.kubernetes.io/aws-load-balancer-ssl-cert: '\\$\\{ssl_arn\\}'\n    # service.beta.kubernetes.io/aws-load-balancer-internal: '0.0.0.0/0'\n  #   service.beta.kubernetes.io/aws-load-balancer-backend-protocol: https\n  # Used to create Ingress record (should used with ServiceType: ClusterIP)\n  HostName: jenkins.fuchicorp.com\n  HostNameAlias: builder.fuchicorp.com\n  cluster_sub_domain: fuchicorp.com\n  # NodePort: \u003cto set explicitly, choose port between 30000-32767\n  ContainerPort: 8080\n  # Enable Kubernetes Liveness and Readiness Probes\n  HealthProbes: true\n  HealthProbesTimeout: 100\n  HealthProbeLivenessFailureThreshold: 12\n  SlaveListenerPort: 50000\n  DisabledAgentProtocols:\n    - JNLP-connect\n    - JNLP2-connect\n  CSRF:\n    DefaultCrumbIssuer:\n      Enabled: true\n      ProxyCompatability: true\n  CLI: true\n  # Kubernetes service type for the JNLP slave service\n  # SETTING THIS TO \"LoadBalancer\" IS A HUGE SECURITY RISK: https://github.com/kubernetes/charts/issues/1341\n  SlaveListenerServiceType: ClusterIP\n  SlaveListenerServiceAnnotations: {}\n  LoadBalancerSourceRanges:\n  - 0.0.0.0/0\n  # Optionally assign a known public LB IP\n  # LoadBalancerIP: 1.2.3.4\n  # Optionally configure a JMX port\n  # requires additional JavaOpts, ie\n  # JavaOpts: \u003e\n  #   -Dcom.sun.management.jmxremote.port=4000\n  #   -Dcom.sun.management.jmxremote.authenticate=false\n  #   -Dcom.sun.management.jmxremote.ssl=false\n  # JMXPort: 4000\n  # Jenkins Global Environment Variables to be created during Jenkins master initial setup\n\n  # GlobalEnvVariables:\n  #   - name: GIT_TOKEN\n  #     value: ad9015cdfda2935a25cae144d9bf1ede5b731196\n  #   - name: git_server_host\n  #     value: \"coderepository.mcd.com\"\n  #   - name: sonar_host_url\n  #     value: \"https://sonarqube.sharedtools.vet-tools.digitalecp.mcd.com\"\n  #\n  CustomConfigMap: false\n  # Node labels and tolerations for pod assignment\n  # ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector\n  # ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#taints-and-tolerations-beta-feature\n  NodeSelector: {}\n  Tolerations: {}\n  Ingress:\n    ApiVersion: extensions/v1beta1\n    Annotations:\n      kubernetes.io/ingress.class: nginx\n      certmanager.k8s.io/cluster-issuer: letsencrypt-fuchicorp-prod\n    # kubernetes.io/tls-acme: \"true\"\n    TLS:\n    - hosts:\n      - jenkins.fuchicorp.com\n      secretName: \"jenkins-letsencrypt-fuchicorp-prod\"\n  # List of plugins to be install during Jenkins master start\n  InstallPlugins:\n    - kubernetes:1.18.2\n    - workflow-job:2.33\n    - workflow-aggregator:2.6\n    - credentials-binding:1.19\n    - git:3.11.0\n    - docker-build-step:2.4\n    - oki-docki:1.1\n    - slack:2.34\n    - role-strategy:2.14\n    - github-oauth:0.33\n    - authorize-project:1.3.0\n  # Used to approve a list of groovy functions in pipelines used the script-security plugin. Can be viewed under /scriptApproval\n  ScriptApproval:\n    - \"method com.michelin.cio.hudson.plugins.rolestrategy.RoleBasedAuthorizationStrategy addRole\"\n    - \"method com.michelin.cio.hudson.plugins.rolestrategy.RoleBasedAuthorizationStrategy addRole java.lang.String com.michelin.cio.hudson.plugins.rolestrategy.Role\"\n    - \"method com.michelin.cio.hudson.plugins.rolestrategy.RoleBasedAuthorizationStrategy assignRole java.lang.String com.michelin.cio.hudson.plugins.rolestrategy.Role java.lang.String\"\n    - \"method hudson.model.Saveable save\"\n    - \"method java.lang.Class getConstructors\"\n    - \"method java.net.HttpURLConnection setRequestMethod java.lang.String\"\n    - \"method java.net.URL openConnection\"\n    - \"method java.net.URLConnection getInputStream\"\n    - \"method java.net.URLConnection setRequestProperty java.lang.String java.lang.String\"\n    - \"method jenkins.model.Jenkins getAuthorizationStrategy\"\n    - \"method jenkins.model.Jenkins getSecurityRealm\"\n    - \"method jenkins.model.Jenkins isQuietingDown\"\n    - \"method jenkins.model.Jenkins setAuthorizationStrategy hudson.security.AuthorizationStrategy\"\n    - \"method jenkins.model.Jenkins setSecurityRealm hudson.security.SecurityRealm\"\n    - \"method net.sf.json.JSONObject optString java.lang.String java.lang.String\"\n    - \"new com.michelin.cio.hudson.plugins.rolestrategy.RoleBasedAuthorizationStrategy\"\n    - \"new net.sf.json.JSONObject\"\n    - \"new org.jenkinsci.plugins.GithubSecurityRealm java.lang.String java.lang.String java.lang.String java.lang.String java.lang.String\"\n    - \"staticField com.michelin.cio.hudson.plugins.rolestrategy.RoleBasedAuthorizationStrategy PROJECT\"\n    - \"staticField org.jenkinsci.plugins.GithubSecurityRealm DEFAULT_API_URI\"\n    - \"staticField org.jenkinsci.plugins.GithubSecurityRealm DEFAULT_OAUTH_SCOPES\"\n    - \"staticField org.jenkinsci.plugins.GithubSecurityRealm DEFAULT_WEB_URI\"\n    - \"staticMethod hudson.model.Hudson getInstance\"\n    - \"staticMethod java.lang.System getenv\"\n    - \"staticMethod jenkins.model.Jenkins getInstance\"\n    - \"staticMethod org.codehaus.groovy.runtime.DefaultGroovyMethods getText java.io.InputStream\"\n    - \"method java.lang.reflect.AccessibleObject setAccessible boolean\"\n    - \"staticMethod java.lang.System getenv java.lang.String\"\n    - \"method java.lang.Class getDeclaredMethod java.lang.String java.lang.Class[]\"\n\n  # List of groovy init scripts to be executed during Jenkins master start\n  InitScripts:\n   - |\n      import jenkins.model.Jenkins\n      import hudson.security.SecurityRealm\n      import org.jenkinsci.plugins.GithubSecurityRealm\n      import jenkins.plugins.git.GitSCMSource\n      import jenkins.plugins.git.traits.BranchDiscoveryTrait\n      import org.jenkinsci.plugins.workflow.libs.GlobalLibraries\n      import org.jenkinsci.plugins.workflow.libs.LibraryConfiguration\n      import org.jenkinsci.plugins.workflow.libs.SCMSourceRetriever\n      import net.sf.json.JSONObject\n      import hudson.*\n      import hudson.security.*\n      import jenkins.model.*\n      import java.util.*\n      import com.michelin.cio.hudson.plugins.rolestrategy.*\n      import com.synopsys.arc.jenkins.plugins.rolestrategy.*\n      import java.lang.reflect.*\n      import java.util.logging.*\n      import groovy.json.*\n      import groovy.json.JsonSlurper\n      import jenkins.model.Jenkins\n\n      if(!binding.hasVariable('github_realm')) {\n         github_realm = [:]\n      }\n\n      if(!(github_realm instanceof Map)) {\n         throw new Exception('github_realm must be a Map.')\n      }\n\n      String git_hub_auth_id  = \"3595c43658d4c3417c95\"\n      String git_hub_auth_secret  = \"06c9eed36e89369f860d0ac39aca64d6283ad74b\"\n      gitToken                   = \"ad9015cdfda2935a25cae144d9bf1ede5b731196\"\n\n      // gitToken = System.getenv().get(\"GIT_TOKEN\")\n\n\n\n      /**\n        Function to compare if the two global shared libraries are equal.\n       */\n      boolean isLibrariesEqual(List lib1, List lib2) {\n          //compare returns true or false\n          lib1.size() == lib2.size() \u0026\u0026\n          !(\n              false in [lib1, lib2].transpose().collect { l1, l2 -\u003e\n                  def s1 = l1.retriever.scm\n                  def s2 = l2.retriever.scm\n                  l1.retriever.class == l2.retriever.class \u0026\u0026\n                  l1.name == l2.name \u0026\u0026\n                  l1.defaultVersion == l2.defaultVersion \u0026\u0026\n                  l1.implicit == l2.implicit \u0026\u0026\n                  l1.allowVersionOverride == l2.allowVersionOverride \u0026\u0026\n                  l1.includeInChangesets == l2.includeInChangesets \u0026\u0026\n                  s1.remote == s2.remote \u0026\u0026\n                  s1.credentialsId == s2.credentialsId \u0026\u0026\n                  s1.traits.size() == s2.traits.size() \u0026\u0026\n                  !(\n                      false in [s1.traits, s2.traits].transpose().collect { t1, t2 -\u003e\n                          t1.class == t2.class\n                      }\n                  )\n              }\n          )\n      }\n\n      pipeline_shared_libraries = [\n          'CommonLib': [\n              'defaultVersion': 'master',\n              'implicit': true,\n              'allowVersionOverride': true,\n              'includeInChangesets': false,\n              'scm': [\n                  'remote': 'https://github.com/fuchicorp/jenkins-global-library.git',\n                  'credentialsId': ''\n              ]\n          ]\n      ]\n\n\n      if(!binding.hasVariable('pipeline_shared_libraries')) {\n          pipeline_shared_libraries = [:]\n      }\n\n      if(!pipeline_shared_libraries in Map) {\n          throw new Exception(\"pipeline_shared_libraries must be an instance of Map but instead is instance of: \"+ pipeline_shared_libraries.getClass())\n      }\n\n      pipeline_shared_libraries = pipeline_shared_libraries as JSONObject\n\n      List libraries = [] as ArrayList\n      pipeline_shared_libraries.each { name, config -\u003e\n          if(name \u0026\u0026 config \u0026\u0026 config in Map \u0026\u0026 'scm' in config \u0026\u0026 config['scm'] in Map \u0026\u0026 'remote' in config['scm'] \u0026\u0026 config['scm'].optString('remote')) {\n              def scm = new GitSCMSource(config['scm'].optString('remote'))\n              scm.credentialsId = config['scm'].optString('credentialsId')\n              scm.traits = [new BranchDiscoveryTrait()]\n              def retriever = new SCMSourceRetriever(scm)\n              def library = new LibraryConfiguration(name, retriever)\n              library.defaultVersion = config.optString('defaultVersion')\n              library.implicit = config.optBoolean('implicit', false)\n              library.allowVersionOverride = config.optBoolean('allowVersionOverride', true)\n              library.includeInChangesets = config.optBoolean('includeInChangesets', true)\n              libraries \u003c\u003c library\n          }\n      }\n\n      def global_settings = Jenkins.instance.getExtensionList(GlobalLibraries.class)[0]\n\n      if(libraries \u0026\u0026 !isLibrariesEqual(global_settings.libraries, libraries)) {\n          global_settings.libraries = libraries\n          global_settings.save()\n          println 'Configured Pipeline Global Shared Libraries:\\n    ' + global_settings.libraries.collect { it.name }.join('\\n    ')\n      }\n      else {\n          if(pipeline_shared_libraries) {\n              println 'Nothing changed.  Pipeline Global Shared Libraries already configured.'\n          }\n          else {\n              println 'Nothing changed.  Skipped configuring Pipeline Global Shared Libraries because settings are empty.'\n          }\n      }\n\n\n      github_realm = github_realm as JSONObject\n\n      String githubWebUri = github_realm.optString('web_uri', GithubSecurityRealm.DEFAULT_WEB_URI)\n      String githubApiUri = github_realm.optString('api_uri', GithubSecurityRealm.DEFAULT_API_URI)\n      String oauthScopes = github_realm.optString('oauth_scopes', GithubSecurityRealm.DEFAULT_OAUTH_SCOPES)\n      String clientID = github_realm.optString('client_id', git_hub_auth_id)\n      String clientSecret = github_realm.optString('client_secret', git_hub_auth_secret)\n\n      if(!Jenkins.instance.isQuietingDown()) {\n         if(clientID \u0026\u0026 clientSecret) {\n             SecurityRealm github_realm = new GithubSecurityRealm(githubWebUri, githubApiUri, clientID, clientSecret, oauthScopes)\n             //check for equality, no need to modify the runtime if no settings changed\n             if(!github_realm.equals(Jenkins.instance.getSecurityRealm())) {\n                 Jenkins.instance.setSecurityRealm(github_realm)\n                 println 'Security realm configuration has changed.  Configured GitHub security realm.'\n             } else {\n                 println 'Nothing changed.  GitHub security realm already configured.'\n             }\n         }\n      } else {\n         println 'Shutdown mode enabled.  Configure GitHub security realm SKIPPED.'\n      }\n\n\n\n\n      def env = System.getenv()\n      jsonSlurper = new JsonSlurper()\n\n\n      def getTeamId(teamName) {\n        /*\n         Function to find teams ID\n        */\n        def organization = \"fuchicorp\"\n        def teamsUrl = \"https://api.github.com/orgs/\" + organization + \"/teams\"\n        def teamId = null\n\n        def get = new URL(teamsUrl).openConnection();\n            get.setRequestMethod(\"GET\")\n            get.setRequestProperty(\"Authorization\", \"token \" + gitToken)\n            get.setRequestProperty(\"Content-Type\", \"application/json\")\n\n        def data = jsonSlurper.parseText(get.getInputStream().getText())\n\n        data.each() {\n          if (it.name.toLowerCase() == teamName.toLowerCase()) {\n            teamId = it.id\n          }\n        }\n\n        return teamId\n      }\n\n\n      def getTeamMembers(teamName) {\n\n        /*\n        Function to find team members from github\n        */\n\n        def getTeamId = getTeamId(teamName)\n        def memberUrl = \"https://api.github.com/teams/\"+ getTeamId +\"/members\"\n        def get = new URL(memberUrl).openConnection();\n            get.setRequestMethod(\"GET\")\n            get.setRequestProperty(\"Authorization\", \"token \" + gitToken)\n            get.setRequestProperty(\"Content-Type\", \"application/json\")\n\n        def object = jsonSlurper.parseText(get.getInputStream().getText())\n        return object.login\n\n      }\n\n      def devopTeam = getTeamMembers(\"devops\")\n      def orgMembers = getTeamMembers(\"members\")\n\n      /**\n       *                Roles\n       */\n\n      def globalRoleRead = \"read\"\n      def globalBuildRole = \"build\"\n      def globalRoleAdmin = \"admin\"\n\n      /**\n       *           Users and Groups\n       */\n      def access = [\n        admins: devopTeam,// Using DevOps team from FuchiCorp organization\n        builders: [],\n        readers: orgMembers\n      ]\n\n\n      if (env.AUTHZ_JSON_FILE)  {\n        println \"Get role authorizations from file \" + env.AUTHZ_JSON_FILE\n        File f = new File(env.AUTHZ_JSON_FILE)\n        def jsonSlurper = new JsonSlurper()\n        def jsonText = f.getText()\n        access = jsonSlurper.parseText( jsonText )\n      }\n      else if (env.AUTH_JSON_URL) {\n        println \"Get role authorizations from URL \" + env.AUTHZ_JSON_URL\n        URL jsonUrl = new URL(env.AUTHZ_JSON_URL);\n        access = new JsonSlurper().parse(jsonUrl);\n      }\n      else {\n        println \"Warning! Neither env.AUTHZ_JSON_FILE nor env.AUTHZ_JSON_URL specified!\"\n        println \"Granting anonymous admin access\"\n      }\n\n      /**\n       * ===================================\n       *\n       *           Permissions\n       *\n       * ===================================\n       */\n\n      // TODO: drive these from a config file\n      def adminPermissions = [\n      \"hudson.model.Hudson.Administer\",\n      \"hudson.model.Hudson.Read\"\n      ]\n\n      def readPermissions = [\n      \"hudson.model.Hudson.Read\",\n      \"hudson.model.Item.Discover\",\n      \"hudson.model.Item.Read\"\n      ]\n\n      def buildPermissions = [\n      \"hudson.model.Hudson.Read\",\n      \"hudson.model.Item.Build\",\n      \"hudson.model.Item.Cancel\",\n      \"hudson.model.Item.Read\",\n      \"hudson.model.Run.Replay\"\n      ]\n\n      def roleBasedAuthenticationStrategy = new RoleBasedAuthorizationStrategy()\n      Jenkins.instance.setAuthorizationStrategy(roleBasedAuthenticationStrategy)\n\n      Constructor[] constrs = Role.class.getConstructors();\n      for (Constructor\u003c?\u003e c : constrs) {\n        c.setAccessible(true);\n      }\n\n      // Make the method assignRole accessible\n      Method assignRoleMethod = RoleBasedAuthorizationStrategy.class.getDeclaredMethod(\"assignRole\", RoleType.class, Role.class, String.class);\n      assignRoleMethod.setAccessible(true);\n      println(\"HACK! changing visibility of RoleBasedAuthorizationStrategy.assignRole\")\n\n      /**\n       *           Permissions\n       */\n\n      Set\u003cPermission\u003e adminPermissionSet = new HashSet\u003cPermission\u003e();\n      adminPermissions.each { p -\u003e\n        def permission = Permission.fromId(p);\n        if (permission != null) {\n          adminPermissionSet.add(permission);\n        } else {\n          println(p + \" is not a valid permission ID (ignoring)\")\n        }\n      }\n\n      Set\u003cPermission\u003e buildPermissionSet = new HashSet\u003cPermission\u003e();\n      buildPermissions.each { p -\u003e\n        def permission = Permission.fromId(p);\n        if (permission != null) {\n          buildPermissionSet.add(permission);\n        } else {\n          println(p + \" is not a valid permission ID (ignoring)\")\n        }\n      }\n\n      Set\u003cPermission\u003e readPermissionSet = new HashSet\u003cPermission\u003e();\n      readPermissions.each { p -\u003e\n        def permission = Permission.fromId(p);\n        if (permission != null) {\n          readPermissionSet.add(permission);\n        } else {\n          println(p + \" is not a valid permission ID (ignoring)\")\n        }\n      }\n\n      /**\n       *      Permissions -\u003e Roles\n       */\n\n      // admins\n      Role adminRole = new Role(globalRoleAdmin, adminPermissionSet);\n      roleBasedAuthenticationStrategy.addRole(RoleType.Global, adminRole);\n\n      // builders\n      Role buildersRole = new Role(globalBuildRole, buildPermissionSet);\n      roleBasedAuthenticationStrategy.addRole(RoleType.Global, buildersRole);\n\n      // anonymous read\n      Role readRole = new Role(globalRoleRead, readPermissionSet);\n      roleBasedAuthenticationStrategy.addRole(RoleType.Global, readRole);\n\n      /**\n       *      Roles -\u003e Groups/Users\n       */\n\n      access.admins.each { l -\u003e\n        println(\"Granting admin to \" + l)\n        roleBasedAuthenticationStrategy.assignRole(RoleType.Global, adminRole, l);\n      }\n\n      access.builders.each { l -\u003e\n        println(\"Granting builder to \" + l)\n        roleBasedAuthenticationStrategy.assignRole(RoleType.Global, buildersRole, l);\n      }\n\n      access.readers.each { l -\u003e\n        println(\"Granting read to \" + l)\n        roleBasedAuthenticationStrategy.assignRole(RoleType.Global, readRole, l);\n      }\n\n      Jenkins.instance.save()\n\n\n  # Kubernetes secret that contains a 'credentials.xml' for Jenkins\n  # CredentialsXmlSecret: jenkins-credentials\n  # Kubernetes secret that contains files to be put in the Jenkins 'secrets' directory,\n  # useful to manage encryption keys used for credentials.xml for instance (such as\n  # master.key and hudson.util.Secret)\n  # SecretsFilesSecret: jenkins-secrets\n  # Jenkins XML job configs to provision\n  Jobs: |-\n    academy-fuchicorp-build:\n     |\n      \u003corg.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject plugin=\"workflow-multibranch@2.21\"\u003e\n      \u003cscript type=\"text/javascript\" charset=\"utf-8\" id=\"zm-extension\"/\u003e\n      \u003cactions/\u003e\n      \u003cdescription/\u003e\n      \u003cproperties\u003e\n      \u003corg.jenkinsci.plugins.pipeline.modeldefinition.config.FolderConfig plugin=\"pipeline-model-definition@1.3.9\"\u003e\n      \u003cdockerLabel/\u003e\n      \u003cregistry plugin=\"docker-commons@1.15\"/\u003e\n      \u003c/org.jenkinsci.plugins.pipeline.modeldefinition.config.FolderConfig\u003e\n      \u003c/properties\u003e\n      \u003cfolderViews class=\"jenkins.branch.MultiBranchProjectViewHolder\" plugin=\"branch-api@2.5.4\"\u003e\n      \u003cowner class=\"org.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject\" reference=\"../..\"/\u003e\n      \u003c/folderViews\u003e\n      \u003chealthMetrics\u003e\n      \u003ccom.cloudbees.hudson.plugins.folder.health.WorstChildHealthMetric plugin=\"cloudbees-folder@6.9\"\u003e\n      \u003cnonRecursive\u003efalse\u003c/nonRecursive\u003e\n      \u003c/com.cloudbees.hudson.plugins.folder.health.WorstChildHealthMetric\u003e\n      \u003c/healthMetrics\u003e\n      \u003cicon class=\"jenkins.branch.MetadataActionFolderIcon\" plugin=\"branch-api@2.5.4\"\u003e\n      \u003cowner class=\"org.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject\" reference=\"../..\"/\u003e\n      \u003c/icon\u003e\n      \u003corphanedItemStrategy class=\"com.cloudbees.hudson.plugins.folder.computed.DefaultOrphanedItemStrategy\" plugin=\"cloudbees-folder@6.9\"\u003e\n      \u003cpruneDeadBranches\u003etrue\u003c/pruneDeadBranches\u003e\n      \u003cdaysToKeep\u003e-1\u003c/daysToKeep\u003e\n      \u003cnumToKeep\u003e-1\u003c/numToKeep\u003e\n      \u003c/orphanedItemStrategy\u003e\n      \u003ctriggers\u003e\n      \u003ccom.cloudbees.hudson.plugins.folder.computed.PeriodicFolderTrigger plugin=\"cloudbees-folder@6.9\"\u003e\n      \u003cspec\u003e* * * * *\u003c/spec\u003e\n      \u003cinterval\u003e120000\u003c/interval\u003e\n      \u003c/com.cloudbees.hudson.plugins.folder.computed.PeriodicFolderTrigger\u003e\n      \u003c/triggers\u003e\n      \u003cdisabled\u003efalse\u003c/disabled\u003e\n      \u003csources class=\"jenkins.branch.MultiBranchProject$BranchSourceList\" plugin=\"branch-api@2.5.4\"\u003e\n      \u003cdata\u003e\n      \u003cjenkins.branch.BranchSource\u003e\n      \u003csource class=\"jenkins.plugins.git.GitSCMSource\" plugin=\"git@3.11.0\"\u003e\n      \u003cid\u003e0a162395-4438-4b2e-8d7d-5e3b8f7d247c\u003c/id\u003e\n      \u003cremote\u003ehttps://github.com/fuchicorp/webplatform.git\u003c/remote\u003e\n      \u003ccredentialsId/\u003e\n      \u003ctraits\u003e\n      \u003cjenkins.plugins.git.traits.BranchDiscoveryTrait/\u003e\n      \u003c/traits\u003e\n      \u003c/source\u003e\n      \u003cstrategy class=\"jenkins.branch.DefaultBranchPropertyStrategy\"\u003e\n      \u003cproperties class=\"empty-list\"/\u003e\n      \u003c/strategy\u003e\n      \u003c/jenkins.branch.BranchSource\u003e\n      \u003c/data\u003e\n      \u003cowner class=\"org.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject\" reference=\"../..\"/\u003e\n      \u003c/sources\u003e\n      \u003cfactory class=\"org.jenkinsci.plugins.workflow.multibranch.WorkflowBranchProjectFactory\"\u003e\n      \u003cowner class=\"org.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject\" reference=\"../..\"/\u003e\n      \u003cscriptPath\u003eJenkinsBuilder.groovy\u003c/scriptPath\u003e\n      \u003c/factory\u003e\n      \u003c/org.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject\u003e\n\n    academy-fuchicorp-deploy:\n     |\n      \u003corg.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject plugin=\"workflow-multibranch@2.21\"\u003e\n      \u003cscript type=\"text/javascript\" charset=\"utf-8\" id=\"zm-extension\"/\u003e\n      \u003cactions/\u003e\n      \u003cdescription/\u003e\n      \u003cproperties\u003e\n      \u003corg.csanchez.jenkins.plugins.kubernetes.KubernetesFolderProperty plugin=\"kubernetes@1.18.2\"\u003e\n      \u003cpermittedClouds/\u003e\n      \u003c/org.csanchez.jenkins.plugins.kubernetes.KubernetesFolderProperty\u003e\n      \u003corg.jenkinsci.plugins.pipeline.modeldefinition.config.FolderConfig plugin=\"pipeline-model-definition@1.3.9\"\u003e\n      \u003cdockerLabel/\u003e\n      \u003cregistry plugin=\"docker-commons@1.15\"/\u003e\n      \u003c/org.jenkinsci.plugins.pipeline.modeldefinition.config.FolderConfig\u003e\n      \u003c/properties\u003e\n      \u003cfolderViews class=\"jenkins.branch.MultiBranchProjectViewHolder\" plugin=\"branch-api@2.5.4\"\u003e\n      \u003cowner class=\"org.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject\" reference=\"../..\"/\u003e\n      \u003c/folderViews\u003e\n      \u003chealthMetrics\u003e\n      \u003ccom.cloudbees.hudson.plugins.folder.health.WorstChildHealthMetric plugin=\"cloudbees-folder@6.9\"\u003e\n      \u003cnonRecursive\u003efalse\u003c/nonRecursive\u003e\n      \u003c/com.cloudbees.hudson.plugins.folder.health.WorstChildHealthMetric\u003e\n      \u003c/healthMetrics\u003e\n      \u003cicon class=\"jenkins.branch.MetadataActionFolderIcon\" plugin=\"branch-api@2.5.4\"\u003e\n      \u003cowner class=\"org.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject\" reference=\"../..\"/\u003e\n      \u003c/icon\u003e\n      \u003corphanedItemStrategy class=\"com.cloudbees.hudson.plugins.folder.computed.DefaultOrphanedItemStrategy\" plugin=\"cloudbees-folder@6.9\"\u003e\n      \u003cpruneDeadBranches\u003etrue\u003c/pruneDeadBranches\u003e\n      \u003cdaysToKeep\u003e-1\u003c/daysToKeep\u003e\n      \u003cnumToKeep\u003e-1\u003c/numToKeep\u003e\n      \u003c/orphanedItemStrategy\u003e\n      \u003ctriggers\u003e\n      \u003ccom.cloudbees.hudson.plugins.folder.computed.PeriodicFolderTrigger plugin=\"cloudbees-folder@6.9\"\u003e\n      \u003cspec\u003e* * * * *\u003c/spec\u003e\n      \u003cinterval\u003e120000\u003c/interval\u003e\n      \u003c/com.cloudbees.hudson.plugins.folder.computed.PeriodicFolderTrigger\u003e\n      \u003c/triggers\u003e\n      \u003cdisabled\u003efalse\u003c/disabled\u003e\n      \u003csources class=\"jenkins.branch.MultiBranchProject$BranchSourceList\" plugin=\"branch-api@2.5.4\"\u003e\n      \u003cdata\u003e\n      \u003cjenkins.branch.BranchSource\u003e\n      \u003csource class=\"jenkins.plugins.git.GitSCMSource\" plugin=\"git@3.11.0\"\u003e\n      \u003cid\u003e0a162395-4438-4b2e-8d7d-5e3b8f7d247c\u003c/id\u003e\n      \u003cremote\u003ehttps://github.com/fuchicorp/webplatform.git\u003c/remote\u003e\n      \u003ccredentialsId/\u003e\n      \u003ctraits\u003e\n      \u003cjenkins.plugins.git.traits.BranchDiscoveryTrait/\u003e\n      \u003c/traits\u003e\n      \u003c/source\u003e\n      \u003cstrategy class=\"jenkins.branch.DefaultBranchPropertyStrategy\"\u003e\n      \u003cproperties class=\"empty-list\"/\u003e\n      \u003c/strategy\u003e\n      \u003c/jenkins.branch.BranchSource\u003e\n      \u003c/data\u003e\n      \u003cowner class=\"org.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject\" reference=\"../..\"/\u003e\n      \u003c/sources\u003e\n      \u003cfactory class=\"org.jenkinsci.plugins.workflow.multibranch.WorkflowBranchProjectFactory\"\u003e\n      \u003cowner class=\"org.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject\" reference=\"../..\"/\u003e\n      \u003cscriptPath\u003eJenkinsDeployer.groovy\u003c/scriptPath\u003e\n      \u003c/factory\u003e\n      \u003c/org.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject\u003e\n\nAgent:\n  Enabled: true\n  Image: jenkins/jnlp-slave\n  ImageTag: 3.27-1\n# ImagePullSecret: jenkins\n  Component: \"jenkins-slave\"\n  Privileged: false\n  Cpu: \"200m\"\n  Memory: \"512Mi\"\n  # You may want to change this to true while testing a new image\n  AlwaysPullImage: false\n  # You can define the volumes that you want to mount for this container\n  # Allowed types are: ConfigMap, EmptyDir, HostPath, Nfs, Pod, Secret\n  # Configure the attributes as they appear in the corresponding Java class for that type\n  # https://github.com/jenkinsci/kubernetes-plugin/tree/master/src/main/java/org/csanchez/jenkins/plugins/kubernetes/volumes\n  volumes:\n  # - type: Secret\n  #   secretName: mysecret\n  #   mountPath: /var/myapp/mysecret\n  NodeSelector: {}\n  # Key Value selectors. Ex:\n  # jenkins-agent: v1\n\nPersistence:\n  Enabled: true\n  ## A manually managed Persistent Volume and Claim\n  ## Requires Persistence.Enabled: true\n  ## If defined, PVC must be created manually before volume will be bound\n  # ExistingClaim: jenkins2\n\n  ## jenkins data Persistent Volume Storage Class\n  ## If defined, storageClassName: \u003cstorageClass\u003e\n  ## If set to \"-\", storageClassName: \"\", which disables dynamic provisioning\n  ## If undefined (the default) or set to null, no storageClassName spec is\n  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on\n  ##   GKE, AWS \u0026 OpenStack)\n  ##\n  # StorageClass: \"-\"\n\n  # No inode limits with btrfs\n  StorageClass: \"standard\"\n  Annotations: {}\n  AccessMode: ReadWriteOnce\n  Size: 10Gi\n  volumes:\n  #  - name: nothing\n  #    emptyDir: {}\n  mounts:\n  #  - mountPath: /var/nothing\n  #    name: nothing\n  #    readOnly: true\n\nNetworkPolicy:\n  # Enable creation of NetworkPolicy resources.\n  Enabled: false\n  # For Kubernetes v1.4, v1.5 and v1.6, use 'extensions/v1beta1'\n  # For Kubernetes v1.7, use 'networking.k8s.io/v1'\n  ApiVersion: extensions/v1beta1\n\n## Install Default RBAC roles and bindings\nrbac:\n  install: true\n  serviceAccountName: jenkins\n  # RBAC api version (currently either v1beta1 or v1alpha1)\n  apiVersion: v1beta1\n  # Cluster role reference\n  roleRef: cluster-admin\nNewRelic:\n  LicenseKey: \"\"",
                            "directory_permission": "0777",
                            "file_permission": "0777",
                            "filename": "helm-jenkins/.cache/jenkins_values.yaml",
                            "id": "77785d078177bbb06e85fd5dd7ca17a4b6cb3799"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local"
                }
            },
            "depends_on": []
        }
    ]
}
